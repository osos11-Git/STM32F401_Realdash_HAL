
F401_RealDash_deneme1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a4  080078a4  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078ac  080078ac  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080078b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000190  08007a44  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  08007a44  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d57  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003313  00000000  00000000  00034f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a123  00000000  00000000  000399a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e27  00000000  00000000  00053acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d15  00000000  00000000  000648f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  000f765c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800774c 	.word	0x0800774c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	0800774c 	.word	0x0800774c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b44      	ldr	r3, [pc, #272]	; (8000600 <MX_ADC1_Init+0x124>)
 80004f0:	4a44      	ldr	r2, [pc, #272]	; (8000604 <MX_ADC1_Init+0x128>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <MX_ADC1_Init+0x124>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b40      	ldr	r3, [pc, #256]	; (8000600 <MX_ADC1_Init+0x124>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000502:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <MX_ADC1_Init+0x124>)
 8000504:	2201      	movs	r2, #1
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000508:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <MX_ADC1_Init+0x124>)
 800050a:	2201      	movs	r2, #1
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <MX_ADC1_Init+0x124>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b3a      	ldr	r3, [pc, #232]	; (8000600 <MX_ADC1_Init+0x124>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <MX_ADC1_Init+0x124>)
 800051e:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <MX_ADC1_Init+0x12c>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b37      	ldr	r3, [pc, #220]	; (8000600 <MX_ADC1_Init+0x124>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <MX_ADC1_Init+0x124>)
 800052a:	2206      	movs	r2, #6
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b34      	ldr	r3, [pc, #208]	; (8000600 <MX_ADC1_Init+0x124>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MX_ADC1_Init+0x124>)
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	4830      	ldr	r0, [pc, #192]	; (8000600 <MX_ADC1_Init+0x124>)
 800053e:	f000 ff49 	bl	80013d4 <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 fe10 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000554:	2303      	movs	r3, #3
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4828      	ldr	r0, [pc, #160]	; (8000600 <MX_ADC1_Init+0x124>)
 800055e:	f001 f8fd 	bl	800175c <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 fe00 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800056c:	2301      	movs	r3, #1
 800056e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4821      	ldr	r0, [pc, #132]	; (8000600 <MX_ADC1_Init+0x124>)
 800057a:	f001 f8ef 	bl	800175c <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000584:	f000 fdf2 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000588:	2302      	movs	r3, #2
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800058c:	2303      	movs	r3, #3
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	481a      	ldr	r0, [pc, #104]	; (8000600 <MX_ADC1_Init+0x124>)
 8000596:	f001 f8e1 	bl	800175c <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005a0:	f000 fde4 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005a4:	2303      	movs	r3, #3
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <MX_ADC1_Init+0x124>)
 80005b2:	f001 f8d3 	bl	800175c <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005bc:	f000 fdd6 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005c4:	2305      	movs	r3, #5
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_ADC1_Init+0x124>)
 80005ce:	f001 f8c5 	bl	800175c <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80005d8:	f000 fdc8 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005dc:	2309      	movs	r3, #9
 80005de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_ADC1_Init+0x124>)
 80005ea:	f001 f8b7 	bl	800175c <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80005f4:	f000 fdba 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000404 	.word	0x20000404
 8000604:	40012000 	.word	0x40012000
 8000608:	0f000001 	.word	0x0f000001

0800060c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a24      	ldr	r2, [pc, #144]	; (80006bc <HAL_ADC_MspInit+0xb0>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d141      	bne.n	80006b2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063c:	6453      	str	r3, [r2, #68]	; 0x44
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_ADC_MspInit+0xb4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000682:	230f      	movs	r3, #15
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_ADC_MspInit+0xb8>)
 8000696:	f001 fb91 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800069a:	2303      	movs	r3, #3
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <HAL_ADC_MspInit+0xbc>)
 80006ae:	f001 fb85 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40012000 	.word	0x40012000
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020400 	.word	0x40020400

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <MX_GPIO_Init+0x12c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a43      	ldr	r2, [pc, #268]	; (80007f8 <MX_GPIO_Init+0x12c>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_GPIO_Init+0x12c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a3c      	ldr	r2, [pc, #240]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_GPIO_Init+0x12c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0x12c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2e      	ldr	r2, [pc, #184]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_GPIO_Init+0x12c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pin_13_GPIO_Port, pin_13_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4828      	ldr	r0, [pc, #160]	; (80007fc <MX_GPIO_Init+0x130>)
 800075a:	f001 fccb 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pin_12_Pin|pin_11_Pin|pin_6_Pin|pin_5_Pin
 800075e:	2200      	movs	r2, #0
 8000760:	f24c 31f0 	movw	r1, #50160	; 0xc3f0
 8000764:	4826      	ldr	r0, [pc, #152]	; (8000800 <MX_GPIO_Init+0x134>)
 8000766:	f001 fcc5 	bl	80020f4 <HAL_GPIO_WritePin>
                          |pin_4_Pin|pin_3_Pin|pin_2_Pin|pin_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pin_10_Pin|pin_9_Pin|pin_8_Pin|pin_7_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8000770:	4824      	ldr	r0, [pc, #144]	; (8000804 <MX_GPIO_Init+0x138>)
 8000772:	f001 fcbf 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pin_13_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pin_13_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	481b      	ldr	r0, [pc, #108]	; (80007fc <MX_GPIO_Init+0x130>)
 8000790:	f001 fb14 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pin_12_Pin|pin_11_Pin|pin_6_Pin|pin_5_Pin
 8000794:	f24c 33f0 	movw	r3, #50160	; 0xc3f0
 8000798:	617b      	str	r3, [r7, #20]
                          |pin_4_Pin|pin_3_Pin|pin_2_Pin|pin_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_GPIO_Init+0x134>)
 80007ae:	f001 fb05 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = pin_10_Pin|pin_9_Pin|pin_8_Pin;
 80007b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_GPIO_Init+0x138>)
 80007cc:	f001 faf6 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pin_7_Pin;
 80007d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pin_7_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_GPIO_Init+0x138>)
 80007ea:	f001 fae7 	bl	8001dbc <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020400 	.word	0x40020400
 8000804:	40020000 	.word	0x40020000

08000808 <ReadDigitalStatuses>:
// digital and analog pins.
#define READWRITE_PINS


void ReadDigitalStatuses()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
#if defined (READWRITE_PINS)
  // read status of digital pins (1-13)
  digitalPins = 0;
 800080e:	4b8b      	ldr	r3, [pc, #556]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

  int bitposition = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]

    if (HAL_GPIO_ReadPin(pin_1_GPIO_Port,pin_1_Pin) == 1) digitalPins |= (1 << bitposition);
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	4888      	ldr	r0, [pc, #544]	; (8000a40 <ReadDigitalStatuses+0x238>)
 800081e:	f001 fc51 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d109      	bne.n	800083c <ReadDigitalStatuses+0x34>
 8000828:	2201      	movs	r2, #1
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b82      	ldr	r3, [pc, #520]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4313      	orrs	r3, r2
 8000838:	4a80      	ldr	r2, [pc, #512]	; (8000a3c <ReadDigitalStatuses+0x234>)
 800083a:	6013      	str	r3, [r2, #0]
    bitposition++;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_2_GPIO_Port,pin_2_Pin) == 1) digitalPins |= (1 << bitposition);
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	487e      	ldr	r0, [pc, #504]	; (8000a40 <ReadDigitalStatuses+0x238>)
 8000848:	f001 fc3c 	bl	80020c4 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d109      	bne.n	8000866 <ReadDigitalStatuses+0x5e>
 8000852:	2201      	movs	r2, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4b77      	ldr	r3, [pc, #476]	; (8000a3c <ReadDigitalStatuses+0x234>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4313      	orrs	r3, r2
 8000862:	4a76      	ldr	r2, [pc, #472]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000864:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_3_GPIO_Port,pin_3_Pin) == 1) digitalPins |= (1 << bitposition);
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4874      	ldr	r0, [pc, #464]	; (8000a40 <ReadDigitalStatuses+0x238>)
 8000870:	f001 fc28 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d109      	bne.n	800088e <ReadDigitalStatuses+0x86>
 800087a:	2201      	movs	r2, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	461a      	mov	r2, r3
 8000884:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4313      	orrs	r3, r2
 800088a:	4a6c      	ldr	r2, [pc, #432]	; (8000a3c <ReadDigitalStatuses+0x234>)
 800088c:	6013      	str	r3, [r2, #0]
    bitposition++;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_4_GPIO_Port,pin_4_Pin) == 1) digitalPins |= (1 << bitposition);
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	486a      	ldr	r0, [pc, #424]	; (8000a40 <ReadDigitalStatuses+0x238>)
 8000898:	f001 fc14 	bl	80020c4 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d109      	bne.n	80008b6 <ReadDigitalStatuses+0xae>
 80008a2:	2201      	movs	r2, #1
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	4a62      	ldr	r2, [pc, #392]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80008b4:	6013      	str	r3, [r2, #0]
    bitposition++;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_5_GPIO_Port,pin_5_Pin) == 1) digitalPins |= (1 << bitposition);
 80008bc:	2120      	movs	r1, #32
 80008be:	4860      	ldr	r0, [pc, #384]	; (8000a40 <ReadDigitalStatuses+0x238>)
 80008c0:	f001 fc00 	bl	80020c4 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d109      	bne.n	80008de <ReadDigitalStatuses+0xd6>
 80008ca:	2201      	movs	r2, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4313      	orrs	r3, r2
 80008da:	4a58      	ldr	r2, [pc, #352]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80008dc:	6013      	str	r3, [r2, #0]
    bitposition++;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_6_GPIO_Port,pin_6_Pin) == 1) digitalPins |= (1 << bitposition);
 80008e4:	2110      	movs	r1, #16
 80008e6:	4856      	ldr	r0, [pc, #344]	; (8000a40 <ReadDigitalStatuses+0x238>)
 80008e8:	f001 fbec 	bl	80020c4 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d109      	bne.n	8000906 <ReadDigitalStatuses+0xfe>
 80008f2:	2201      	movs	r2, #1
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4313      	orrs	r3, r2
 8000902:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000904:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_7_GPIO_Port,pin_7_Pin) == 1) digitalPins |= (1 << bitposition);
 800090c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000910:	484c      	ldr	r0, [pc, #304]	; (8000a44 <ReadDigitalStatuses+0x23c>)
 8000912:	f001 fbd7 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d109      	bne.n	8000930 <ReadDigitalStatuses+0x128>
 800091c:	2201      	movs	r2, #1
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	461a      	mov	r2, r3
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4313      	orrs	r3, r2
 800092c:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <ReadDigitalStatuses+0x234>)
 800092e:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_8_GPIO_Port,pin_8_Pin) == 1) digitalPins |= (1 << bitposition);
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	4842      	ldr	r0, [pc, #264]	; (8000a44 <ReadDigitalStatuses+0x23c>)
 800093c:	f001 fbc2 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d109      	bne.n	800095a <ReadDigitalStatuses+0x152>
 8000946:	2201      	movs	r2, #1
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	461a      	mov	r2, r3
 8000950:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4313      	orrs	r3, r2
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000958:	6013      	str	r3, [r2, #0]
    bitposition++;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_9_GPIO_Port,pin_9_Pin) == 1) digitalPins |= (1 << bitposition);
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <ReadDigitalStatuses+0x23c>)
 8000966:	f001 fbad 	bl	80020c4 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d109      	bne.n	8000984 <ReadDigitalStatuses+0x17c>
 8000970:	2201      	movs	r2, #1
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	461a      	mov	r2, r3
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <ReadDigitalStatuses+0x234>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4313      	orrs	r3, r2
 8000980:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000982:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_10_GPIO_Port,pin_10_Pin) == 1) digitalPins |= (1 << bitposition);
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	482d      	ldr	r0, [pc, #180]	; (8000a44 <ReadDigitalStatuses+0x23c>)
 8000990:	f001 fb98 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d109      	bne.n	80009ae <ReadDigitalStatuses+0x1a6>
 800099a:	2201      	movs	r2, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80009ac:	6013      	str	r3, [r2, #0]
    bitposition++;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_11_GPIO_Port,pin_11_Pin) == 1) digitalPins |= (1 << bitposition);
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <ReadDigitalStatuses+0x238>)
 80009ba:	f001 fb83 	bl	80020c4 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d109      	bne.n	80009d8 <ReadDigitalStatuses+0x1d0>
 80009c4:	2201      	movs	r2, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80009d6:	6013      	str	r3, [r2, #0]
    bitposition++;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_12_GPIO_Port,pin_12_Pin) == 1) digitalPins |= (1 << bitposition);
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	4817      	ldr	r0, [pc, #92]	; (8000a40 <ReadDigitalStatuses+0x238>)
 80009e4:	f001 fb6e 	bl	80020c4 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d109      	bne.n	8000a02 <ReadDigitalStatuses+0x1fa>
 80009ee:	2201      	movs	r2, #1
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <ReadDigitalStatuses+0x234>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000a00:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3301      	adds	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_13_GPIO_Port, pin_13_Pin) == 1) digitalPins |= (1 << bitposition);
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <ReadDigitalStatuses+0x240>)
 8000a0e:	f001 fb59 	bl	80020c4 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d109      	bne.n	8000a2c <ReadDigitalStatuses+0x224>
 8000a18:	2201      	movs	r2, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <ReadDigitalStatuses+0x234>)
 8000a2a:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]



#endif
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001ac 	.word	0x200001ac
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020800 	.word	0x40020800

08000a4c <ReadAnalogStatuses>:


//

void ReadAnalogStatuses()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
#if defined (READWRITE_PINS)
  // read analog pins (0-7)


   HAL_ADC_Start(&hadc1);
 8000a50:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a52:	f000 fd03 	bl	800145c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000a56:	2132      	movs	r1, #50	; 0x32
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a5a:	f000 fde6 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[0] = HAL_ADC_GetValue(&hadc1);
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a60:	f000 fe6e 	bl	8001740 <HAL_ADC_GetValue>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000a68:	6013      	str	r3, [r2, #0]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000a6a:	2132      	movs	r1, #50	; 0x32
 8000a6c:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a6e:	f000 fddc 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[1] = HAL_ADC_GetValue(&hadc1);
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a74:	f000 fe64 	bl	8001740 <HAL_ADC_GetValue>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a18      	ldr	r2, [pc, #96]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000a7c:	6053      	str	r3, [r2, #4]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a82:	f000 fdd2 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[2] = HAL_ADC_GetValue(&hadc1);
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a88:	f000 fe5a 	bl	8001740 <HAL_ADC_GetValue>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000a90:	6093      	str	r3, [r2, #8]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000a92:	2132      	movs	r1, #50	; 0x32
 8000a94:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a96:	f000 fdc8 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[3] = HAL_ADC_GetValue(&hadc1);
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000a9c:	f000 fe50 	bl	8001740 <HAL_ADC_GetValue>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000aa4:	60d3      	str	r3, [r2, #12]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000aa6:	2132      	movs	r1, #50	; 0x32
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000aaa:	f000 fdbe 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[4] = HAL_ADC_GetValue(&hadc1);
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000ab0:	f000 fe46 	bl	8001740 <HAL_ADC_GetValue>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000ab8:	6113      	str	r3, [r2, #16]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000aba:	2132      	movs	r1, #50	; 0x32
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000abe:	f000 fdb4 	bl	800162a <HAL_ADC_PollForConversion>
   analogPins[5] = HAL_ADC_GetValue(&hadc1);
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000ac4:	f000 fe3c 	bl	8001740 <HAL_ADC_GetValue>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <ReadAnalogStatuses+0x90>)
 8000acc:	6153      	str	r3, [r2, #20]
   HAL_ADC_Stop (&hadc1);
 8000ace:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <ReadAnalogStatuses+0x8c>)
 8000ad0:	f000 fd78 	bl	80015c4 <HAL_ADC_Stop>



#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000404 	.word	0x20000404
 8000adc:	200001b0 	.word	0x200001b0

08000ae0 <SendCANFramesToSerial>:


void SendCANFramesToSerial()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  // a CAN frame payload is always 8 bytes containing data in a manner
  // described by the RealDash custom channel description XML file
  // all multibyte values are handled as little endian by default.
  // endianess of the values can be specified in XML file if it is required to use big endian values

 unsigned char frameData[8]={0};
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <SendCANFramesToSerial+0x12c>)
 8000af0:	881b      	ldrh	r3, [r3, #0]


  // build 1st CAN frame, RPM, MAP, CLT, TPS (just example data)
  memcpy(frameData, &rpm, 2);
 8000af2:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &kpa, 2);
 8000af4:	463b      	mov	r3, r7
 8000af6:	3302      	adds	r3, #2
 8000af8:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <SendCANFramesToSerial+0x130>)
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &clt, 2);
 8000afe:	463b      	mov	r3, r7
 8000b00:	3304      	adds	r3, #4
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <SendCANFramesToSerial+0x134>)
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &tps, 2);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <SendCANFramesToSerial+0x138>)
 8000b0e:	8812      	ldrh	r2, [r2, #0]
 8000b10:	801a      	strh	r2, [r3, #0]

  // write first CAN frame to serial
 SendCANFrameToSerial(3200, frameData);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8000b1a:	f000 f88d 	bl	8000c38 <SendCANFrameToSerial>
 memset(frameData,'\0',8);
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2208      	movs	r2, #8
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f006 fe09 	bl	800773c <memset>
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <SendCANFramesToSerial+0x13c>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]


  // build 2nd CAN frame, Arduino digital pins and 2 analog values
  memcpy(frameData, &digitalPins, 2);
 8000b2e:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &analogPins[0], 2);
 8000b30:	463b      	mov	r3, r7
 8000b32:	3302      	adds	r3, #2
 8000b34:	4a3a      	ldr	r2, [pc, #232]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b36:	8812      	ldrh	r2, [r2, #0]
 8000b38:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &analogPins[1], 2);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	4a38      	ldr	r2, [pc, #224]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b40:	8892      	ldrh	r2, [r2, #4]
 8000b42:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &analogPins[2], 2);
 8000b44:	463b      	mov	r3, r7
 8000b46:	3306      	adds	r3, #6
 8000b48:	4a35      	ldr	r2, [pc, #212]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b4a:	8912      	ldrh	r2, [r2, #8]
 8000b4c:	801a      	strh	r2, [r3, #0]

  // write 2nd CAN frame to serial
  SendCANFrameToSerial(3201, frameData);
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	f640 4081 	movw	r0, #3201	; 0xc81
 8000b56:	f000 f86f 	bl	8000c38 <SendCANFrameToSerial>
  memset(frameData,'\0',8);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 fdeb 	bl	800773c <memset>
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b68:	899b      	ldrh	r3, [r3, #12]


  // build 3rd CAN frame, rest of Arduino analog values
  memcpy(frameData, &analogPins[3], 2);
 8000b6a:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &analogPins[4], 2);
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	3302      	adds	r3, #2
 8000b70:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b72:	8a12      	ldrh	r2, [r2, #16]
 8000b74:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &analogPins[5], 2);
 8000b76:	463b      	mov	r3, r7
 8000b78:	3304      	adds	r3, #4
 8000b7a:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b7c:	8a92      	ldrh	r2, [r2, #20]
 8000b7e:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &analogPins[6], 2);
 8000b80:	463b      	mov	r3, r7
 8000b82:	3306      	adds	r3, #6
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <SendCANFramesToSerial+0x140>)
 8000b86:	8b12      	ldrh	r2, [r2, #24]
 8000b88:	801a      	strh	r2, [r3, #0]

  // write 3rd CAN frame to serial
  SendCANFrameToSerial(3202, frameData);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f640 4082 	movw	r0, #3202	; 0xc82
 8000b92:	f000 f851 	bl	8000c38 <SendCANFrameToSerial>
  memset(frameData,'\0',8);
 8000b96:	463b      	mov	r3, r7
 8000b98:	2208      	movs	r2, #8
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fdcd 	bl	800773c <memset>


  // build 4th frame, this is a text extension frame

  // only send once at 1000 loops
  if (textCounter == 0)
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SendCANFramesToSerial+0x144>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <SendCANFramesToSerial+0xd6>
  {
    SendTextExtensionFrameToSerial(3203, "Hello RealDash, this is STM32 sending some text data");
 8000baa:	491f      	ldr	r1, [pc, #124]	; (8000c28 <SendCANFramesToSerial+0x148>)
 8000bac:	f640 4083 	movw	r0, #3203	; 0xc83
 8000bb0:	f000 f86c 	bl	8000c8c <SendTextExtensionFrameToSerial>
 8000bb4:	e020      	b.n	8000bf8 <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 2000)
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <SendCANFramesToSerial+0x144>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bbe:	d105      	bne.n	8000bcc <SendCANFramesToSerial+0xec>
  {
    SendTextExtensionFrameToSerial(3203, "Tomorrow's forecast: Lots of sun and 30 degrees centigate");
 8000bc0:	491a      	ldr	r1, [pc, #104]	; (8000c2c <SendCANFramesToSerial+0x14c>)
 8000bc2:	f640 4083 	movw	r0, #3203	; 0xc83
 8000bc6:	f000 f861 	bl	8000c8c <SendTextExtensionFrameToSerial>
 8000bca:	e015      	b.n	8000bf8 <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 4000)
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SendCANFramesToSerial+0x144>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bd4:	d105      	bne.n	8000be2 <SendCANFramesToSerial+0x102>
  {
    SendTextExtensionFrameToSerial(3203, "Now Playing: Insert your favorite song info here");
 8000bd6:	4916      	ldr	r1, [pc, #88]	; (8000c30 <SendCANFramesToSerial+0x150>)
 8000bd8:	f640 4083 	movw	r0, #3203	; 0xc83
 8000bdc:	f000 f856 	bl	8000c8c <SendTextExtensionFrameToSerial>
 8000be0:	e00a      	b.n	8000bf8 <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 6000)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <SendCANFramesToSerial+0x144>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f241 7270 	movw	r2, #6000	; 0x1770
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d104      	bne.n	8000bf8 <SendCANFramesToSerial+0x118>
  {
    SendTextExtensionFrameToSerial(3203, "Message from STM32: All systems running at nominal efficiency");
 8000bee:	4911      	ldr	r1, [pc, #68]	; (8000c34 <SendCANFramesToSerial+0x154>)
 8000bf0:	f640 4083 	movw	r0, #3203	; 0xc83
 8000bf4:	f000 f84a 	bl	8000c8c <SendTextExtensionFrameToSerial>
  }
  memset(frameData,'\0',8);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f006 fd9c 	bl	800773c <memset>

}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200001ac 	.word	0x200001ac
 8000c20:	200001b0 	.word	0x200001b0
 8000c24:	200001cc 	.word	0x200001cc
 8000c28:	08007764 	.word	0x08007764
 8000c2c:	0800779c 	.word	0x0800779c
 8000c30:	080077d8 	.word	0x080077d8
 8000c34:	0800780c 	.word	0x0800780c

08000c38 <SendCANFrameToSerial>:

void SendCANFrameToSerial(unsigned long canFrameId, unsigned char* frameData)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  // the 4 byte identifier at the beginning of each CAN frame
  // this is required for RealDash to 'catch-up' on ongoing stream of CAN frames
  unsigned char serialBlockTag[4] = { 0x44, 0x33, 0x22, 0x11 };
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <SendCANFrameToSerial+0x50>)
 8000c44:	60fb      	str	r3, [r7, #12]


  while( CDC_Transmit_FS((uint8_t*)serialBlockTag,4));
 8000c46:	bf00      	nop
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 f8f0 	bl	8006e34 <CDC_Transmit_FS>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f6      	bne.n	8000c48 <SendCANFrameToSerial+0x10>

  // the CAN frame id number (as 32bit little endian value)

  while(CDC_Transmit_FS((uint8_t*)&canFrameId,4));
 8000c5a:	bf00      	nop
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f006 f8e7 	bl	8006e34 <CDC_Transmit_FS>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f7      	bne.n	8000c5c <SendCANFrameToSerial+0x24>

  // CAN frame payload

 while( CDC_Transmit_FS((uint8_t*)frameData,8));
 8000c6c:	bf00      	nop
 8000c6e:	2108      	movs	r1, #8
 8000c70:	6838      	ldr	r0, [r7, #0]
 8000c72:	f006 f8df 	bl	8006e34 <CDC_Transmit_FS>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f8      	bne.n	8000c6e <SendCANFrameToSerial+0x36>

}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	11223344 	.word	0x11223344

08000c8c <SendTextExtensionFrameToSerial>:

void SendTextExtensionFrameToSerial(unsigned long canFrameId,  char* text)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  if (text)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d023      	beq.n	8000ce4 <SendTextExtensionFrameToSerial+0x58>
  {
    // the 4 byte identifier at the beginning of each CAN frame
    // this is required for RealDash to 'catch-up' on ongoing stream of CAN frames
    unsigned char textExtensionBlockTag[4] = { 0x55, 0x33, 0x22, 0x11 };
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <SendTextExtensionFrameToSerial+0x60>)
 8000c9e:	60fb      	str	r3, [r7, #12]
    while(CDC_Transmit_FS((uint8_t*)textExtensionBlockTag,4));
 8000ca0:	bf00      	nop
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f006 f8c3 	bl	8006e34 <CDC_Transmit_FS>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f6      	bne.n	8000ca2 <SendTextExtensionFrameToSerial+0x16>



    // the CAN frame id number (as 32bit little endian value)
    while(CDC_Transmit_FS((uint8_t*)&canFrameId,4));
 8000cb4:	bf00      	nop
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 f8ba 	bl	8006e34 <CDC_Transmit_FS>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f7      	bne.n	8000cb6 <SendTextExtensionFrameToSerial+0x2a>

    // text payload
    while(CDC_Transmit_FS((uint8_t*)text,strlen(text)+15));
 8000cc6:	bf00      	nop
 8000cc8:	6838      	ldr	r0, [r7, #0]
 8000cca:	f7ff fa83 	bl	80001d4 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	330f      	adds	r3, #15
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6838      	ldr	r0, [r7, #0]
 8000cda:	f006 f8ab 	bl	8006e34 <CDC_Transmit_FS>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f1      	bne.n	8000cc8 <SendTextExtensionFrameToSerial+0x3c>


  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	11223355 	.word	0x11223355

08000cf0 <ReadIncomingSerialData>:



void ReadIncomingSerialData()
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  while (lenght > 0)
 8000cf6:	e02c      	b.n	8000d52 <ReadIncomingSerialData+0x62>

     read one byte from serial stream

	*/

	  memcpy(incomingFrame,buffer_usb,17);
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <ReadIncomingSerialData+0x74>)
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <ReadIncomingSerialData+0x78>)
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	6828      	ldr	r0, [r5, #0]
 8000d02:	6869      	ldr	r1, [r5, #4]
 8000d04:	68aa      	ldr	r2, [r5, #8]
 8000d06:	68eb      	ldr	r3, [r5, #12]
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	7c2b      	ldrb	r3, [r5, #16]
 8000d0c:	7023      	strb	r3, [r4, #0]
	  int incomingFramePos=17;
 8000d0e:	2311      	movs	r3, #17
 8000d10:	607b      	str	r3, [r7, #4]

    // check the first incoming bytes tag (0x44, 0x33, 0x22, 0x11)
    if (incomingFrame[0] != 0x44)
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <ReadIncomingSerialData+0x74>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b44      	cmp	r3, #68	; 0x44
 8000d18:	d006      	beq.n	8000d28 <ReadIncomingSerialData+0x38>
    {
      // first incoming byte is not 0x44,
      // the tag at the beginning of the frame does not match, this is an invalid frame
      // just zero the incomingFrame buffer and start expecting first byte again
      memset(incomingFrame, 0, 17);
 8000d1a:	2211      	movs	r2, #17
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <ReadIncomingSerialData+0x74>)
 8000d20:	f006 fd0c 	bl	800773c <memset>
      incomingFramePos = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
    }

    if (incomingFramePos >= 17)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	dd11      	ble.n	8000d52 <ReadIncomingSerialData+0x62>
    {
      // frame complete, process it
      ProcessIncomingFrame(incomingFrame);
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <ReadIncomingSerialData+0x74>)
 8000d30:	f000 f81e 	bl	8000d70 <ProcessIncomingFrame>

      // zero the incomingFrame buffer and start expecting first byte again
      memset(incomingFrame, 0, 17);
 8000d34:	2211      	movs	r2, #17
 8000d36:	2100      	movs	r1, #0
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <ReadIncomingSerialData+0x74>)
 8000d3a:	f006 fcff 	bl	800773c <memset>
      incomingFramePos = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
      memset(buffer_usb,'\0',64);
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	2100      	movs	r1, #0
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <ReadIncomingSerialData+0x78>)
 8000d48:	f006 fcf8 	bl	800773c <memset>
      lenght=0;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <ReadIncomingSerialData+0x7c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
  while (lenght > 0)
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <ReadIncomingSerialData+0x7c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1ce      	bne.n	8000cf8 <ReadIncomingSerialData+0x8>
    }
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	200001d0 	.word	0x200001d0
 8000d68:	20000450 	.word	0x20000450
 8000d6c:	2000044c 	.word	0x2000044c

08000d70 <ProcessIncomingFrame>:

void ProcessIncomingFrame( char* frame)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  // first four bytes contain set value frame separator bytes, always 0x44,0x33,0x22,x11
  // check that first 4 bytes match the tag
  if (frame[0] != 0x44 ||
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b44      	cmp	r3, #68	; 0x44
 8000d7e:	d134      	bne.n	8000dea <ProcessIncomingFrame+0x7a>
      frame[1] != 0x33 ||
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	781b      	ldrb	r3, [r3, #0]
  if (frame[0] != 0x44 ||
 8000d86:	2b33      	cmp	r3, #51	; 0x33
 8000d88:	d12f      	bne.n	8000dea <ProcessIncomingFrame+0x7a>
      frame[2] != 0x22 ||
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
      frame[1] != 0x33 ||
 8000d90:	2b22      	cmp	r3, #34	; 0x22
 8000d92:	d12a      	bne.n	8000dea <ProcessIncomingFrame+0x7a>
      frame[3] != 0x11)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3303      	adds	r3, #3
 8000d98:	781b      	ldrb	r3, [r3, #0]
      frame[2] != 0x22 ||
 8000d9a:	2b11      	cmp	r3, #17
 8000d9c:	d125      	bne.n	8000dea <ProcessIncomingFrame+0x7a>
    // frame tag does not match, wait for another frame
    return;
  }

  // next four bytes contain set value CAN frame id in little endian form
  unsigned long canFrameId = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  memcpy(&canFrameId, frame + 4, 4);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]

  // next 8 bytes are the frame data
  // ...

  // last byte is check byte calculated as sum of previous 13 bytes (ignore overflow)
  char checkByte = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<16; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e009      	b.n	8000dc8 <ProcessIncomingFrame+0x58>
  {
    checkByte += frame[i];
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<16; i++)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	ddf2      	ble.n	8000db4 <ProcessIncomingFrame+0x44>
  }

  if (frame[16] == checkByte)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	7dfa      	ldrb	r2, [r7, #23]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d108      	bne.n	8000dec <ProcessIncomingFrame+0x7c>
  {
    // checksum match, this is a valid set value-frame:
    // the frame payload data is in frame + 8 bytes
    HandleIncomingSetValueFrame(canFrameId, frame + 8);
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3308      	adds	r3, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	4610      	mov	r0, r2
 8000de4:	f000 f806 	bl	8000df4 <HandleIncomingSetValueFrame>
 8000de8:	e000      	b.n	8000dec <ProcessIncomingFrame+0x7c>
    return;
 8000dea:	bf00      	nop
  }
}
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HandleIncomingSetValueFrame>:

void HandleIncomingSetValueFrame(unsigned long canFrameId,  char* frameData)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  if (canFrameId == 3201)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f640 4281 	movw	r2, #3201	; 0xc81
 8000e04:	4293      	cmp	r3, r2
 8000e06:	f040 80be 	bne.w	8000f86 <HandleIncomingSetValueFrame+0x192>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b29a      	uxth	r2, r3
  {
    memcpy(&digitalPins, frameData, 2);
 8000e10:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e12:	801a      	strh	r2, [r3, #0]
    memcpy(&analogPins[0], frameData + 2, 2);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	3302      	adds	r3, #2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000e1e:	801a      	strh	r2, [r3, #0]
    memcpy(&analogPins[1], frameData + 4, 2);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3304      	adds	r3, #4
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000e2a:	809a      	strh	r2, [r3, #4]
    memcpy(&analogPins[2], frameData + 6, 2);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3306      	adds	r3, #6
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000e36:	811a      	strh	r2, [r3, #8]

#if defined (READWRITE_PINS)
    // write digital pins

    HAL_GPIO_WritePin(pin_1_GPIO_Port,pin_1_Pin,digitalPins & (1 << 0) ? 1 : 0);
 8000e38:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4a:	4861      	ldr	r0, [pc, #388]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000e4c:	f001 f952 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_2_GPIO_Port,pin_2_Pin,digitalPins & (1 << 1) ? 1 : 0);
 8000e50:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	085b      	lsrs	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	485a      	ldr	r0, [pc, #360]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000e66:	f001 f945 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_3_GPIO_Port,pin_3_Pin,digitalPins & (1 << 2) ? 1 : 0);
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4854      	ldr	r0, [pc, #336]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000e7e:	f001 f939 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_4_GPIO_Port,pin_4_Pin,digitalPins & (1 << 3) ? 1 : 0);
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000e96:	f001 f92d 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_5_GPIO_Port,pin_5_Pin,digitalPins & (1 << 4) ? 1 : 0);
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4848      	ldr	r0, [pc, #288]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000eae:	f001 f921 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_6_GPIO_Port,pin_6_Pin,digitalPins & (1 << 5) ? 1 : 0);
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4842      	ldr	r0, [pc, #264]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000ec6:	f001 f915 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_7_GPIO_Port,pin_7_Pin,digitalPins & (1 << 6) ? 1 : 0);
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	099b      	lsrs	r3, r3, #6
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	483d      	ldr	r0, [pc, #244]	; (8000fd4 <HandleIncomingSetValueFrame+0x1e0>)
 8000ee0:	f001 f908 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_8_GPIO_Port,pin_8_Pin,digitalPins & (1 << 7) ? 1 : 0);
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	09db      	lsrs	r3, r3, #7
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	4836      	ldr	r0, [pc, #216]	; (8000fd4 <HandleIncomingSetValueFrame+0x1e0>)
 8000efa:	f001 f8fb 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_9_GPIO_Port,pin_9_Pin,digitalPins & (1 << 8) ? 1 : 0);
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	4830      	ldr	r0, [pc, #192]	; (8000fd4 <HandleIncomingSetValueFrame+0x1e0>)
 8000f14:	f001 f8ee 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_10_GPIO_Port,pin_10_Pin,digitalPins & (1 << 9) ? 1 : 0);
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0a5b      	lsrs	r3, r3, #9
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <HandleIncomingSetValueFrame+0x1e0>)
 8000f2e:	f001 f8e1 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_11_GPIO_Port,pin_11_Pin,digitalPins & (1 << 10) ? 1 : 0);
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0a9b      	lsrs	r3, r3, #10
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4822      	ldr	r0, [pc, #136]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000f48:	f001 f8d4 	bl	80020f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_12_GPIO_Port,pin_12_Pin,digitalPins & (1 << 11) ? 1 : 0);
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0adb      	lsrs	r3, r3, #11
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <HandleIncomingSetValueFrame+0x1dc>)
 8000f62:	f001 f8c7 	bl	80020f4 <HAL_GPIO_WritePin>
 //   HAL_GPIO_WritePin(pin_13_GPIO_Port,pin_13_Pin,digitalPins & (1 << 12) ? 1 : 0);
    HAL_GPIO_WritePin(pin_13_GPIO_Port,pin_13_Pin,digitalPins & (1 << 12) ? 0 : 1); // pull-up led PC13 , also CubeMx GPIO config set to be Pull-Up
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HandleIncomingSetValueFrame+0x1d4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7e:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <HandleIncomingSetValueFrame+0x1e4>)
 8000f80:	f001 f8b8 	bl	80020f4 <HAL_GPIO_WritePin>
    analogWrite(5, analogPins[5]);
    analogWrite(6, analogPins[6]);
    */
#endif
  }
}
 8000f84:	e01b      	b.n	8000fbe <HandleIncomingSetValueFrame+0x1ca>
  else if (canFrameId == 3202)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f640 4282 	movw	r2, #3202	; 0xc82
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d116      	bne.n	8000fbe <HandleIncomingSetValueFrame+0x1ca>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	b29a      	uxth	r2, r3
    memcpy(&analogPins[3], frameData + 0, 2);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000f98:	819a      	strh	r2, [r3, #12]
    memcpy(&analogPins[4], frameData + 2, 2);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000fa4:	821a      	strh	r2, [r3, #16]
    memcpy(&analogPins[5], frameData + 4, 2);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000fb0:	829a      	strh	r2, [r3, #20]
    memcpy(&analogPins[6], frameData + 6, 2);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HandleIncomingSetValueFrame+0x1d8>)
 8000fbc:	831a      	strh	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001ac 	.word	0x200001ac
 8000fcc:	200001b0 	.word	0x200001b0
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020800 	.word	0x40020800

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 f962 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f856 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f7ff fb70 	bl	80006cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000fec:	f005 fe48 	bl	8006c80 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000ff0:	f7ff fa74 	bl	80004dc <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ReadDigitalStatuses();
 8000ff4:	f7ff fc08 	bl	8000808 <ReadDigitalStatuses>
	  ReadAnalogStatuses();
 8000ff8:	f7ff fd28 	bl	8000a4c <ReadAnalogStatuses>
	  SendCANFramesToSerial();
 8000ffc:	f7ff fd70 	bl	8000ae0 <SendCANFramesToSerial>
	  ReadIncomingSerialData();
 8001000:	f7ff fe76 	bl	8000cf0 <ReadIncomingSerialData>

	  if (rpm++ > 5000)
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <main+0xa4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	491d      	ldr	r1, [pc, #116]	; (8001080 <main+0xa4>)
 800100c:	600a      	str	r2, [r1, #0]
 800100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d903      	bls.n	800101e <main+0x42>
	   {
	     rpm = 700;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <main+0xa4>)
 8001018:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800101c:	601a      	str	r2, [r3, #0]
	   }
	   if (kpa++ > 2500)
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <main+0xa8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	4917      	ldr	r1, [pc, #92]	; (8001084 <main+0xa8>)
 8001026:	600a      	str	r2, [r1, #0]
 8001028:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800102c:	4293      	cmp	r3, r2
 800102e:	d902      	bls.n	8001036 <main+0x5a>
	   {
	     kpa = 10;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <main+0xa8>)
 8001032:	220a      	movs	r2, #10
 8001034:	601a      	str	r2, [r3, #0]
	   }
	   if (tps++ > 1000)
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <main+0xac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	4912      	ldr	r1, [pc, #72]	; (8001088 <main+0xac>)
 800103e:	600a      	str	r2, [r1, #0]
 8001040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001044:	d902      	bls.n	800104c <main+0x70>
	   {
	     tps = 0;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <main+0xac>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	   }
	   if (clt++ > 230)
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <main+0xb0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <main+0xb0>)
 8001054:	600a      	str	r2, [r1, #0]
 8001056:	2be6      	cmp	r3, #230	; 0xe6
 8001058:	d902      	bls.n	8001060 <main+0x84>
	   {
	     // all values in frame are handled as unsigned values. To use negative values,
	     // offset actual value and write corresponding conversion to XML file imported to RealDash
	     // From RealDash 1.7.6 its also possible to specify value as signed="true" in XML file.
	     clt = 0;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <main+0xb0>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
	   }
	   // simple counter for sending the text frame to avoid sending it too often.
	   if (textCounter++ > 8000)
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <main+0xb4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <main+0xb4>)
 8001068:	600a      	str	r2, [r1, #0]
 800106a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800106e:	d902      	bls.n	8001076 <main+0x9a>
	   {
	     textCounter = 0;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <main+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	   }



	   HAL_Delay(5);
 8001076:	2005      	movs	r0, #5
 8001078:	f000 f988 	bl	800138c <HAL_Delay>
	  ReadDigitalStatuses();
 800107c:	e7ba      	b.n	8000ff4 <main+0x18>
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004
 8001088:	20000008 	.word	0x20000008
 800108c:	2000000c 	.word	0x2000000c
 8001090:	200001cc 	.word	0x200001cc

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 fb4a 	bl	800773c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0xd0>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a28      	ldr	r2, [pc, #160]	; (8001164 <SystemClock_Config+0xd0>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <SystemClock_Config+0xd0>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SystemClock_Config+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <SystemClock_Config+0xd4>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <SystemClock_Config+0xd4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001108:	2319      	movs	r3, #25
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800110c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001112:	2304      	movs	r3, #4
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001116:	2307      	movs	r3, #7
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f984 	bl	800342c <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800112a:	f000 f81f 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fbe6 	bl	800391c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001156:	f000 f809 	bl	800116c <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f89a 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <OTG_FS_IRQHandler+0x10>)
 8001222:	f001 f8d0 	bl	80023c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20001134 	.word	0x20001134

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127e:	f7ff ffd7 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f006 fa29 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fea9 	bl	8000fdc <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001298:	080078b4 	.word	0x080078b4
  ldr r2, =_sbss
 800129c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80012a0:	2000153c 	.word	0x2000153c

080012a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 fd31 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff ff4c 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fd49 	bl	8001da2 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 fd11 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000010 	.word	0x20000010
 8001344:	20000018 	.word	0x20000018
 8001348:	20000014 	.word	0x20000014

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000018 	.word	0x20000018
 8001370:	20000490 	.word	0x20000490

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000490 	.word	0x20000490

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000018 	.word	0x20000018

080013d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e033      	b.n	8001452 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff f90a 	bl	800060c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141a:	f023 0302 	bic.w	r3, r3, #2
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 faba 	bl	80019a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
 8001442:	e001      	b.n	8001448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_ADC_Start+0x1a>
 8001472:	2302      	movs	r3, #2
 8001474:	e097      	b.n	80015a6 <HAL_ADC_Start+0x14a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d018      	beq.n	80014be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800149c:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <HAL_ADC_Start+0x158>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <HAL_ADC_Start+0x15c>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	0c9a      	lsrs	r2, r3, #18
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d15f      	bne.n	800158c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150a:	d106      	bne.n	800151a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f023 0206 	bic.w	r2, r3, #6
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
 8001518:	e002      	b.n	8001520 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_ADC_Start+0x160>)
 800152a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001534:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d129      	bne.n	80015a4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e020      	b.n	80015a4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <HAL_ADC_Start+0x164>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d11b      	bne.n	80015a4 <HAL_ADC_Start+0x148>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d114      	bne.n	80015a4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	e00b      	b.n	80015a4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000010 	.word	0x20000010
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	40012300 	.word	0x40012300
 80015c0:	40012000 	.word	0x40012000

080015c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Stop+0x16>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e021      	b.n	800161e <HAL_ADC_Stop+0x5a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d113      	bne.n	8001670 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001656:	d10b      	bne.n	8001670 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e063      	b.n	8001738 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001670:	f7ff fe80 	bl	8001374 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001676:	e021      	b.n	80016bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d01d      	beq.n	80016bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_ADC_PollForConversion+0x6c>
 8001686:	f7ff fe75 	bl	8001374 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d212      	bcs.n	80016bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d00b      	beq.n	80016bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0204 	orr.w	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03d      	b.n	8001738 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d1d6      	bne.n	8001678 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0212 	mvn.w	r2, #18
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d123      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11f      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800170e:	2b00      	cmp	r3, #0
 8001710:	d111      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f043 0201 	orr.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c>
 8001774:	2302      	movs	r3, #2
 8001776:	e105      	b.n	8001984 <HAL_ADC_ConfigChannel+0x228>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d925      	bls.n	80017d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68d9      	ldr	r1, [r3, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	3b1e      	subs	r3, #30
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43da      	mvns	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	400a      	ands	r2, r1
 80017ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68d9      	ldr	r1, [r3, #12]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4403      	add	r3, r0
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e022      	b.n	800181a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	2207      	movs	r2, #7
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4403      	add	r3, r0
 8001810:	409a      	lsls	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b06      	cmp	r3, #6
 8001820:	d824      	bhi.n	800186c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b05      	subs	r3, #5
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	e04c      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d824      	bhi.n	80018be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43da      	mvns	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	400a      	ands	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b23      	subs	r3, #35	; 0x23
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	e023      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b41      	subs	r3, #65	; 0x41
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	400a      	ands	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b41      	subs	r3, #65	; 0x41
 80018fa:	fa00 f203 	lsl.w	r2, r0, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_ADC_ConfigChannel+0x234>)
 8001908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_ADC_ConfigChannel+0x238>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d109      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1cc>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d105      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_ADC_ConfigChannel+0x238>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d123      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x1e6>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d11b      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d111      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_ADC_ConfigChannel+0x23c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_ADC_ConfigChannel+0x240>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40012300 	.word	0x40012300
 8001994:	40012000 	.word	0x40012000
 8001998:	20000010 	.word	0x20000010
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a8:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <ADC_Init+0x1f0>)
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	021a      	lsls	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <ADC_Init+0x1f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6899      	ldr	r1, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e00f      	b.n	8001a9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0202 	bic.w	r2, r2, #2
 8001aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
 8001ab8:	005a      	lsls	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ada:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	3b01      	subs	r3, #1
 8001af8:	035a      	lsls	r2, r3, #13
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	e007      	b.n	8001b14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	051a      	lsls	r2, r3, #20
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b56:	025a      	lsls	r2, r3, #9
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	029a      	lsls	r2, r3, #10
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40012300 	.word	0x40012300
 8001b94:	0f000001 	.word	0x0f000001

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff3e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff31 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e159      	b.n	800208c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8148 	bne.w	8002086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a2 	beq.w	8002086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a49      	ldr	r2, [pc, #292]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x202>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2f4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x1fe>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <HAL_GPIO_Init+0x2fc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x1f6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a45      	ldr	r2, [pc, #276]	; (80020bc <HAL_GPIO_Init+0x300>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x1f2>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fae:	2307      	movs	r3, #7
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x204>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002002:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202c:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f aea2 	bls.w	8001dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40013c00 	.word	0x40013c00

080020c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e001      	b.n	80020e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002128:	b08f      	sub	sp, #60	; 0x3c
 800212a:	af0a      	add	r7, sp, #40	; 0x28
 800212c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e10f      	b.n	8002358 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f004 ffb6 	bl	80070c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fe8d 	bl	8003e96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	687e      	ldr	r6, [r7, #4]
 8002184:	466d      	mov	r5, sp
 8002186:	f106 0410 	add.w	r4, r6, #16
 800218a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002196:	e885 0003 	stmia.w	r5, {r0, r1}
 800219a:	1d33      	adds	r3, r6, #4
 800219c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f001 fd64 	bl	8003c6c <USB_CoreInit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0d0      	b.n	8002358 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fe7b 	bl	8003eb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e04a      	b.n	800225e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	333d      	adds	r3, #61	; 0x3d
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	333c      	adds	r3, #60	; 0x3c
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	b298      	uxth	r0, r3
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3342      	adds	r3, #66	; 0x42
 8002204:	4602      	mov	r2, r0
 8002206:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	333f      	adds	r3, #63	; 0x3f
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3344      	adds	r3, #68	; 0x44
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3348      	adds	r3, #72	; 0x48
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3350      	adds	r3, #80	; 0x50
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	3301      	adds	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d3af      	bcc.n	80021c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e044      	b.n	80022f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3b5      	bcc.n	800226e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	687e      	ldr	r6, [r7, #4]
 800230a:	466d      	mov	r5, sp
 800230c:	f106 0410 	add.w	r4, r6, #16
 8002310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800231c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002320:	1d33      	adds	r3, r6, #4
 8002322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f001 fe13 	bl	8003f50 <USB_DevInit>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e00d      	b.n	8002358 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fe8f 	bl	8005074 <USB_DevDisconnect>

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002360 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_PCD_Start+0x1c>
 8002378:	2302      	movs	r3, #2
 800237a:	e020      	b.n	80023be <HAL_PCD_Start+0x5e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	2b01      	cmp	r3, #1
 800238a:	d109      	bne.n	80023a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fd65 	bl	8003e74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fe3f 	bl	8005032 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c6:	b590      	push	{r4, r7, lr}
 80023c8:	b08d      	sub	sp, #52	; 0x34
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fefd 	bl	80051dc <USB_GetMode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 839d 	bne.w	8002b24 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fe61 	bl	80050b6 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8393 	beq.w	8002b22 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fe58 	bl	80050b6 <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f002 0202 	and.w	r2, r2, #2
 800241e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fe46 	bl	80050b6 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b10      	cmp	r3, #16
 8002432:	d161      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0210 	bic.w	r2, r2, #16
 8002442:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	3304      	adds	r3, #4
 8002462:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	0c5b      	lsrs	r3, r3, #17
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2b02      	cmp	r3, #2
 800246e:	d124      	bne.n	80024ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d035      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6a38      	ldr	r0, [r7, #32]
 8002490:	f002 fc7d 	bl	8004d8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a0:	441a      	add	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b2:	441a      	add	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	e016      	b.n	80024e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	0c5b      	lsrs	r3, r3, #17
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d110      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024cc:	2208      	movs	r2, #8
 80024ce:	4619      	mov	r1, r3
 80024d0:	6a38      	ldr	r0, [r7, #32]
 80024d2:	f002 fc5c 	bl	8004d8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e2:	441a      	add	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0210 	orr.w	r2, r2, #16
 80024f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fdda 	bl	80050b6 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250c:	d16e      	bne.n	80025ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fde0 	bl	80050dc <USB_ReadDevAllOutEpInterrupt>
 800251c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800251e:	e062      	b.n	80025e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d057      	beq.n	80025da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fe05 	bl	8005144 <USB_ReadDevOutEPInterrupt>
 800253a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fdb0 	bl	80030c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002576:	461a      	mov	r2, r3
 8002578:	2308      	movs	r3, #8
 800257a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800257c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 feaa 	bl	80032d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259a:	461a      	mov	r2, r3
 800259c:	2310      	movs	r3, #16
 800259e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	2320      	movs	r3, #32
 80025ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3301      	adds	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d199      	bne.n	8002520 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fd60 	bl	80050b6 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002600:	f040 80c0 	bne.w	8002784 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fd81 	bl	8005110 <USB_ReadDevAllInEpInterrupt>
 800260e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002614:	e0b2      	b.n	800277c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a7 	beq.w	8002770 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f002 fda7 	bl	8005180 <USB_ReadDevInEPInterrupt>
 8002632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d057      	beq.n	80026ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	69f9      	ldr	r1, [r7, #28]
 800265a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800265e:	4013      	ands	r3, r2
 8002660:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266e:	461a      	mov	r2, r3
 8002670:	2301      	movs	r3, #1
 8002672:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d132      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3348      	adds	r3, #72	; 0x48
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4403      	add	r3, r0
 800269c:	3344      	adds	r3, #68	; 0x44
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4419      	add	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4403      	add	r3, r0
 80026b0:	3348      	adds	r3, #72	; 0x48
 80026b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x31c>
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3350      	adds	r3, #80	; 0x50
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026da:	461a      	mov	r2, r3
 80026dc:	2101      	movs	r1, #1
 80026de:	f002 fdaf 	bl	8005240 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f004 fd6c 	bl	80071c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	461a      	mov	r2, r3
 8002706:	2308      	movs	r3, #8
 8002708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	461a      	mov	r2, r3
 8002722:	2310      	movs	r3, #16
 8002724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273c:	461a      	mov	r2, r3
 800273e:	2340      	movs	r3, #64	; 0x40
 8002740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002758:	461a      	mov	r2, r3
 800275a:	2302      	movs	r3, #2
 800275c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fc1b 	bl	8002fa6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	3301      	adds	r3, #1
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	f47f af49 	bne.w	8002616 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fc94 	bl	80050b6 <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002798:	d122      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d108      	bne.n	80027ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027c0:	2100      	movs	r1, #0
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fe26 	bl	8003414 <HAL_PCDEx_LPM_Callback>
 80027c8:	e002      	b.n	80027d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f004 fd68 	bl	80072a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fc66 	bl	80050b6 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f4:	d112      	bne.n	800281c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f004 fd24 	bl	8007254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800281a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fc48 	bl	80050b6 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	f040 80c7 	bne.w	80029c2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2110      	movs	r1, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fce2 	bl	8004218 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002858:	e056      	b.n	8002908 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002866:	461a      	mov	r2, r3
 8002868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800286c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287e:	0151      	lsls	r1, r2, #5
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	440a      	add	r2, r1
 8002884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800288c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	0151      	lsls	r1, r2, #5
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	440a      	add	r2, r1
 80028a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d2:	0151      	lsls	r1, r2, #5
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	440a      	add	r2, r1
 80028d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002900:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	3301      	adds	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290e:	429a      	cmp	r2, r3
 8002910:	d3a3      	bcc.n	800285a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002920:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002924:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293e:	f043 030b 	orr.w	r3, r3, #11
 8002942:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002954:	f043 030b 	orr.w	r3, r3, #11
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	e015      	b.n	8002988 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002972:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002982:	f043 030b 	orr.w	r3, r3, #11
 8002986:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002996:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800299a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029ac:	461a      	mov	r2, r3
 80029ae:	f002 fc47 	bl	8005240 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 fb75 	bl	80050b6 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d124      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fc0b 	bl	80051f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fc73 	bl	80042d2 <USB_GetDevSpeed>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681c      	ldr	r4, [r3, #0]
 80029f8:	f001 f92c 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 80029fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4620      	mov	r0, r4
 8002a08:	f001 f992 	bl	8003d30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f004 fc02 	bl	8007216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fb45 	bl	80050b6 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d10a      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f004 fbdf 	bl	80071fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f002 0208 	and.w	r2, r2, #8
 8002a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fb30 	bl	80050b6 <USB_ReadInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a60:	d10f      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f004 fc37 	bl	80072e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fb15 	bl	80050b6 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a96:	d10f      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f004 fc0a 	bl	80072bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fafa 	bl	80050b6 <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d10a      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f004 fc18 	bl	8007304 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fae4 	bl	80050b6 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d115      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f004 fc08 	bl	8007320 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	e000      	b.n	8002b24 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b22:	bf00      	nop
    }
  }
}
 8002b24:	3734      	adds	r7, #52	; 0x34
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}

08002b2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_SetAddress+0x1a>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e013      	b.n	8002b6c <HAL_PCD_SetAddress+0x42>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fa42 	bl	8004fe6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	70fb      	strb	r3, [r7, #3]
 8002b86:	460b      	mov	r3, r1
 8002b88:	803b      	strh	r3, [r7, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da0f      	bge.n	8002bba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3338      	adds	r3, #56	; 0x38
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	705a      	strb	r2, [r3, #1]
 8002bb8:	e00f      	b.n	8002bda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be6:	883a      	ldrh	r2, [r7, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	78ba      	ldrb	r2, [r7, #2]
 8002bf0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c04:	78bb      	ldrb	r3, [r7, #2]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d102      	bne.n	8002c10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_PCD_EP_Open+0xaa>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e00e      	b.n	8002c3c <HAL_PCD_EP_Open+0xc8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fb75 	bl	800431c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0f      	bge.n	8002c78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	3338      	adds	r3, #56	; 0x38
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00f      	b.n	8002c98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_PCD_EP_Close+0x6e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e00e      	b.n	8002cd0 <HAL_PCD_EP_Close+0x8c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68f9      	ldr	r1, [r7, #12]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fbb3 	bl	800442c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3304      	adds	r3, #4
 8002d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	f001 fe8e 	bl	8004a6c <USB_EP0StartXfer>
 8002d50:	e008      	b.n	8002d64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	f001 fc40 	bl	80045e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d90:	681b      	ldr	r3, [r3, #0]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f003 020f 	and.w	r2, r3, #15
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3338      	adds	r3, #56	; 0x38
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	f001 fe2c 	bl	8004a6c <USB_EP0StartXfer>
 8002e14:	e008      	b.n	8002e28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	f001 fbde 	bl	80045e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d901      	bls.n	8002e50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e050      	b.n	8002ef2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0f      	bge.n	8002e78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3338      	adds	r3, #56	; 0x38
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
 8002e76:	e00d      	b.n	8002e94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_PCD_EP_SetStall+0x82>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e01e      	b.n	8002ef2 <HAL_PCD_EP_SetStall+0xc0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68f9      	ldr	r1, [r7, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 ffbb 	bl	8004e3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f002 f9ac 	bl	8005240 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d901      	bls.n	8002f18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e042      	b.n	8002f9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0f      	bge.n	8002f40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3338      	adds	r3, #56	; 0x38
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00f      	b.n	8002f60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_EP_ClrStall+0x86>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e00e      	b.n	8002f9e <HAL_PCD_EP_ClrStall+0xa4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 ffc3 	bl	8004f1a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	af02      	add	r7, sp, #8
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	3338      	adds	r3, #56	; 0x38
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d901      	bls.n	8002fde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06c      	b.n	80030b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3303      	adds	r3, #3
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003002:	e02b      	b.n	800305c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	429a      	cmp	r2, r3
 8003018:	d902      	bls.n	8003020 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3303      	adds	r3, #3
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68d9      	ldr	r1, [r3, #12]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003038:	b2db      	uxtb	r3, r3
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4603      	mov	r3, r0
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f001 fe67 	bl	8004d12 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	441a      	add	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	b29b      	uxth	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	429a      	cmp	r2, r3
 8003070:	d809      	bhi.n	8003086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800307a:	429a      	cmp	r2, r3
 800307c:	d203      	bcs.n	8003086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1be      	bne.n	8003004 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	429a      	cmp	r2, r3
 8003090:	d811      	bhi.n	80030b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	2201      	movs	r2, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	6939      	ldr	r1, [r7, #16]
 80030ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b2:	4013      	ands	r3, r2
 80030b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	333c      	adds	r3, #60	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	f040 80a0 	bne.w	8003238 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003106:	4293      	cmp	r3, r2
 8003108:	f240 80dd 	bls.w	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80d7 	beq.w	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	e0cb      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	2320      	movs	r3, #32
 8003148:	6093      	str	r3, [r2, #8]
 800314a:	e0bc      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 80b7 	bne.w	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d90f      	bls.n	8003180 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	e0a2      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003192:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	0159      	lsls	r1, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	440b      	add	r3, r1
 800319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80031a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4403      	add	r3, r0
 80031b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4419      	add	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <PCD_EP_OutXfrComplete_int+0x16a>
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003222:	461a      	mov	r2, r3
 8003224:	2101      	movs	r1, #1
 8003226:	f002 f80b 	bl	8005240 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f003 ffad 	bl	8007190 <HAL_PCD_DataOutStageCallback>
 8003236:	e046      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d124      	bne.n	800328a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325c:	6093      	str	r3, [r2, #8]
 800325e:	e032      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003276:	461a      	mov	r2, r3
 8003278:	2320      	movs	r3, #32
 800327a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f003 ff84 	bl	8007190 <HAL_PCD_DataOutStageCallback>
 8003288:	e01d      	b.n	80032c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d114      	bne.n	80032ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032b2:	461a      	mov	r2, r3
 80032b4:	2100      	movs	r1, #0
 80032b6:	f001 ffc3 	bl	8005240 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f003 ff65 	bl	8007190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	4f54300a 	.word	0x4f54300a
 80032d4:	4f54310a 	.word	0x4f54310a

080032d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	333c      	adds	r3, #60	; 0x3c
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <PCD_EP_OutSetupPacket_int+0x88>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d90e      	bls.n	800332c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f003 ff1d 	bl	800716c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <PCD_EP_OutSetupPacket_int+0x88>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d90c      	bls.n	8003354 <PCD_EP_OutSetupPacket_int+0x7c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d108      	bne.n	8003354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800334c:	461a      	mov	r2, r3
 800334e:	2101      	movs	r1, #1
 8003350:	f001 ff76 	bl	8005240 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	4f54300a 	.word	0x4f54300a

08003364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
 8003370:	4613      	mov	r3, r2
 8003372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003382:	883b      	ldrh	r3, [r7, #0]
 8003384:	0419      	lsls	r1, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	430a      	orrs	r2, r1
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
 8003390:	e028      	b.n	80033e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e00d      	b.n	80033c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	3340      	adds	r3, #64	; 0x40
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	4413      	add	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	3301      	adds	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3ec      	bcc.n	80033a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033cc:	883b      	ldrh	r3, [r7, #0]
 80033ce:	0418      	lsls	r0, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4302      	orrs	r2, r0
 80033dc:	3340      	adds	r3, #64	; 0x40
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e264      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	4ba3      	ldr	r3, [pc, #652]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00c      	beq.n	8003470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003456:	4ba0      	ldr	r3, [pc, #640]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d112      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b9d      	ldr	r3, [pc, #628]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d10b      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	4b99      	ldr	r3, [pc, #612]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05b      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d157      	bne.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e23f      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x74>
 8003492:	4b91      	ldr	r3, [pc, #580]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a90      	ldr	r2, [pc, #576]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b8b      	ldr	r3, [pc, #556]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a8a      	ldr	r2, [pc, #552]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a87      	ldr	r2, [pc, #540]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034c4:	4b84      	ldr	r3, [pc, #528]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a83      	ldr	r2, [pc, #524]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a80      	ldr	r2, [pc, #512]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd ff46 	bl	8001374 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd ff42 	bl	8001374 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e204      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xc0>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd ff32 	bl	8001374 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd ff2e 	bl	8001374 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1f0      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b62      	ldr	r3, [pc, #392]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b5f      	ldr	r3, [pc, #380]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b5c      	ldr	r3, [pc, #368]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c4      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b56      	ldr	r3, [pc, #344]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4952      	ldr	r1, [pc, #328]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_RCC_OscConfig+0x2b0>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fee7 	bl	8001374 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd fee3 	bl	8001374 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a5      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4940      	ldr	r1, [pc, #256]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <HAL_RCC_OscConfig+0x2b0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fd fec6 	bl	8001374 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fd fec2 	bl	8001374 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e184      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d030      	beq.n	8003678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_RCC_OscConfig+0x2b4>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fd fea6 	bl	8001374 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fd fea2 	bl	8001374 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e164      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x200>
 800364a:	e015      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <HAL_RCC_OscConfig+0x2b4>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fd fe8f 	bl	8001374 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365a:	f7fd fe8b 	bl	8001374 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e14d      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a0 	beq.w	80037c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x2b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d121      	bne.n	8003706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_RCC_OscConfig+0x2b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_RCC_OscConfig+0x2b8>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ce:	f7fd fe51 	bl	8001374 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	e011      	b.n	80036fa <HAL_RCC_OscConfig+0x2ce>
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
 80036e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fd fe44 	bl	8001374 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e106      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b85      	ldr	r3, [pc, #532]	; (8003910 <HAL_RCC_OscConfig+0x4e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x2f0>
 800370e:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
 800371a:	e01c      	b.n	8003756 <HAL_RCC_OscConfig+0x32a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d10c      	bne.n	800373e <HAL_RCC_OscConfig+0x312>
 8003724:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	e00b      	b.n	8003756 <HAL_RCC_OscConfig+0x32a>
 800373e:	4b75      	ldr	r3, [pc, #468]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a74      	ldr	r2, [pc, #464]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a71      	ldr	r2, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd fe09 	bl	8001374 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fd fe05 	bl	8001374 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0c5      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ee      	beq.n	8003766 <HAL_RCC_OscConfig+0x33a>
 8003788:	e014      	b.n	80037b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378a:	f7fd fdf3 	bl	8001374 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fd fdef 	bl	8001374 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0af      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ee      	bne.n	8003792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ba:	4b56      	ldr	r3, [pc, #344]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a55      	ldr	r2, [pc, #340]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 809b 	beq.w	8003906 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d05c      	beq.n	8003896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d141      	bne.n	8003868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fd fdc3 	bl	8001374 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fd fdbf 	bl	8001374 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e081      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	019b      	lsls	r3, r3, #6
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0x4ec>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fd98 	bl	8001374 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd fd94 	bl	8001374 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e056      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x41c>
 8003866:	e04e      	b.n	8003906 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_OscConfig+0x4ec>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fd81 	bl	8001374 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fd7d 	bl	8001374 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03f      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x44a>
 8003894:	e037      	b.n	8003906 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e032      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d028      	beq.n	8003902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d121      	bne.n	8003902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d11a      	bne.n	8003902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40007000 	.word	0x40007000
 8003914:	40023800 	.word	0x40023800
 8003918:	42470060 	.word	0x42470060

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0cc      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d90c      	bls.n	8003958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d044      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e067      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fcb2 	bl	8001374 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fd fcae 	bl	8001374 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e04f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d20c      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fc12 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08007894 	.word	0x08007894
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	20000014 	.word	0x20000014

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	b5b0      	push	{r4, r5, r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aee:	2100      	movs	r1, #0
 8003af0:	6079      	str	r1, [r7, #4]
 8003af2:	2100      	movs	r1, #0
 8003af4:	60f9      	str	r1, [r7, #12]
 8003af6:	2100      	movs	r1, #0
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003afa:	2100      	movs	r1, #0
 8003afc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afe:	4952      	ldr	r1, [pc, #328]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b00:	6889      	ldr	r1, [r1, #8]
 8003b02:	f001 010c 	and.w	r1, r1, #12
 8003b06:	2908      	cmp	r1, #8
 8003b08:	d00d      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b0a:	2908      	cmp	r1, #8
 8003b0c:	f200 8094 	bhi.w	8003c38 <HAL_RCC_GetSysClockFreq+0x150>
 8003b10:	2900      	cmp	r1, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x32>
 8003b14:	2904      	cmp	r1, #4
 8003b16:	d003      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x38>
 8003b18:	e08e      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1a:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x164>)
 8003b1c:	60bb      	str	r3, [r7, #8]
       break;
 8003b1e:	e08e      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b22:	60bb      	str	r3, [r7, #8]
      break;
 8003b24:	e08b      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b26:	4948      	ldr	r1, [pc, #288]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b28:	6849      	ldr	r1, [r1, #4]
 8003b2a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b2e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b30:	4945      	ldr	r1, [pc, #276]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b32:	6849      	ldr	r1, [r1, #4]
 8003b34:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d024      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3c:	4942      	ldr	r1, [pc, #264]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b3e:	6849      	ldr	r1, [r1, #4]
 8003b40:	0989      	lsrs	r1, r1, #6
 8003b42:	4608      	mov	r0, r1
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b4c:	f04f 0500 	mov.w	r5, #0
 8003b50:	ea00 0204 	and.w	r2, r0, r4
 8003b54:	ea01 0305 	and.w	r3, r1, r5
 8003b58:	493d      	ldr	r1, [pc, #244]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b5a:	fb01 f003 	mul.w	r0, r1, r3
 8003b5e:	2100      	movs	r1, #0
 8003b60:	fb01 f102 	mul.w	r1, r1, r2
 8003b64:	1844      	adds	r4, r0, r1
 8003b66:	493a      	ldr	r1, [pc, #232]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b68:	fba2 0101 	umull	r0, r1, r2, r1
 8003b6c:	1863      	adds	r3, r4, r1
 8003b6e:	4619      	mov	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	f7fc fb34 	bl	80001e4 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e04a      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	ea02 0400 	and.w	r4, r2, r0
 8003b9e:	ea03 0501 	and.w	r5, r3, r1
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	014b      	lsls	r3, r1, #5
 8003bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb4:	0142      	lsls	r2, r0, #5
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	1b00      	subs	r0, r0, r4
 8003bbc:	eb61 0105 	sbc.w	r1, r1, r5
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	018b      	lsls	r3, r1, #6
 8003bca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bce:	0182      	lsls	r2, r0, #6
 8003bd0:	1a12      	subs	r2, r2, r0
 8003bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	00d9      	lsls	r1, r3, #3
 8003be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be4:	00d0      	lsls	r0, r2, #3
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	1912      	adds	r2, r2, r4
 8003bec:	eb45 0303 	adc.w	r3, r5, r3
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	0299      	lsls	r1, r3, #10
 8003bfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bfe:	0290      	lsls	r0, r2, #10
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f7fc fae8 	bl	80001e4 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	3301      	adds	r3, #1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	60bb      	str	r3, [r7, #8]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c3a:	60bb      	str	r3, [r7, #8]
      break;
 8003c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bdb0      	pop	{r4, r5, r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	017d7840 	.word	0x017d7840

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000010 	.word	0x20000010

08003c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f107 001c 	add.w	r0, r7, #28
 8003c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d122      	bne.n	8003cca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fb1c 	bl	80052fc <USB_CoreReset>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e01a      	b.n	8003d00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f001 fb10 	bl	80052fc <USB_CoreReset>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf2:	e005      	b.n	8003d00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10b      	bne.n	8003d1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f043 0206 	orr.w	r2, r3, #6
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2a:	b004      	add	sp, #16
 8003d2c:	4770      	bx	lr
	...

08003d30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d165      	bne.n	8003e10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <USB_SetTurnaroundTime+0x11c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d906      	bls.n	8003d5a <USB_SetTurnaroundTime+0x2a>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <USB_SetTurnaroundTime+0x120>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d202      	bcs.n	8003d5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d54:	230f      	movs	r3, #15
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e062      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <USB_SetTurnaroundTime+0x120>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d306      	bcc.n	8003d70 <USB_SetTurnaroundTime+0x40>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <USB_SetTurnaroundTime+0x124>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d202      	bcs.n	8003d70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d6a:	230e      	movs	r3, #14
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e057      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <USB_SetTurnaroundTime+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d306      	bcc.n	8003d86 <USB_SetTurnaroundTime+0x56>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a37      	ldr	r2, [pc, #220]	; (8003e58 <USB_SetTurnaroundTime+0x128>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d202      	bcs.n	8003d86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d80:	230d      	movs	r3, #13
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e04c      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <USB_SetTurnaroundTime+0x128>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d306      	bcc.n	8003d9c <USB_SetTurnaroundTime+0x6c>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4a32      	ldr	r2, [pc, #200]	; (8003e5c <USB_SetTurnaroundTime+0x12c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d802      	bhi.n	8003d9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d96:	230c      	movs	r3, #12
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e041      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <USB_SetTurnaroundTime+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d906      	bls.n	8003db2 <USB_SetTurnaroundTime+0x82>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <USB_SetTurnaroundTime+0x130>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d802      	bhi.n	8003db2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003dac:	230b      	movs	r3, #11
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e036      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <USB_SetTurnaroundTime+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d906      	bls.n	8003dc8 <USB_SetTurnaroundTime+0x98>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <USB_SetTurnaroundTime+0x134>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d802      	bhi.n	8003dc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e02b      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <USB_SetTurnaroundTime+0x134>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d906      	bls.n	8003dde <USB_SetTurnaroundTime+0xae>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <USB_SetTurnaroundTime+0x138>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d202      	bcs.n	8003dde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003dd8:	2309      	movs	r3, #9
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e020      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <USB_SetTurnaroundTime+0x138>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d306      	bcc.n	8003df4 <USB_SetTurnaroundTime+0xc4>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <USB_SetTurnaroundTime+0x13c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d802      	bhi.n	8003df4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dee:	2308      	movs	r3, #8
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e015      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <USB_SetTurnaroundTime+0x13c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d906      	bls.n	8003e0a <USB_SetTurnaroundTime+0xda>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <USB_SetTurnaroundTime+0x140>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d202      	bcs.n	8003e0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e04:	2307      	movs	r3, #7
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e00a      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e007      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e16:	2309      	movs	r3, #9
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e001      	b.n	8003e20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e1c:	2309      	movs	r3, #9
 8003e1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	029b      	lsls	r3, r3, #10
 8003e34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	00d8acbf 	.word	0x00d8acbf
 8003e50:	00e4e1c0 	.word	0x00e4e1c0
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	01067380 	.word	0x01067380
 8003e5c:	011a499f 	.word	0x011a499f
 8003e60:	01312cff 	.word	0x01312cff
 8003e64:	014ca43f 	.word	0x014ca43f
 8003e68:	016e3600 	.word	0x016e3600
 8003e6c:	01a6ab1f 	.word	0x01a6ab1f
 8003e70:	01e84800 	.word	0x01e84800

08003e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d115      	bne.n	8003f06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7fd fa50 	bl	800138c <HAL_Delay>
      ms++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 f972 	bl	80051dc <USB_GetMode>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d01e      	beq.n	8003f3c <USB_SetCurrentMode+0x84>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b31      	cmp	r3, #49	; 0x31
 8003f02:	d9f0      	bls.n	8003ee6 <USB_SetCurrentMode+0x2e>
 8003f04:	e01a      	b.n	8003f3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d115      	bne.n	8003f38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f18:	2001      	movs	r0, #1
 8003f1a:	f7fd fa37 	bl	800138c <HAL_Delay>
      ms++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f001 f959 	bl	80051dc <USB_GetMode>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <USB_SetCurrentMode+0x84>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b31      	cmp	r3, #49	; 0x31
 8003f34:	d9f0      	bls.n	8003f18 <USB_SetCurrentMode+0x60>
 8003f36:	e001      	b.n	8003f3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e005      	b.n	8003f48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b32      	cmp	r3, #50	; 0x32
 8003f40:	d101      	bne.n	8003f46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f50:	b084      	sub	sp, #16
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	e009      	b.n	8003f84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3340      	adds	r3, #64	; 0x40
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b0e      	cmp	r3, #14
 8003f88:	d9f2      	bls.n	8003f70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11c      	bne.n	8003fca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fc8:	e00b      	b.n	8003fe2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2300      	movs	r3, #0
 8003fec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	680b      	ldr	r3, [r1, #0]
 8004000:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2b01      	cmp	r3, #1
 8004006:	d10c      	bne.n	8004022 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800400e:	2100      	movs	r1, #0
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f945 	bl	80042a0 <USB_SetDevSpeed>
 8004016:	e008      	b.n	800402a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004018:	2101      	movs	r1, #1
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f940 	bl	80042a0 <USB_SetDevSpeed>
 8004020:	e003      	b.n	800402a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004022:	2103      	movs	r1, #3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f93b 	bl	80042a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800402a:	2110      	movs	r1, #16
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8f3 	bl	8004218 <USB_FlushTxFifo>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f90f 	bl	8004260 <USB_FlushRxFifo>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	461a      	mov	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	461a      	mov	r2, r3
 8004060:	2300      	movs	r3, #0
 8004062:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	e043      	b.n	80040fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800408c:	d118      	bne.n	80040c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a0:	461a      	mov	r2, r3
 80040a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e013      	b.n	80040d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b6:	461a      	mov	r2, r3
 80040b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e008      	b.n	80040d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	461a      	mov	r2, r3
 80040f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3301      	adds	r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	d3b7      	bcc.n	8004076 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e043      	b.n	8004194 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004122:	d118      	bne.n	8004156 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004136:	461a      	mov	r2, r3
 8004138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e013      	b.n	8004168 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e008      	b.n	8004168 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	461a      	mov	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800418c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3301      	adds	r3, #1
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d3b7      	bcc.n	800410c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f043 0210 	orr.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <USB_DevInit+0x2c4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004210:	b004      	add	sp, #16
 8004212:	4770      	bx	lr
 8004214:	803c3800 	.word	0x803c3800

08004218 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3301      	adds	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <USB_FlushTxFifo+0x44>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e006      	b.n	8004250 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d0f1      	beq.n	8004232 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00030d40 	.word	0x00030d40

08004260 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2210      	movs	r2, #16
 8004270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <USB_FlushRxFifo+0x3c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e006      	b.n	8004290 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b10      	cmp	r3, #16
 800428c:	d0f1      	beq.n	8004272 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	00030d40 	.word	0x00030d40

080042a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0306 	and.w	r3, r3, #6
 80042ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
 80042f6:	e00a      	b.n	800430e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d002      	beq.n	8004304 <USB_GetDevSpeed+0x32>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d102      	bne.n	800430a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004304:	2302      	movs	r3, #2
 8004306:	75fb      	strb	r3, [r7, #23]
 8004308:	e001      	b.n	800430e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800430a:	230f      	movs	r3, #15
 800430c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d13a      	bne.n	80043ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004356:	4313      	orrs	r3, r2
 8004358:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d155      	bne.n	800441c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	78db      	ldrb	r3, [r3, #3]
 800438a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800438c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	059b      	lsls	r3, r3, #22
 8004392:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004394:	4313      	orrs	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e036      	b.n	800441c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11a      	bne.n	800441c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	78db      	ldrb	r3, [r3, #3]
 8004400:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004402:	430b      	orrs	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d161      	bne.n	800450c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445e:	d11f      	bne.n	80044a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800449e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c0:	4013      	ands	r3, r2
 80044c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	b29b      	uxth	r3, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e4:	4013      	ands	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0159      	lsls	r1, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	4619      	mov	r1, r3
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <USB_DeactivateEndpoint+0x1b0>)
 8004506:	4013      	ands	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
 800450a:	e060      	b.n	80045ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004522:	d11f      	bne.n	8004564 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004542:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	43db      	mvns	r3, r3
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004584:	4013      	ands	r3, r2
 8004586:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	43db      	mvns	r3, r3
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4013      	ands	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	0159      	lsls	r1, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	4619      	mov	r1, r3
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <USB_DeactivateEndpoint+0x1b4>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	ec337800 	.word	0xec337800
 80045e0:	eff37800 	.word	0xeff37800

080045e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 815c 	bne.w	80048be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d132      	bne.n	8004674 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	0cdb      	lsrs	r3, r3, #19
 800466e:	04db      	lsls	r3, r3, #19
 8004670:	6113      	str	r3, [r2, #16]
 8004672:	e074      	b.n	800475e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	0cdb      	lsrs	r3, r3, #19
 8004690:	04db      	lsls	r3, r3, #19
 8004692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6959      	ldr	r1, [r3, #20]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	440b      	add	r3, r1
 80046d0:	1e59      	subs	r1, r3, #1
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046dc:	4b9d      	ldr	r3, [pc, #628]	; (8004954 <USB_EPStartXfer+0x370>)
 80046de:	400b      	ands	r3, r1
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	0148      	lsls	r0, r1, #5
 80046e4:	69f9      	ldr	r1, [r7, #28]
 80046e6:	4401      	add	r1, r0
 80046e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ec:	4313      	orrs	r3, r2
 80046ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004706:	69b9      	ldr	r1, [r7, #24]
 8004708:	0148      	lsls	r0, r1, #5
 800470a:	69f9      	ldr	r1, [r7, #28]
 800470c:	4401      	add	r1, r0
 800470e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004712:	4313      	orrs	r3, r2
 8004714:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	78db      	ldrb	r3, [r3, #3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d11f      	bne.n	800475e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800473c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800475c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d14b      	bne.n	80047fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d128      	bne.n	80047da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e00f      	b.n	80047da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e12f      	b.n	8004a5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800481a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	78db      	ldrb	r3, [r3, #3]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d015      	beq.n	8004850 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8117 	beq.w	8004a5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	69f9      	ldr	r1, [r7, #28]
 8004846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800484a:	4313      	orrs	r3, r2
 800484c:	634b      	str	r3, [r1, #52]	; 0x34
 800484e:	e105      	b.n	8004a5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d110      	bne.n	8004882 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e00f      	b.n	80048a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	b298      	uxth	r0, r3
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	4603      	mov	r3, r0
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa2b 	bl	8004d12 <USB_WritePacket>
 80048bc:	e0ce      	b.n	8004a5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	0cdb      	lsrs	r3, r3, #19
 80048da:	04db      	lsls	r3, r3, #19
 80048dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004900:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d126      	bne.n	8004958 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	69b9      	ldr	r1, [r7, #24]
 8004922:	0148      	lsls	r0, r1, #5
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	4401      	add	r1, r0
 8004928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800492c:	4313      	orrs	r3, r2
 800492e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800494e:	6113      	str	r3, [r2, #16]
 8004950:	e036      	b.n	80049c0 <USB_EPStartXfer+0x3dc>
 8004952:	bf00      	nop
 8004954:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4413      	add	r3, r2
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	04d9      	lsls	r1, r3, #19
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <USB_EPStartXfer+0x484>)
 8004982:	400b      	ands	r3, r1
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	0148      	lsls	r0, r1, #5
 8004988:	69f9      	ldr	r1, [r7, #28]
 800498a:	4401      	add	r1, r0
 800498c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004990:	4313      	orrs	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	8af9      	ldrh	r1, [r7, #22]
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	0148      	lsls	r0, r1, #5
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	4401      	add	r1, r0
 80049b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10d      	bne.n	80049e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	68d9      	ldr	r1, [r3, #12]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	460a      	mov	r2, r1
 80049e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	78db      	ldrb	r3, [r3, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d128      	bne.n	8004a3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00f      	b.n	8004a3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	1ff80000 	.word	0x1ff80000

08004a6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 80cd 	bne.w	8004c28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d132      	bne.n	8004afc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	0cdb      	lsrs	r3, r3, #19
 8004af6:	04db      	lsls	r3, r3, #19
 8004af8:	6113      	str	r3, [r2, #16]
 8004afa:	e04e      	b.n	8004b9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	0cdb      	lsrs	r3, r3, #19
 8004b18:	04db      	lsls	r3, r3, #19
 8004b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d903      	bls.n	8004b54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	6939      	ldr	r1, [r7, #16]
 8004b8c:	0148      	lsls	r0, r1, #5
 8004b8e:	6979      	ldr	r1, [r7, #20]
 8004b90:	4401      	add	r1, r0
 8004b92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b96:	4313      	orrs	r3, r2
 8004b98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d11e      	bne.n	8004bde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	e092      	b.n	8004d04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d07e      	beq.n	8004d04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	2101      	movs	r1, #1
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	6979      	ldr	r1, [r7, #20]
 8004c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c22:	4313      	orrs	r3, r2
 8004c24:	634b      	str	r3, [r1, #52]	; 0x34
 8004c26:	e06d      	b.n	8004d04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c42:	0cdb      	lsrs	r3, r3, #19
 8004c44:	04db      	lsls	r3, r3, #19
 8004c46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb2:	6939      	ldr	r1, [r7, #16]
 8004cb4:	0148      	lsls	r0, r1, #5
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	4401      	add	r1, r0
 8004cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d10d      	bne.n	8004ce4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b089      	sub	sp, #36	; 0x24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	460b      	mov	r3, r1
 8004d22:	71fb      	strb	r3, [r7, #7]
 8004d24:	4613      	mov	r3, r2
 8004d26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d123      	bne.n	8004d80 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d38:	88bb      	ldrh	r3, [r7, #4]
 8004d3a:	3303      	adds	r3, #3
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e018      	b.n	8004d78 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	031a      	lsls	r2, r3, #12
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d52:	461a      	mov	r2, r3
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3301      	adds	r3, #1
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3e2      	bcc.n	8004d46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b08b      	sub	sp, #44	; 0x2c
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	e014      	b.n	8004de4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	3301      	adds	r3, #1
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3301      	adds	r3, #1
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	3301      	adds	r3, #1
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	3301      	adds	r3, #1
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d3e6      	bcc.n	8004dba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dec:	8bfb      	ldrh	r3, [r7, #30]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01e      	beq.n	8004e30 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f107 0310 	add.w	r3, r7, #16
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	701a      	strb	r2, [r3, #0]
      i++;
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	3301      	adds	r3, #1
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e2a:	8bfb      	ldrh	r3, [r7, #30]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ea      	bne.n	8004e06 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	372c      	adds	r7, #44	; 0x2c
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d12c      	bne.n	8004eb4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db12      	blt.n	8004e92 <USB_EPSetStall+0x54>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00f      	beq.n	8004e92 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e02b      	b.n	8004f0c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db12      	blt.n	8004eec <USB_EPSetStall+0xae>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00f      	beq.n	8004eec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d128      	bne.n	8004f88 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	78db      	ldrb	r3, [r3, #3]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d003      	beq.n	8004f66 <USB_EPClearStall+0x4c>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d138      	bne.n	8004fd8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e027      	b.n	8004fd8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	78db      	ldrb	r3, [r3, #3]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d003      	beq.n	8004fb8 <USB_EPClearStall+0x9e>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10f      	bne.n	8004fd8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005004:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005008:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005060:	f023 0302 	bic.w	r3, r3, #2
 8005064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a2:	f043 0302 	orr.w	r3, r3, #2
 80050a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4013      	ands	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0c1b      	lsrs	r3, r3, #16
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	b29b      	uxth	r3, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005172:	68bb      	ldr	r3, [r7, #8]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	01db      	lsls	r3, r3, #7
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051ce:	68bb      	ldr	r3, [r7, #8]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0301 	and.w	r3, r3, #1
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005212:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	460b      	mov	r3, r1
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	333c      	adds	r3, #60	; 0x3c
 8005256:	3304      	adds	r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <USB_EP0_OutStart+0xb8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d90a      	bls.n	800527a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d101      	bne.n	800527a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e037      	b.n	80052ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a8:	f043 0318 	orr.w	r3, r3, #24
 80052ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10f      	bne.n	80052e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	4f54300a 	.word	0x4f54300a

080052fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <USB_CoreReset+0x60>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e01a      	b.n	800534e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	daf3      	bge.n	8005308 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <USB_CoreReset+0x60>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d0f1      	beq.n	8005330 <USB_CoreReset+0x34>

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	00030d40 	.word	0x00030d40

08005360 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800536c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005370:	f002 f96e 	bl	8007650 <USBD_static_malloc>
 8005374:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005384:	2302      	movs	r3, #2
 8005386:	e066      	b.n	8005456 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	7c1b      	ldrb	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d119      	bne.n	80053cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800539c:	2202      	movs	r2, #2
 800539e:	2181      	movs	r1, #129	; 0x81
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f002 f832 	bl	800740a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b0:	2202      	movs	r2, #2
 80053b2:	2101      	movs	r1, #1
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f002 f828 	bl	800740a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2210      	movs	r2, #16
 80053c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80053ca:	e016      	b.n	80053fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	2202      	movs	r2, #2
 80053d0:	2181      	movs	r1, #129	; 0x81
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 f819 	bl	800740a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053de:	2340      	movs	r3, #64	; 0x40
 80053e0:	2202      	movs	r2, #2
 80053e2:	2101      	movs	r1, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f002 f810 	bl	800740a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2210      	movs	r2, #16
 80053f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053fa:	2308      	movs	r3, #8
 80053fc:	2203      	movs	r2, #3
 80053fe:	2182      	movs	r1, #130	; 0x82
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f802 	bl	800740a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7c1b      	ldrb	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800543a:	2101      	movs	r1, #1
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f002 f8d3 	bl	80075e8 <USBD_LL_PrepareReceive>
 8005442:	e007      	b.n	8005454 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	2101      	movs	r1, #1
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f002 f8ca 	bl	80075e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800546a:	2181      	movs	r1, #129	; 0x81
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fff2 	bl	8007456 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 ffeb 	bl	8007456 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005488:	2182      	movs	r1, #130	; 0x82
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 ffe3 	bl	8007456 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 f8d6 	bl	800766c <USBD_static_free>
    pdev->pClassData = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0af      	b.n	800565c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03f      	beq.n	8005588 <USBD_CDC_Setup+0xb4>
 8005508:	2b20      	cmp	r3, #32
 800550a:	f040 809f 	bne.w	800564c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	88db      	ldrh	r3, [r3, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b25b      	sxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	da16      	bge.n	800554e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800552c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	88d2      	ldrh	r2, [r2, #6]
 8005532:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	88db      	ldrh	r3, [r3, #6]
 8005538:	2b07      	cmp	r3, #7
 800553a:	bf28      	it	cs
 800553c:	2307      	movcs	r3, #7
 800553e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	89fa      	ldrh	r2, [r7, #14]
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fb19 	bl	8006b7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800554c:	e085      	b.n	800565a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	785a      	ldrb	r2, [r3, #1]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	88db      	ldrh	r3, [r3, #6]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005564:	6939      	ldr	r1, [r7, #16]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	88db      	ldrh	r3, [r3, #6]
 800556a:	461a      	mov	r2, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fb32 	bl	8006bd6 <USBD_CtlPrepareRx>
      break;
 8005572:	e072      	b.n	800565a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	7850      	ldrb	r0, [r2, #1]
 8005580:	2200      	movs	r2, #0
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	4798      	blx	r3
      break;
 8005586:	e068      	b.n	800565a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b0b      	cmp	r3, #11
 800558e:	d852      	bhi.n	8005636 <USBD_CDC_Setup+0x162>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <USBD_CDC_Setup+0xc4>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055c9 	.word	0x080055c9
 800559c:	08005645 	.word	0x08005645
 80055a0:	08005637 	.word	0x08005637
 80055a4:	08005637 	.word	0x08005637
 80055a8:	08005637 	.word	0x08005637
 80055ac:	08005637 	.word	0x08005637
 80055b0:	08005637 	.word	0x08005637
 80055b4:	08005637 	.word	0x08005637
 80055b8:	08005637 	.word	0x08005637
 80055bc:	08005637 	.word	0x08005637
 80055c0:	080055f3 	.word	0x080055f3
 80055c4:	0800561d 	.word	0x0800561d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d107      	bne.n	80055e4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055d4:	f107 030a 	add.w	r3, r7, #10
 80055d8:	2202      	movs	r2, #2
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 face 	bl	8006b7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055e2:	e032      	b.n	800564a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 fa58 	bl	8006a9c <USBD_CtlError>
            ret = USBD_FAIL;
 80055ec:	2303      	movs	r3, #3
 80055ee:	75fb      	strb	r3, [r7, #23]
          break;
 80055f0:	e02b      	b.n	800564a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d107      	bne.n	800560e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055fe:	f107 030d 	add.w	r3, r7, #13
 8005602:	2201      	movs	r2, #1
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fab9 	bl	8006b7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800560c:	e01d      	b.n	800564a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fa43 	bl	8006a9c <USBD_CtlError>
            ret = USBD_FAIL;
 8005616:	2303      	movs	r3, #3
 8005618:	75fb      	strb	r3, [r7, #23]
          break;
 800561a:	e016      	b.n	800564a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b03      	cmp	r3, #3
 8005626:	d00f      	beq.n	8005648 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 fa36 	bl	8006a9c <USBD_CtlError>
            ret = USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005634:	e008      	b.n	8005648 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fa2f 	bl	8006a9c <USBD_CtlError>
          ret = USBD_FAIL;
 800563e:	2303      	movs	r3, #3
 8005640:	75fb      	strb	r3, [r7, #23]
          break;
 8005642:	e002      	b.n	800564a <USBD_CDC_Setup+0x176>
          break;
 8005644:	bf00      	nop
 8005646:	e008      	b.n	800565a <USBD_CDC_Setup+0x186>
          break;
 8005648:	bf00      	nop
      }
      break;
 800564a:	e006      	b.n	800565a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fa24 	bl	8006a9c <USBD_CtlError>
      ret = USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	bf00      	nop
  }

  return (uint8_t)ret;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005676:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005682:	2303      	movs	r3, #3
 8005684:	e04f      	b.n	8005726 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800568c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3318      	adds	r3, #24
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d029      	beq.n	80056f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3318      	adds	r3, #24
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	78f9      	ldrb	r1, [r7, #3]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	460b      	mov	r3, r1
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4403      	add	r3, r0
 80056c4:	3344      	adds	r3, #68	; 0x44
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80056cc:	fb03 f301 	mul.w	r3, r3, r1
 80056d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d110      	bne.n	80056f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3318      	adds	r3, #24
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056ea:	78f9      	ldrb	r1, [r7, #3]
 80056ec:	2300      	movs	r3, #0
 80056ee:	2200      	movs	r2, #0
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 ff58 	bl	80075a6 <USBD_LL_Transmit>
 80056f6:	e015      	b.n	8005724 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005740:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e015      	b.n	800577c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 ff68 	bl	800762a <USBD_LL_GetRxDataSize>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005776:	4611      	mov	r1, r2
 8005778:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005792:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800579a:	2303      	movs	r3, #3
 800579c:	e01b      	b.n	80057d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <USBD_CDC_EP0_RxReady+0x50>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057ae:	2bff      	cmp	r3, #255	; 0xff
 80057b0:	d010      	beq.n	80057d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80057c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057c8:	b292      	uxth	r2, r2
 80057ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2243      	movs	r2, #67	; 0x43
 80057ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200000a4 	.word	0x200000a4

08005800 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2243      	movs	r2, #67	; 0x43
 800580c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000060 	.word	0x20000060

08005820 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2243      	movs	r2, #67	; 0x43
 800582c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800582e:	4b03      	ldr	r3, [pc, #12]	; (800583c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	200000e8 	.word	0x200000e8

08005840 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	220a      	movs	r2, #10
 800584c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000001c 	.word	0x2000001c

08005860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	e004      	b.n	800587e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800588a:	b480      	push	{r7}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e008      	b.n	80058ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	e004      	b.n	80058ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005906:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005916:	2303      	movs	r3, #3
 8005918:	e01a      	b.n	8005950 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005920:	2b00      	cmp	r3, #0
 8005922:	d114      	bne.n	800594e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2201      	movs	r2, #1
 8005928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005942:	2181      	movs	r1, #129	; 0x81
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 fe2e 	bl	80075a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005972:	2303      	movs	r3, #3
 8005974:	e016      	b.n	80059a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7c1b      	ldrb	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005988:	2101      	movs	r1, #1
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fe2c 	bl	80075e8 <USBD_LL_PrepareReceive>
 8005990:	e007      	b.n	80059a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	2101      	movs	r1, #1
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fe23 	bl	80075e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e01f      	b.n	8005a04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f001 fc9f 	bl	800733c <USBD_LL_Init>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e016      	b.n	8005a52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	f107 020e 	add.w	r2, r7, #14
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fcb6 	bl	80073d4 <USBD_LL_Start>
 8005a68:	4603      	mov	r3, r0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a94:	2303      	movs	r3, #3
 8005a96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	4611      	mov	r1, r2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
  }

  return USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 ff90 	bl	8006a28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d01a      	beq.n	8005b62 <USBD_LL_SetupStage+0x72>
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d822      	bhi.n	8005b76 <USBD_LL_SetupStage+0x86>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <USBD_LL_SetupStage+0x4a>
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d00a      	beq.n	8005b4e <USBD_LL_SetupStage+0x5e>
 8005b38:	e01d      	b.n	8005b76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa62 	bl	800600c <USBD_StdDevReq>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e020      	b.n	8005b90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fac6 	bl	80060e8 <USBD_StdItfReq>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e016      	b.n	8005b90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb05 	bl	800617a <USBD_StdEPReq>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e00c      	b.n	8005b90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fc85 	bl	8007494 <USBD_LL_StallEP>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8e:	bf00      	nop
  }

  return ret;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d138      	bne.n	8005c20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d14a      	bne.n	8005c56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d913      	bls.n	8005bf4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bf28      	it	cs
 8005be6:	4613      	movcs	r3, r2
 8005be8:	461a      	mov	r2, r3
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 f80f 	bl	8006c10 <USBD_CtlContinueRx>
 8005bf2:	e030      	b.n	8005c56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d10b      	bne.n	8005c18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 f80a 	bl	8006c32 <USBD_CtlSendStatus>
 8005c1e:	e01a      	b.n	8005c56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d114      	bne.n	8005c56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00e      	beq.n	8005c56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	7afa      	ldrb	r2, [r7, #11]
 8005c42:	4611      	mov	r1, r2
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	4798      	blx	r3
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	e000      	b.n	8005c58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c6e:	7afb      	ldrb	r3, [r7, #11]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d16b      	bne.n	8005d4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3314      	adds	r3, #20
 8005c78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d156      	bne.n	8005d32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d914      	bls.n	8005cba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 ff84 	bl	8006bb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cac:	2300      	movs	r3, #0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f001 fc98 	bl	80075e8 <USBD_LL_PrepareReceive>
 8005cb8:	e03b      	b.n	8005d32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d11c      	bne.n	8005d00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d316      	bcc.n	8005d00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d20f      	bcs.n	8005d00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 ff65 	bl	8006bb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f001 fc75 	bl	80075e8 <USBD_LL_PrepareReceive>
 8005cfe:	e018      	b.n	8005d32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d10b      	bne.n	8005d24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f001 fbb4 	bl	8007494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 ff93 	bl	8006c58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d122      	bne.n	8005d82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff fe98 	bl	8005a72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d4a:	e01a      	b.n	8005d82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d114      	bne.n	8005d82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	7afa      	ldrb	r2, [r7, #11]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	e000      	b.n	8005d84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e02f      	b.n	8005e20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00f      	beq.n	8005dea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6852      	ldr	r2, [r2, #4]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	4611      	mov	r1, r2
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dea:	2340      	movs	r3, #64	; 0x40
 8005dec:	2200      	movs	r2, #0
 8005dee:	2100      	movs	r1, #0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fb0a 	bl	800740a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2240      	movs	r2, #64	; 0x40
 8005e02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fafc 	bl	800740a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d106      	bne.n	8005e96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e012      	b.n	8005ee0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d10b      	bne.n	8005ede <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e014      	b.n	8005f2c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d10d      	bne.n	8005f2a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	4611      	mov	r1, r2
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e014      	b.n	8005f78 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d10d      	bne.n	8005f76 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	4611      	mov	r1, r2
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6852      	ldr	r2, [r2, #4]
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
  }

  return USBD_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fec:	8a3b      	ldrh	r3, [r7, #16]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	b21a      	sxth	r2, r3
 8005ff2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ffc:	89fb      	ldrh	r3, [r7, #14]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d005      	beq.n	8006032 <USBD_StdDevReq+0x26>
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	d853      	bhi.n	80060d2 <USBD_StdDevReq+0xc6>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <USBD_StdDevReq+0x3a>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d14f      	bne.n	80060d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
      break;
 8006044:	e04a      	b.n	80060dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b09      	cmp	r3, #9
 800604c:	d83b      	bhi.n	80060c6 <USBD_StdDevReq+0xba>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <USBD_StdDevReq+0x48>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060bd 	.word	0x080060bd
 800605c:	080060c7 	.word	0x080060c7
 8006060:	080060b3 	.word	0x080060b3
 8006064:	080060c7 	.word	0x080060c7
 8006068:	08006087 	.word	0x08006087
 800606c:	0800607d 	.word	0x0800607d
 8006070:	080060c7 	.word	0x080060c7
 8006074:	0800609f 	.word	0x0800609f
 8006078:	08006091 	.word	0x08006091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9de 	bl	8006440 <USBD_GetDescriptor>
          break;
 8006084:	e024      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fb43 	bl	8006714 <USBD_SetAddress>
          break;
 800608e:	e01f      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fb82 	bl	800679c <USBD_SetConfig>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
          break;
 800609c:	e018      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc21 	bl	80068e8 <USBD_GetConfig>
          break;
 80060a6:	e013      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fc52 	bl	8006954 <USBD_GetStatus>
          break;
 80060b0:	e00e      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fc81 	bl	80069bc <USBD_SetFeature>
          break;
 80060ba:	e009      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fc90 	bl	80069e4 <USBD_ClrFeature>
          break;
 80060c4:	e004      	b.n	80060d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fce7 	bl	8006a9c <USBD_CtlError>
          break;
 80060ce:	bf00      	nop
      }
      break;
 80060d0:	e004      	b.n	80060dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fce1 	bl	8006a9c <USBD_CtlError>
      break;
 80060da:	bf00      	nop
  }

  return ret;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop

080060e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d005      	beq.n	800610e <USBD_StdItfReq+0x26>
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d82f      	bhi.n	8006166 <USBD_StdItfReq+0x7e>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <USBD_StdItfReq+0x26>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d12b      	bne.n	8006166 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	2b02      	cmp	r3, #2
 800611a:	d81d      	bhi.n	8006158 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	889b      	ldrh	r3, [r3, #4]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d813      	bhi.n	800614e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	88db      	ldrh	r3, [r3, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d110      	bne.n	8006162 <USBD_StdItfReq+0x7a>
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fd73 	bl	8006c32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800614c:	e009      	b.n	8006162 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fca3 	bl	8006a9c <USBD_CtlError>
          break;
 8006156:	e004      	b.n	8006162 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fc9e 	bl	8006a9c <USBD_CtlError>
          break;
 8006160:	e000      	b.n	8006164 <USBD_StdItfReq+0x7c>
          break;
 8006162:	bf00      	nop
      }
      break;
 8006164:	e004      	b.n	8006170 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc97 	bl	8006a9c <USBD_CtlError>
      break;
 800616e:	bf00      	nop
  }

  return ret;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	889b      	ldrh	r3, [r3, #4]
 800618c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d007      	beq.n	80061aa <USBD_StdEPReq+0x30>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	f200 8145 	bhi.w	800642a <USBD_StdEPReq+0x2b0>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <USBD_StdEPReq+0x44>
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	f040 8140 	bne.w	800642a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
      break;
 80061bc:	e13a      	b.n	8006434 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d007      	beq.n	80061d6 <USBD_StdEPReq+0x5c>
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	f300 8129 	bgt.w	800641e <USBD_StdEPReq+0x2a4>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d07f      	beq.n	80062d0 <USBD_StdEPReq+0x156>
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d03c      	beq.n	800624e <USBD_StdEPReq+0xd4>
 80061d4:	e123      	b.n	800641e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d002      	beq.n	80061e8 <USBD_StdEPReq+0x6e>
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d016      	beq.n	8006214 <USBD_StdEPReq+0x9a>
 80061e6:	e02c      	b.n	8006242 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <USBD_StdEPReq+0x90>
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b80      	cmp	r3, #128	; 0x80
 80061f2:	d00a      	beq.n	800620a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f94b 	bl	8007494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 f947 	bl	8007494 <USBD_LL_StallEP>
 8006206:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006208:	e020      	b.n	800624c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc45 	bl	8006a9c <USBD_CtlError>
              break;
 8006212:	e01b      	b.n	800624c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	885b      	ldrh	r3, [r3, #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10e      	bne.n	800623a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <USBD_StdEPReq+0xc0>
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d008      	beq.n	800623a <USBD_StdEPReq+0xc0>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	88db      	ldrh	r3, [r3, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f92d 	bl	8007494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fcf9 	bl	8006c32 <USBD_CtlSendStatus>

              break;
 8006240:	e004      	b.n	800624c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc29 	bl	8006a9c <USBD_CtlError>
              break;
 800624a:	bf00      	nop
          }
          break;
 800624c:	e0ec      	b.n	8006428 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d002      	beq.n	8006260 <USBD_StdEPReq+0xe6>
 800625a:	2b03      	cmp	r3, #3
 800625c:	d016      	beq.n	800628c <USBD_StdEPReq+0x112>
 800625e:	e030      	b.n	80062c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <USBD_StdEPReq+0x108>
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d00a      	beq.n	8006282 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 f90f 	bl	8007494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f90b 	bl	8007494 <USBD_LL_StallEP>
 800627e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006280:	e025      	b.n	80062ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc09 	bl	8006a9c <USBD_CtlError>
              break;
 800628a:	e020      	b.n	80062ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11b      	bne.n	80062cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f915 	bl	80074d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcc2 	bl	8006c32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80062c0:	e004      	b.n	80062cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fbe9 	bl	8006a9c <USBD_CtlError>
              break;
 80062ca:	e000      	b.n	80062ce <USBD_StdEPReq+0x154>
              break;
 80062cc:	bf00      	nop
          }
          break;
 80062ce:	e0ab      	b.n	8006428 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d002      	beq.n	80062e2 <USBD_StdEPReq+0x168>
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d032      	beq.n	8006346 <USBD_StdEPReq+0x1cc>
 80062e0:	e097      	b.n	8006412 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <USBD_StdEPReq+0x17e>
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d004      	beq.n	80062f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fbd3 	bl	8006a9c <USBD_CtlError>
                break;
 80062f6:	e091      	b.n	800641c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	da0b      	bge.n	8006318 <USBD_StdEPReq+0x19e>
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	3310      	adds	r3, #16
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	e00b      	b.n	8006330 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	3304      	adds	r3, #4
 8006330:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2202      	movs	r2, #2
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fc1d 	bl	8006b7e <USBD_CtlSendData>
              break;
 8006344:	e06a      	b.n	800641c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800634a:	2b00      	cmp	r3, #0
 800634c:	da11      	bge.n	8006372 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3324      	adds	r3, #36	; 0x24
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d117      	bne.n	8006398 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fb96 	bl	8006a9c <USBD_CtlError>
                  break;
 8006370:	e054      	b.n	800641c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fb83 	bl	8006a9c <USBD_CtlError>
                  break;
 8006396:	e041      	b.n	800641c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da0b      	bge.n	80063b8 <USBD_StdEPReq+0x23e>
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	3310      	adds	r3, #16
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	e00b      	b.n	80063d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <USBD_StdEPReq+0x264>
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d103      	bne.n	80063e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e00e      	b.n	8006404 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f890 	bl	8007510 <USBD_LL_IsStallEP>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e002      	b.n	8006404 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2202      	movs	r2, #2
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fbb7 	bl	8006b7e <USBD_CtlSendData>
              break;
 8006410:	e004      	b.n	800641c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb41 	bl	8006a9c <USBD_CtlError>
              break;
 800641a:	bf00      	nop
          }
          break;
 800641c:	e004      	b.n	8006428 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fb3b 	bl	8006a9c <USBD_CtlError>
          break;
 8006426:	bf00      	nop
      }
      break;
 8006428:	e004      	b.n	8006434 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fb35 	bl	8006a9c <USBD_CtlError>
      break;
 8006432:	bf00      	nop
  }

  return ret;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	2b06      	cmp	r3, #6
 8006462:	f200 8128 	bhi.w	80066b6 <USBD_GetDescriptor+0x276>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <USBD_GetDescriptor+0x2c>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	08006489 	.word	0x08006489
 8006470:	080064a1 	.word	0x080064a1
 8006474:	080064e1 	.word	0x080064e1
 8006478:	080066b7 	.word	0x080066b7
 800647c:	080066b7 	.word	0x080066b7
 8006480:	08006657 	.word	0x08006657
 8006484:	08006683 	.word	0x08006683
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	7c12      	ldrb	r2, [r2, #16]
 8006494:	f107 0108 	add.w	r1, r7, #8
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
 800649c:	60f8      	str	r0, [r7, #12]
      break;
 800649e:	e112      	b.n	80066c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7c1b      	ldrb	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10d      	bne.n	80064c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f107 0208 	add.w	r2, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	2202      	movs	r2, #2
 80064c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064c2:	e100      	b.n	80066c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	f107 0208 	add.w	r2, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	2202      	movs	r2, #2
 80064dc:	701a      	strb	r2, [r3, #0]
      break;
 80064de:	e0f2      	b.n	80066c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	f200 80ac 	bhi.w	8006644 <USBD_GetDescriptor+0x204>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <USBD_GetDescriptor+0xb4>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	0800650d 	.word	0x0800650d
 80064f8:	08006541 	.word	0x08006541
 80064fc:	08006575 	.word	0x08006575
 8006500:	080065a9 	.word	0x080065a9
 8006504:	080065dd 	.word	0x080065dd
 8006508:	08006611 	.word	0x08006611
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	7c12      	ldrb	r2, [r2, #16]
 8006524:	f107 0108 	add.w	r1, r7, #8
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
 800652c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800652e:	e091      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fab2 	bl	8006a9c <USBD_CtlError>
            err++;
 8006538:	7afb      	ldrb	r3, [r7, #11]
 800653a:	3301      	adds	r3, #1
 800653c:	72fb      	strb	r3, [r7, #11]
          break;
 800653e:	e089      	b.n	8006654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	7c12      	ldrb	r2, [r2, #16]
 8006558:	f107 0108 	add.w	r1, r7, #8
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
 8006560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006562:	e077      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa98 	bl	8006a9c <USBD_CtlError>
            err++;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	3301      	adds	r3, #1
 8006570:	72fb      	strb	r3, [r7, #11]
          break;
 8006572:	e06f      	b.n	8006654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	7c12      	ldrb	r2, [r2, #16]
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	4610      	mov	r0, r2
 8006592:	4798      	blx	r3
 8006594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006596:	e05d      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa7e 	bl	8006a9c <USBD_CtlError>
            err++;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	3301      	adds	r3, #1
 80065a4:	72fb      	strb	r3, [r7, #11]
          break;
 80065a6:	e055      	b.n	8006654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	7c12      	ldrb	r2, [r2, #16]
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ca:	e043      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa64 	bl	8006a9c <USBD_CtlError>
            err++;
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	3301      	adds	r3, #1
 80065d8:	72fb      	strb	r3, [r7, #11]
          break;
 80065da:	e03b      	b.n	8006654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fe:	e029      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa4a 	bl	8006a9c <USBD_CtlError>
            err++;
 8006608:	7afb      	ldrb	r3, [r7, #11]
 800660a:	3301      	adds	r3, #1
 800660c:	72fb      	strb	r3, [r7, #11]
          break;
 800660e:	e021      	b.n	8006654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	7c12      	ldrb	r2, [r2, #16]
 8006628:	f107 0108 	add.w	r1, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006632:	e00f      	b.n	8006654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa30 	bl	8006a9c <USBD_CtlError>
            err++;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	3301      	adds	r3, #1
 8006640:	72fb      	strb	r3, [r7, #11]
          break;
 8006642:	e007      	b.n	8006654 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa28 	bl	8006a9c <USBD_CtlError>
          err++;
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	3301      	adds	r3, #1
 8006650:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006652:	bf00      	nop
      }
      break;
 8006654:	e037      	b.n	80066c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7c1b      	ldrb	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	f107 0208 	add.w	r2, r7, #8
 800666a:	4610      	mov	r0, r2
 800666c:	4798      	blx	r3
 800666e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006670:	e029      	b.n	80066c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa11 	bl	8006a9c <USBD_CtlError>
        err++;
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	3301      	adds	r3, #1
 800667e:	72fb      	strb	r3, [r7, #11]
      break;
 8006680:	e021      	b.n	80066c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7c1b      	ldrb	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10d      	bne.n	80066a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	f107 0208 	add.w	r2, r7, #8
 8006696:	4610      	mov	r0, r2
 8006698:	4798      	blx	r3
 800669a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	2207      	movs	r2, #7
 80066a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066a4:	e00f      	b.n	80066c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9f7 	bl	8006a9c <USBD_CtlError>
        err++;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	3301      	adds	r3, #1
 80066b2:	72fb      	strb	r3, [r7, #11]
      break;
 80066b4:	e007      	b.n	80066c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9ef 	bl	8006a9c <USBD_CtlError>
      err++;
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	3301      	adds	r3, #1
 80066c2:	72fb      	strb	r3, [r7, #11]
      break;
 80066c4:	bf00      	nop
  }

  if (err != 0U)
 80066c6:	7afb      	ldrb	r3, [r7, #11]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11e      	bne.n	800670a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	88db      	ldrh	r3, [r3, #6]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066d4:	893b      	ldrh	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	88da      	ldrh	r2, [r3, #6]
 80066de:	893b      	ldrh	r3, [r7, #8]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bf28      	it	cs
 80066e4:	4613      	movcs	r3, r2
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066ea:	893b      	ldrh	r3, [r7, #8]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa44 	bl	8006b7e <USBD_CtlSendData>
 80066f6:	e009      	b.n	800670c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9ce 	bl	8006a9c <USBD_CtlError>
 8006700:	e004      	b.n	800670c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa95 	bl	8006c32 <USBD_CtlSendStatus>
 8006708:	e000      	b.n	800670c <USBD_GetDescriptor+0x2cc>
    return;
 800670a:	bf00      	nop
  }
}
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop

08006714 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	889b      	ldrh	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d131      	bne.n	800678a <USBD_SetAddress+0x76>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	88db      	ldrh	r3, [r3, #6]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d12d      	bne.n	800678a <USBD_SetAddress+0x76>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	885b      	ldrh	r3, [r3, #2]
 8006732:	2b7f      	cmp	r3, #127	; 0x7f
 8006734:	d829      	bhi.n	800678a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	885b      	ldrh	r3, [r3, #2]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b03      	cmp	r3, #3
 800674c:	d104      	bne.n	8006758 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f9a3 	bl	8006a9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	e01d      	b.n	8006794 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7bfa      	ldrb	r2, [r7, #15]
 800675c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 feff 	bl	8007568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa61 	bl	8006c32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	e009      	b.n	8006794 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006788:	e004      	b.n	8006794 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f985 	bl	8006a9c <USBD_CtlError>
  }
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	885b      	ldrh	r3, [r3, #2]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <USBD_SetConfig+0x148>)
 80067b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067b4:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <USBD_SetConfig+0x148>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d905      	bls.n	80067c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f96c 	bl	8006a9c <USBD_CtlError>
    return USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e088      	b.n	80068da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d002      	beq.n	80067da <USBD_SetConfig+0x3e>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d025      	beq.n	8006824 <USBD_SetConfig+0x88>
 80067d8:	e071      	b.n	80068be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067da:	4b42      	ldr	r3, [pc, #264]	; (80068e4 <USBD_SetConfig+0x148>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01c      	beq.n	800681c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80067e2:	4b40      	ldr	r3, [pc, #256]	; (80068e4 <USBD_SetConfig+0x148>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067ec:	4b3d      	ldr	r3, [pc, #244]	; (80068e4 <USBD_SetConfig+0x148>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff f948 	bl	8005a88 <USBD_SetClassConfig>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f949 	bl	8006a9c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800680a:	e065      	b.n	80068d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa10 	bl	8006c32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800681a:	e05d      	b.n	80068d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa08 	bl	8006c32 <USBD_CtlSendStatus>
      break;
 8006822:	e059      	b.n	80068d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006824:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <USBD_SetConfig+0x148>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d112      	bne.n	8006852 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <USBD_SetConfig+0x148>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <USBD_SetConfig+0x148>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff f93b 	bl	8005ac0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9f1 	bl	8006c32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006850:	e042      	b.n	80068d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <USBD_SetConfig+0x148>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d02a      	beq.n	80068b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff f929 	bl	8005ac0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <USBD_SetConfig+0x148>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006878:	4b1a      	ldr	r3, [pc, #104]	; (80068e4 <USBD_SetConfig+0x148>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f902 	bl	8005a88 <USBD_SetClassConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00f      	beq.n	80068ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f903 	bl	8006a9c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff f90e 	bl	8005ac0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068ac:	e014      	b.n	80068d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9bf 	bl	8006c32 <USBD_CtlSendStatus>
      break;
 80068b4:	e010      	b.n	80068d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9bb 	bl	8006c32 <USBD_CtlSendStatus>
      break;
 80068bc:	e00c      	b.n	80068d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8eb 	bl	8006a9c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <USBD_SetConfig+0x148>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff f8f7 	bl	8005ac0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068d2:	2303      	movs	r3, #3
 80068d4:	73fb      	strb	r3, [r7, #15]
      break;
 80068d6:	bf00      	nop
  }

  return ret;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200001e1 	.word	0x200001e1

080068e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d004      	beq.n	8006904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8cd 	bl	8006a9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006902:	e023      	b.n	800694c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	dc02      	bgt.n	8006916 <USBD_GetConfig+0x2e>
 8006910:	2b00      	cmp	r3, #0
 8006912:	dc03      	bgt.n	800691c <USBD_GetConfig+0x34>
 8006914:	e015      	b.n	8006942 <USBD_GetConfig+0x5a>
 8006916:	2b03      	cmp	r3, #3
 8006918:	d00b      	beq.n	8006932 <USBD_GetConfig+0x4a>
 800691a:	e012      	b.n	8006942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3308      	adds	r3, #8
 8006926:	2201      	movs	r2, #1
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f927 	bl	8006b7e <USBD_CtlSendData>
        break;
 8006930:	e00c      	b.n	800694c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	2201      	movs	r2, #1
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f91f 	bl	8006b7e <USBD_CtlSendData>
        break;
 8006940:	e004      	b.n	800694c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f8a9 	bl	8006a9c <USBD_CtlError>
        break;
 800694a:	bf00      	nop
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	2b02      	cmp	r3, #2
 800696a:	d81e      	bhi.n	80069aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	88db      	ldrh	r3, [r3, #6]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d004      	beq.n	800697e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f890 	bl	8006a9c <USBD_CtlError>
        break;
 800697c:	e01a      	b.n	80069b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f043 0202 	orr.w	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	330c      	adds	r3, #12
 800699e:	2202      	movs	r2, #2
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8eb 	bl	8006b7e <USBD_CtlSendData>
      break;
 80069a8:	e004      	b.n	80069b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f875 	bl	8006a9c <USBD_CtlError>
      break;
 80069b2:	bf00      	nop
  }
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d106      	bne.n	80069dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f92b 	bl	8006c32 <USBD_CtlSendStatus>
  }
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d80b      	bhi.n	8006a14 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	885b      	ldrh	r3, [r3, #2]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d10c      	bne.n	8006a1e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f910 	bl	8006c32 <USBD_CtlSendStatus>
      }
      break;
 8006a12:	e004      	b.n	8006a1e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f840 	bl	8006a9c <USBD_CtlError>
      break;
 8006a1c:	e000      	b.n	8006a20 <USBD_ClrFeature+0x3c>
      break;
 8006a1e:	bf00      	nop
  }
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff fabb 	bl	8005fce <SWAPBYTE>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff faae 	bl	8005fce <SWAPBYTE>
 8006a72:	4603      	mov	r3, r0
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff faa1 	bl	8005fce <SWAPBYTE>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	80da      	strh	r2, [r3, #6]
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aa6:	2180      	movs	r1, #128	; 0x80
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fcf3 	bl	8007494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006aae:	2100      	movs	r1, #0
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fcef 	bl	8007494 <USBD_LL_StallEP>
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d036      	beq.n	8006b42 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ad8:	6938      	ldr	r0, [r7, #16]
 8006ada:	f000 f836 	bl	8006b4a <USBD_GetLen>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	3301      	adds	r3, #1
 8006afc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4413      	add	r3, r2
 8006b04:	2203      	movs	r2, #3
 8006b06:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b0e:	e013      	b.n	8006b38 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4413      	add	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
    idx++;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	3301      	adds	r3, #1
 8006b26:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	3301      	adds	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e7      	bne.n	8006b10 <USBD_GetString+0x52>
 8006b40:	e000      	b.n	8006b44 <USBD_GetString+0x86>
    return;
 8006b42:	bf00      	nop
  }
}
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b5a:	e005      	b.n	8006b68 <USBD_GetLen+0x1e>
  {
    len++;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f5      	bne.n	8006b5c <USBD_GetLen+0x12>
  }

  return len;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fcfe 	bl	80075a6 <USBD_LL_Transmit>

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fced 	bl	80075a6 <USBD_LL_Transmit>

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2203      	movs	r2, #3
 8006be6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	2100      	movs	r1, #0
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fcf1 	bl	80075e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	2100      	movs	r1, #0
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fce0 	bl	80075e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c42:	2300      	movs	r3, #0
 8006c44:	2200      	movs	r2, #0
 8006c46:	2100      	movs	r1, #0
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fcac 	bl	80075a6 <USBD_LL_Transmit>

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2205      	movs	r2, #5
 8006c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fcba 	bl	80075e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c84:	2200      	movs	r2, #0
 8006c86:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <MX_USB_DEVICE_Init+0x50>)
 8006c88:	4812      	ldr	r0, [pc, #72]	; (8006cd4 <MX_USB_DEVICE_Init+0x54>)
 8006c8a:	f7fe fe8f 	bl	80059ac <USBD_Init>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c94:	f7fa fa6a 	bl	800116c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c98:	490f      	ldr	r1, [pc, #60]	; (8006cd8 <MX_USB_DEVICE_Init+0x58>)
 8006c9a:	480e      	ldr	r0, [pc, #56]	; (8006cd4 <MX_USB_DEVICE_Init+0x54>)
 8006c9c:	f7fe feb6 	bl	8005a0c <USBD_RegisterClass>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ca6:	f7fa fa61 	bl	800116c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006caa:	490c      	ldr	r1, [pc, #48]	; (8006cdc <MX_USB_DEVICE_Init+0x5c>)
 8006cac:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <MX_USB_DEVICE_Init+0x54>)
 8006cae:	f7fe fdd7 	bl	8005860 <USBD_CDC_RegisterInterface>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cb8:	f7fa fa58 	bl	800116c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cbc:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <MX_USB_DEVICE_Init+0x54>)
 8006cbe:	f7fe fecc 	bl	8005a5a <USBD_Start>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006cc8:	f7fa fa50 	bl	800116c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ccc:	bf00      	nop
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000140 	.word	0x20000140
 8006cd4:	20000494 	.word	0x20000494
 8006cd8:	20000028 	.word	0x20000028
 8006cdc:	2000012c 	.word	0x2000012c

08006ce0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4905      	ldr	r1, [pc, #20]	; (8006cfc <CDC_Init_FS+0x1c>)
 8006ce8:	4805      	ldr	r0, [pc, #20]	; (8006d00 <CDC_Init_FS+0x20>)
 8006cea:	f7fe fdce 	bl	800588a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cee:	4905      	ldr	r1, [pc, #20]	; (8006d04 <CDC_Init_FS+0x24>)
 8006cf0:	4803      	ldr	r0, [pc, #12]	; (8006d00 <CDC_Init_FS+0x20>)
 8006cf2:	f7fe fde8 	bl	80058c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006cf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000b4c 	.word	0x20000b4c
 8006d00:	20000494 	.word	0x20000494
 8006d04:	20000764 	.word	0x20000764

08006d08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
 8006d24:	4613      	mov	r3, r2
 8006d26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b23      	cmp	r3, #35	; 0x23
 8006d2c:	d84a      	bhi.n	8006dc4 <CDC_Control_FS+0xac>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <CDC_Control_FS+0x1c>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006dc5 	.word	0x08006dc5
 8006d38:	08006dc5 	.word	0x08006dc5
 8006d3c:	08006dc5 	.word	0x08006dc5
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006dc5 	.word	0x08006dc5
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dc5 	.word	0x08006dc5
 8006d54:	08006dc5 	.word	0x08006dc5
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dc5 	.word	0x08006dc5
 8006d80:	08006dc5 	.word	0x08006dc5
 8006d84:	08006dc5 	.word	0x08006dc5
 8006d88:	08006dc5 	.word	0x08006dc5
 8006d8c:	08006dc5 	.word	0x08006dc5
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dc5 	.word	0x08006dc5
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dc5 	.word	0x08006dc5
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006dc5 	.word	0x08006dc5
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dc5 	.word	0x08006dc5
 8006db8:	08006dc5 	.word	0x08006dc5
 8006dbc:	08006dc5 	.word	0x08006dc5
 8006dc0:	08006dc5 	.word	0x08006dc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006dc4:	bf00      	nop
  }

  return (USBD_OK);
 8006dc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4811      	ldr	r0, [pc, #68]	; (8006e28 <CDC_Receive_FS+0x54>)
 8006de2:	f7fe fd70 	bl	80058c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006de6:	4810      	ldr	r0, [pc, #64]	; (8006e28 <CDC_Receive_FS+0x54>)
 8006de8:	f7fe fdb6 	bl	8005958 <USBD_CDC_ReceivePacket>
  lenght=(uint8_t) *Len;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <CDC_Receive_FS+0x58>)
 8006df4:	701a      	strb	r2, [r3, #0]
  memset(buffer_usb,'\0',64);
 8006df6:	2240      	movs	r2, #64	; 0x40
 8006df8:	2100      	movs	r1, #0
 8006dfa:	480d      	ldr	r0, [pc, #52]	; (8006e30 <CDC_Receive_FS+0x5c>)
 8006dfc:	f000 fc9e 	bl	800773c <memset>
  memcpy(buffer_usb,Buf,lenght);
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <CDC_Receive_FS+0x58>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4809      	ldr	r0, [pc, #36]	; (8006e30 <CDC_Receive_FS+0x5c>)
 8006e0a:	f000 fc89 	bl	8007720 <memcpy>
  memset(Buf,'\0',lenght);
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <CDC_Receive_FS+0x58>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fc90 	bl	800773c <memset>
  return (USBD_OK);
 8006e1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000494 	.word	0x20000494
 8006e2c:	2000044c 	.word	0x2000044c
 8006e30:	20000450 	.word	0x20000450

08006e34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <CDC_Transmit_FS+0x48>)
 8006e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e00b      	b.n	8006e72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e5a:	887b      	ldrh	r3, [r7, #2]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4806      	ldr	r0, [pc, #24]	; (8006e7c <CDC_Transmit_FS+0x48>)
 8006e62:	f7fe fd12 	bl	800588a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <CDC_Transmit_FS+0x48>)
 8006e68:	f7fe fd46 	bl	80058f8 <USBD_CDC_TransmitPacket>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000494 	.word	0x20000494

08006e80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2212      	movs	r2, #18
 8006eb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	2000015c 	.word	0x2000015c

08006ec8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20000170 	.word	0x20000170

08006eec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d105      	bne.n	8006f0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	4907      	ldr	r1, [pc, #28]	; (8006f20 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f02:	4808      	ldr	r0, [pc, #32]	; (8006f24 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f04:	f7ff fddb 	bl	8006abe <USBD_GetString>
 8006f08:	e004      	b.n	8006f14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	4904      	ldr	r1, [pc, #16]	; (8006f20 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f0e:	4805      	ldr	r0, [pc, #20]	; (8006f24 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f10:	f7ff fdd5 	bl	8006abe <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f14:	4b02      	ldr	r3, [pc, #8]	; (8006f20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000f34 	.word	0x20000f34
 8006f24:	0800784c 	.word	0x0800784c

08006f28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	4904      	ldr	r1, [pc, #16]	; (8006f48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f38:	4804      	ldr	r0, [pc, #16]	; (8006f4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f3a:	f7ff fdc0 	bl	8006abe <USBD_GetString>
  return USBD_StrDesc;
 8006f3e:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000f34 	.word	0x20000f34
 8006f4c:	08007864 	.word	0x08007864

08006f50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	221a      	movs	r2, #26
 8006f60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f62:	f000 f843 	bl	8006fec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f66:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000174 	.word	0x20000174

08006f74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d105      	bne.n	8006f92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4907      	ldr	r1, [pc, #28]	; (8006fa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f8a:	4808      	ldr	r0, [pc, #32]	; (8006fac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f8c:	f7ff fd97 	bl	8006abe <USBD_GetString>
 8006f90:	e004      	b.n	8006f9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4904      	ldr	r1, [pc, #16]	; (8006fa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f96:	4805      	ldr	r0, [pc, #20]	; (8006fac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f98:	f7ff fd91 	bl	8006abe <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f9c:	4b02      	ldr	r3, [pc, #8]	; (8006fa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000f34 	.word	0x20000f34
 8006fac:	08007878 	.word	0x08007878

08006fb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fc6:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fc8:	f7ff fd79 	bl	8006abe <USBD_GetString>
 8006fcc:	e004      	b.n	8006fd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fd4:	f7ff fd73 	bl	8006abe <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000f34 	.word	0x20000f34
 8006fe8:	08007884 	.word	0x08007884

08006fec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <Get_SerialNum+0x44>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <Get_SerialNum+0x48>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <Get_SerialNum+0x4c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4413      	add	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007012:	2208      	movs	r2, #8
 8007014:	4909      	ldr	r1, [pc, #36]	; (800703c <Get_SerialNum+0x50>)
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f814 	bl	8007044 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800701c:	2204      	movs	r2, #4
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <Get_SerialNum+0x54>)
 8007020:	68b8      	ldr	r0, [r7, #8]
 8007022:	f000 f80f 	bl	8007044 <IntToUnicode>
  }
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	1fff7a10 	.word	0x1fff7a10
 8007034:	1fff7a14 	.word	0x1fff7a14
 8007038:	1fff7a18 	.word	0x1fff7a18
 800703c:	20000176 	.word	0x20000176
 8007040:	20000186 	.word	0x20000186

08007044 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]
 800705a:	e027      	b.n	80070ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	0f1b      	lsrs	r3, r3, #28
 8007060:	2b09      	cmp	r3, #9
 8007062:	d80b      	bhi.n	800707c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	0f1b      	lsrs	r3, r3, #28
 8007068:	b2da      	uxtb	r2, r3
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4619      	mov	r1, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	440b      	add	r3, r1
 8007074:	3230      	adds	r2, #48	; 0x30
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e00a      	b.n	8007092 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	b2da      	uxtb	r2, r3
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4619      	mov	r1, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	440b      	add	r3, r1
 800708c:	3237      	adds	r2, #55	; 0x37
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	3301      	adds	r3, #1
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	3301      	adds	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
 80070ac:	7dfa      	ldrb	r2, [r7, #23]
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d3d3      	bcc.n	800705c <IntToUnicode+0x18>
  }
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070e4:	d13a      	bne.n	800715c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	4b1e      	ldr	r3, [pc, #120]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30
 80070f6:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007102:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007108:	2302      	movs	r3, #2
 800710a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007110:	2303      	movs	r3, #3
 8007112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007114:	230a      	movs	r3, #10
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007118:	f107 0314 	add.w	r3, r7, #20
 800711c:	4619      	mov	r1, r3
 800711e:	4812      	ldr	r0, [pc, #72]	; (8007168 <HAL_PCD_MspInit+0xa4>)
 8007120:	f7fa fe4c 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	4a0e      	ldr	r2, [pc, #56]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 800712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712e:	6353      	str	r3, [r2, #52]	; 0x34
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 8007136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007138:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 800713a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800713e:	6453      	str	r3, [r2, #68]	; 0x44
 8007140:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_PCD_MspInit+0xa0>)
 8007142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800714c:	2200      	movs	r2, #0
 800714e:	2100      	movs	r1, #0
 8007150:	2043      	movs	r0, #67	; 0x43
 8007152:	f7fa fdfc 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007156:	2043      	movs	r0, #67	; 0x43
 8007158:	f7fa fe15 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800715c:	bf00      	nop
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40023800 	.word	0x40023800
 8007168:	40020000 	.word	0x40020000

0800716c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe fcb4 	bl	8005af0 <USBD_LL_SetupStage>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	4619      	mov	r1, r3
 80071ba:	f7fe fcee 	bl	8005b9a <USBD_LL_DataOutStage>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	3348      	adds	r3, #72	; 0x48
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7fe fd37 	bl	8005c60 <USBD_LL_DataInStage>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fe4b 	bl	8005ea4 <USBD_LL_SOF>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d001      	beq.n	800722e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800722a:	f7f9 ff9f 	bl	800116c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007234:	7bfa      	ldrb	r2, [r7, #15]
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fdf5 	bl	8005e28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fda1 	bl	8005d8c <USBD_LL_Reset>
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fdf0 	bl	8005e48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <HAL_PCD_SuspendCallback+0x48>)
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	4a03      	ldr	r2, [pc, #12]	; (800729c <HAL_PCD_SuspendCallback+0x48>)
 800728e:	f043 0306 	orr.w	r3, r3, #6
 8007292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	e000ed00 	.word	0xe000ed00

080072a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fde0 	bl	8005e74 <USBD_LL_Resume>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fe2e 	bl	8005f34 <USBD_LL_IsoOUTIncomplete>
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fdf6 	bl	8005ee8 <USBD_LL_IsoINIncomplete>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fe34 	bl	8005f80 <USBD_LL_DevConnected>
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fe31 	bl	8005f96 <USBD_LL_DevDisconnected>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d13c      	bne.n	80073c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800734c:	4a20      	ldr	r2, [pc, #128]	; (80073d0 <USBD_LL_Init+0x94>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <USBD_LL_Init+0x94>)
 8007358:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <USBD_LL_Init+0x94>)
 800735e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <USBD_LL_Init+0x94>)
 8007366:	2204      	movs	r2, #4
 8007368:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800736a:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <USBD_LL_Init+0x94>)
 800736c:	2202      	movs	r2, #2
 800736e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007370:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <USBD_LL_Init+0x94>)
 8007372:	2200      	movs	r2, #0
 8007374:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007376:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <USBD_LL_Init+0x94>)
 8007378:	2202      	movs	r2, #2
 800737a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800737c:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <USBD_LL_Init+0x94>)
 800737e:	2200      	movs	r2, #0
 8007380:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007382:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <USBD_LL_Init+0x94>)
 8007384:	2200      	movs	r2, #0
 8007386:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <USBD_LL_Init+0x94>)
 800738a:	2200      	movs	r2, #0
 800738c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <USBD_LL_Init+0x94>)
 8007390:	2200      	movs	r2, #0
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <USBD_LL_Init+0x94>)
 8007396:	2200      	movs	r2, #0
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800739a:	480d      	ldr	r0, [pc, #52]	; (80073d0 <USBD_LL_Init+0x94>)
 800739c:	f7fa fec3 	bl	8002126 <HAL_PCD_Init>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80073a6:	f7f9 fee1 	bl	800116c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	4808      	ldr	r0, [pc, #32]	; (80073d0 <USBD_LL_Init+0x94>)
 80073ae:	f7fc f820 	bl	80033f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073b2:	2240      	movs	r2, #64	; 0x40
 80073b4:	2100      	movs	r1, #0
 80073b6:	4806      	ldr	r0, [pc, #24]	; (80073d0 <USBD_LL_Init+0x94>)
 80073b8:	f7fb ffd4 	bl	8003364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	2101      	movs	r1, #1
 80073c0:	4803      	ldr	r0, [pc, #12]	; (80073d0 <USBD_LL_Init+0x94>)
 80073c2:	f7fb ffcf 	bl	8003364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20001134 	.word	0x20001134

080073d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fa ffb8 	bl	8002360 <HAL_PCD_Start>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f942 	bl	8007680 <USBD_Get_USB_Status>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007400:	7bbb      	ldrb	r3, [r7, #14]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	461a      	mov	r2, r3
 8007418:	4603      	mov	r3, r0
 800741a:	70fb      	strb	r3, [r7, #3]
 800741c:	460b      	mov	r3, r1
 800741e:	70bb      	strb	r3, [r7, #2]
 8007420:	4613      	mov	r3, r2
 8007422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007432:	78bb      	ldrb	r3, [r7, #2]
 8007434:	883a      	ldrh	r2, [r7, #0]
 8007436:	78f9      	ldrb	r1, [r7, #3]
 8007438:	f7fb fb9c 	bl	8002b74 <HAL_PCD_EP_Open>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f91c 	bl	8007680 <USBD_Get_USB_Status>
 8007448:	4603      	mov	r3, r0
 800744a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744c:	7bbb      	ldrb	r3, [r7, #14]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f7fb fbe5 	bl	8002c44 <HAL_PCD_EP_Close>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f8fd 	bl	8007680 <USBD_Get_USB_Status>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800748a:	7bbb      	ldrb	r3, [r7, #14]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	4611      	mov	r1, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb fcbd 	bl	8002e32 <HAL_PCD_EP_SetStall>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f8de 	bl	8007680 <USBD_Get_USB_Status>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fb fd02 	bl	8002efa <HAL_PCD_EP_ClrStall>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f8bf 	bl	8007680 <USBD_Get_USB_Status>
 8007502:	4603      	mov	r3, r0
 8007504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007506:	7bbb      	ldrb	r3, [r7, #14]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	da0b      	bge.n	8007544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	333e      	adds	r3, #62	; 0x3e
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	e00b      	b.n	800755c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800755a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7fb facf 	bl	8002b2a <HAL_PCD_SetAddress>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f874 	bl	8007680 <USBD_Get_USB_Status>
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759c:	7bbb      	ldrb	r3, [r7, #14]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
 80075b2:	460b      	mov	r3, r1
 80075b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075c4:	7af9      	ldrb	r1, [r7, #11]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	f7fb fbe8 	bl	8002d9e <HAL_PCD_EP_Transmit>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f853 	bl	8007680 <USBD_Get_USB_Status>
 80075da:	4603      	mov	r3, r0
 80075dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075de:	7dbb      	ldrb	r3, [r7, #22]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	460b      	mov	r3, r1
 80075f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007606:	7af9      	ldrb	r1, [r7, #11]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	f7fb fb64 	bl	8002cd8 <HAL_PCD_EP_Receive>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f832 	bl	8007680 <USBD_Get_USB_Status>
 800761c:	4603      	mov	r3, r0
 800761e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007620:	7dbb      	ldrb	r3, [r7, #22]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7fb fb94 	bl	8002d6e <HAL_PCD_EP_GetRxCount>
 8007646:	4603      	mov	r3, r0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007658:	4b03      	ldr	r3, [pc, #12]	; (8007668 <USBD_static_malloc+0x18>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	200001e4 	.word	0x200001e4

0800766c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]

}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d817      	bhi.n	80076c4 <USBD_Get_USB_Status+0x44>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_Get_USB_Status+0x1c>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076b3 	.word	0x080076b3
 80076a4:	080076b9 	.word	0x080076b9
 80076a8:	080076bf 	.word	0x080076bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
    break;
 80076b0:	e00b      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	73fb      	strb	r3, [r7, #15]
    break;
 80076b6:	e008      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
    break;
 80076bc:	e005      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076be:	2303      	movs	r3, #3
 80076c0:	73fb      	strb	r3, [r7, #15]
    break;
 80076c2:	e002      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	73fb      	strb	r3, [r7, #15]
    break;
 80076c8:	bf00      	nop
  }
  return usb_status;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4d0d      	ldr	r5, [pc, #52]	; (8007710 <__libc_init_array+0x38>)
 80076dc:	4c0d      	ldr	r4, [pc, #52]	; (8007714 <__libc_init_array+0x3c>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	2600      	movs	r6, #0
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	4d0b      	ldr	r5, [pc, #44]	; (8007718 <__libc_init_array+0x40>)
 80076ea:	4c0c      	ldr	r4, [pc, #48]	; (800771c <__libc_init_array+0x44>)
 80076ec:	f000 f82e 	bl	800774c <_init>
 80076f0:	1b64      	subs	r4, r4, r5
 80076f2:	10a4      	asrs	r4, r4, #2
 80076f4:	2600      	movs	r6, #0
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007700:	4798      	blx	r3
 8007702:	3601      	adds	r6, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
 800770a:	4798      	blx	r3
 800770c:	3601      	adds	r6, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	080078ac 	.word	0x080078ac
 8007714:	080078ac 	.word	0x080078ac
 8007718:	080078ac 	.word	0x080078ac
 800771c:	080078b0 	.word	0x080078b0

08007720 <memcpy>:
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	f100 33ff 	add.w	r3, r0, #4294967295
 8007728:	d100      	bne.n	800772c <memcpy+0xc>
 800772a:	4770      	bx	lr
 800772c:	b510      	push	{r4, lr}
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007736:	4291      	cmp	r1, r2
 8007738:	d1f9      	bne.n	800772e <memcpy+0xe>
 800773a:	bd10      	pop	{r4, pc}

0800773c <memset>:
 800773c:	4402      	add	r2, r0
 800773e:	4603      	mov	r3, r0
 8007740:	4293      	cmp	r3, r2
 8007742:	d100      	bne.n	8007746 <memset+0xa>
 8007744:	4770      	bx	lr
 8007746:	f803 1b01 	strb.w	r1, [r3], #1
 800774a:	e7f9      	b.n	8007740 <memset+0x4>

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr
