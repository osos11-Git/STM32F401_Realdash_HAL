
F401_RealDash_deneme1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08007808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000190  08007998  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  08007998  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014553  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b3  00000000  00000000  00034713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000377c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00038408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c54  00000000  00000000  00038f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffba  00000000  00000000  00052b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926b6  00000000  00000000  00062b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f51c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  000f5218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080076a0 	.word	0x080076a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	080076a0 	.word	0x080076a0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ReadDigitalStatuses>:
// digital and analog pins.
#define READWRITE_PINS


void ReadDigitalStatuses()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
#if defined (READWRITE_PINS)
  // read status of digital pins (1-13)
  digitalPins = 0;
 80004e2:	4b8b      	ldr	r3, [pc, #556]	; (8000710 <ReadDigitalStatuses+0x234>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]

  int bitposition = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]

    if (HAL_GPIO_ReadPin(pin_1_GPIO_Port,pin_1_Pin) == 1) digitalPins |= (1 << bitposition);
 80004ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f0:	4888      	ldr	r0, [pc, #544]	; (8000714 <ReadDigitalStatuses+0x238>)
 80004f2:	f001 fde5 	bl	80020c0 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d109      	bne.n	8000510 <ReadDigitalStatuses+0x34>
 80004fc:	2201      	movs	r2, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	461a      	mov	r2, r3
 8000506:	4b82      	ldr	r3, [pc, #520]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4313      	orrs	r3, r2
 800050c:	4a80      	ldr	r2, [pc, #512]	; (8000710 <ReadDigitalStatuses+0x234>)
 800050e:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_2_GPIO_Port,pin_2_Pin) == 1) digitalPins |= (1 << bitposition);
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	487e      	ldr	r0, [pc, #504]	; (8000714 <ReadDigitalStatuses+0x238>)
 800051c:	f001 fdd0 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	d109      	bne.n	800053a <ReadDigitalStatuses+0x5e>
 8000526:	2201      	movs	r2, #1
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4b77      	ldr	r3, [pc, #476]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4313      	orrs	r3, r2
 8000536:	4a76      	ldr	r2, [pc, #472]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000538:	6013      	str	r3, [r2, #0]
    bitposition++;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_3_GPIO_Port,pin_3_Pin) == 1) digitalPins |= (1 << bitposition);
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	4874      	ldr	r0, [pc, #464]	; (8000714 <ReadDigitalStatuses+0x238>)
 8000544:	f001 fdbc 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d109      	bne.n	8000562 <ReadDigitalStatuses+0x86>
 800054e:	2201      	movs	r2, #1
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	461a      	mov	r2, r3
 8000558:	4b6d      	ldr	r3, [pc, #436]	; (8000710 <ReadDigitalStatuses+0x234>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4313      	orrs	r3, r2
 800055e:	4a6c      	ldr	r2, [pc, #432]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000560:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_4_GPIO_Port,pin_4_Pin) == 1) digitalPins |= (1 << bitposition);
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	486a      	ldr	r0, [pc, #424]	; (8000714 <ReadDigitalStatuses+0x238>)
 800056c:	f001 fda8 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d109      	bne.n	800058a <ReadDigitalStatuses+0xae>
 8000576:	2201      	movs	r2, #1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	461a      	mov	r2, r3
 8000580:	4b63      	ldr	r3, [pc, #396]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4313      	orrs	r3, r2
 8000586:	4a62      	ldr	r2, [pc, #392]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000588:	6013      	str	r3, [r2, #0]
    bitposition++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_5_GPIO_Port,pin_5_Pin) == 1) digitalPins |= (1 << bitposition);
 8000590:	2120      	movs	r1, #32
 8000592:	4860      	ldr	r0, [pc, #384]	; (8000714 <ReadDigitalStatuses+0x238>)
 8000594:	f001 fd94 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d109      	bne.n	80005b2 <ReadDigitalStatuses+0xd6>
 800059e:	2201      	movs	r2, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b59      	ldr	r3, [pc, #356]	; (8000710 <ReadDigitalStatuses+0x234>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	4a58      	ldr	r2, [pc, #352]	; (8000710 <ReadDigitalStatuses+0x234>)
 80005b0:	6013      	str	r3, [r2, #0]
    bitposition++;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_6_GPIO_Port,pin_6_Pin) == 1) digitalPins |= (1 << bitposition);
 80005b8:	2110      	movs	r1, #16
 80005ba:	4856      	ldr	r0, [pc, #344]	; (8000714 <ReadDigitalStatuses+0x238>)
 80005bc:	f001 fd80 	bl	80020c0 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d109      	bne.n	80005da <ReadDigitalStatuses+0xfe>
 80005c6:	2201      	movs	r2, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <ReadDigitalStatuses+0x234>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	4a4e      	ldr	r2, [pc, #312]	; (8000710 <ReadDigitalStatuses+0x234>)
 80005d8:	6013      	str	r3, [r2, #0]
    bitposition++;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_7_GPIO_Port,pin_7_Pin) == 1) digitalPins |= (1 << bitposition);
 80005e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e4:	484c      	ldr	r0, [pc, #304]	; (8000718 <ReadDigitalStatuses+0x23c>)
 80005e6:	f001 fd6b 	bl	80020c0 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d109      	bne.n	8000604 <ReadDigitalStatuses+0x128>
 80005f0:	2201      	movs	r2, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <ReadDigitalStatuses+0x234>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4313      	orrs	r3, r2
 8000600:	4a43      	ldr	r2, [pc, #268]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000602:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_8_GPIO_Port,pin_8_Pin) == 1) digitalPins |= (1 << bitposition);
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4842      	ldr	r0, [pc, #264]	; (8000718 <ReadDigitalStatuses+0x23c>)
 8000610:	f001 fd56 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d109      	bne.n	800062e <ReadDigitalStatuses+0x152>
 800061a:	2201      	movs	r2, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	461a      	mov	r2, r3
 8000624:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4313      	orrs	r3, r2
 800062a:	4a39      	ldr	r2, [pc, #228]	; (8000710 <ReadDigitalStatuses+0x234>)
 800062c:	6013      	str	r3, [r2, #0]
    bitposition++;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_9_GPIO_Port,pin_9_Pin) == 1) digitalPins |= (1 << bitposition);
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4837      	ldr	r0, [pc, #220]	; (8000718 <ReadDigitalStatuses+0x23c>)
 800063a:	f001 fd41 	bl	80020c0 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d109      	bne.n	8000658 <ReadDigitalStatuses+0x17c>
 8000644:	2201      	movs	r2, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	461a      	mov	r2, r3
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4313      	orrs	r3, r2
 8000654:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000656:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_10_GPIO_Port,pin_10_Pin) == 1) digitalPins |= (1 << bitposition);
 800065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000662:	482d      	ldr	r0, [pc, #180]	; (8000718 <ReadDigitalStatuses+0x23c>)
 8000664:	f001 fd2c 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d109      	bne.n	8000682 <ReadDigitalStatuses+0x1a6>
 800066e:	2201      	movs	r2, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	461a      	mov	r2, r3
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <ReadDigitalStatuses+0x234>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4313      	orrs	r3, r2
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <ReadDigitalStatuses+0x234>)
 8000680:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_11_GPIO_Port,pin_11_Pin) == 1) digitalPins |= (1 << bitposition);
 8000688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068c:	4821      	ldr	r0, [pc, #132]	; (8000714 <ReadDigitalStatuses+0x238>)
 800068e:	f001 fd17 	bl	80020c0 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d109      	bne.n	80006ac <ReadDigitalStatuses+0x1d0>
 8000698:	2201      	movs	r2, #1
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006aa:	6013      	str	r3, [r2, #0]
    bitposition++;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_12_GPIO_Port,pin_12_Pin) == 1) digitalPins |= (1 << bitposition);
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <ReadDigitalStatuses+0x238>)
 80006b8:	f001 fd02 	bl	80020c0 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d109      	bne.n	80006d6 <ReadDigitalStatuses+0x1fa>
 80006c2:	2201      	movs	r2, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006d4:	6013      	str	r3, [r2, #0]
    bitposition++;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(pin_13_GPIO_Port, pin_13_Pin) == 1) digitalPins |= (1 << bitposition);
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	480e      	ldr	r0, [pc, #56]	; (800071c <ReadDigitalStatuses+0x240>)
 80006e2:	f001 fced 	bl	80020c0 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d109      	bne.n	8000700 <ReadDigitalStatuses+0x224>
 80006ec:	2201      	movs	r2, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <ReadDigitalStatuses+0x234>)
 80006fe:	6013      	str	r3, [r2, #0]
    bitposition++;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]



#endif
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001ac 	.word	0x200001ac
 8000714:	40020400 	.word	0x40020400
 8000718:	40020000 	.word	0x40020000
 800071c:	40020800 	.word	0x40020800

08000720 <ReadAnalogStatuses>:


//

void ReadAnalogStatuses()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
#if defined (READWRITE_PINS)
  // read analog pins (0-7)


   HAL_ADC_Start(&hadc1);
 8000724:	4821      	ldr	r0, [pc, #132]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000726:	f000 fe97 	bl	8001458 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 50);
 800072a:	2132      	movs	r1, #50	; 0x32
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <ReadAnalogStatuses+0x8c>)
 800072e:	f000 ff7a 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[0] = HAL_ADC_GetValue(&hadc1);
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000734:	f001 f802 	bl	800173c <HAL_ADC_GetValue>
 8000738:	4603      	mov	r3, r0
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <ReadAnalogStatuses+0x90>)
 800073c:	6013      	str	r3, [r2, #0]
   HAL_ADC_PollForConversion(&hadc1, 50);
 800073e:	2132      	movs	r1, #50	; 0x32
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000742:	f000 ff70 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[1] = HAL_ADC_GetValue(&hadc1);
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000748:	f000 fff8 	bl	800173c <HAL_ADC_GetValue>
 800074c:	4603      	mov	r3, r0
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <ReadAnalogStatuses+0x90>)
 8000750:	6053      	str	r3, [r2, #4]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000752:	2132      	movs	r1, #50	; 0x32
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000756:	f000 ff66 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[2] = HAL_ADC_GetValue(&hadc1);
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <ReadAnalogStatuses+0x8c>)
 800075c:	f000 ffee 	bl	800173c <HAL_ADC_GetValue>
 8000760:	4603      	mov	r3, r0
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <ReadAnalogStatuses+0x90>)
 8000764:	6093      	str	r3, [r2, #8]
   HAL_ADC_PollForConversion(&hadc1, 50);
 8000766:	2132      	movs	r1, #50	; 0x32
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <ReadAnalogStatuses+0x8c>)
 800076a:	f000 ff5c 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[3] = HAL_ADC_GetValue(&hadc1);
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000770:	f000 ffe4 	bl	800173c <HAL_ADC_GetValue>
 8000774:	4603      	mov	r3, r0
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <ReadAnalogStatuses+0x90>)
 8000778:	60d3      	str	r3, [r2, #12]
   HAL_ADC_PollForConversion(&hadc1, 50);
 800077a:	2132      	movs	r1, #50	; 0x32
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <ReadAnalogStatuses+0x8c>)
 800077e:	f000 ff52 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[4] = HAL_ADC_GetValue(&hadc1);
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000784:	f000 ffda 	bl	800173c <HAL_ADC_GetValue>
 8000788:	4603      	mov	r3, r0
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <ReadAnalogStatuses+0x90>)
 800078c:	6113      	str	r3, [r2, #16]
   HAL_ADC_PollForConversion(&hadc1, 50);
 800078e:	2132      	movs	r1, #50	; 0x32
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000792:	f000 ff48 	bl	8001626 <HAL_ADC_PollForConversion>
   analogPins[5] = HAL_ADC_GetValue(&hadc1);
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <ReadAnalogStatuses+0x8c>)
 8000798:	f000 ffd0 	bl	800173c <HAL_ADC_GetValue>
 800079c:	4603      	mov	r3, r0
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <ReadAnalogStatuses+0x90>)
 80007a0:	6153      	str	r3, [r2, #20]
   HAL_ADC_Stop (&hadc1);
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <ReadAnalogStatuses+0x8c>)
 80007a4:	f000 ff0c 	bl	80015c0 <HAL_ADC_Stop>



#endif
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000408 	.word	0x20000408
 80007b0:	200001b0 	.word	0x200001b0

080007b4 <SendCANFramesToSerial>:


void SendCANFramesToSerial()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  // a CAN frame payload is always 8 bytes containing data in a manner
  // described by the RealDash custom channel description XML file
  // all multibyte values are handled as little endian by default.
  // endianess of the values can be specified in XML file if it is required to use big endian values

 unsigned char frameData[8]={0};
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <SendCANFramesToSerial+0x12c>)
 80007c4:	881b      	ldrh	r3, [r3, #0]


  // build 1st CAN frame, RPM, MAP, CLT, TPS (just example data)
  memcpy(frameData, &rpm, 2);
 80007c6:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &kpa, 2);
 80007c8:	463b      	mov	r3, r7
 80007ca:	3302      	adds	r3, #2
 80007cc:	4a45      	ldr	r2, [pc, #276]	; (80008e4 <SendCANFramesToSerial+0x130>)
 80007ce:	8812      	ldrh	r2, [r2, #0]
 80007d0:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &clt, 2);
 80007d2:	463b      	mov	r3, r7
 80007d4:	3304      	adds	r3, #4
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <SendCANFramesToSerial+0x134>)
 80007d8:	8812      	ldrh	r2, [r2, #0]
 80007da:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &tps, 2);
 80007dc:	463b      	mov	r3, r7
 80007de:	3306      	adds	r3, #6
 80007e0:	4a42      	ldr	r2, [pc, #264]	; (80008ec <SendCANFramesToSerial+0x138>)
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	801a      	strh	r2, [r3, #0]

  // write first CAN frame to serial
 SendCANFrameToSerial(3200, frameData);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 80007ee:	f000 f88d 	bl	800090c <SendCANFrameToSerial>
 memset(frameData,'\0',8);
 80007f2:	463b      	mov	r3, r7
 80007f4:	2208      	movs	r2, #8
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f006 ff49 	bl	8007690 <memset>
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <SendCANFramesToSerial+0x13c>)
 8000800:	881b      	ldrh	r3, [r3, #0]


  // build 2nd CAN frame, Arduino digital pins and 2 analog values
  memcpy(frameData, &digitalPins, 2);
 8000802:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &analogPins[0], 2);
 8000804:	463b      	mov	r3, r7
 8000806:	3302      	adds	r3, #2
 8000808:	4a3a      	ldr	r2, [pc, #232]	; (80008f4 <SendCANFramesToSerial+0x140>)
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &analogPins[1], 2);
 800080e:	463b      	mov	r3, r7
 8000810:	3304      	adds	r3, #4
 8000812:	4a38      	ldr	r2, [pc, #224]	; (80008f4 <SendCANFramesToSerial+0x140>)
 8000814:	8892      	ldrh	r2, [r2, #4]
 8000816:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &analogPins[2], 2);
 8000818:	463b      	mov	r3, r7
 800081a:	3306      	adds	r3, #6
 800081c:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <SendCANFramesToSerial+0x140>)
 800081e:	8912      	ldrh	r2, [r2, #8]
 8000820:	801a      	strh	r2, [r3, #0]

  // write 2nd CAN frame to serial
  SendCANFrameToSerial(3201, frameData);
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	f640 4081 	movw	r0, #3201	; 0xc81
 800082a:	f000 f86f 	bl	800090c <SendCANFrameToSerial>
  memset(frameData,'\0',8);
 800082e:	463b      	mov	r3, r7
 8000830:	2208      	movs	r2, #8
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f006 ff2b 	bl	8007690 <memset>
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <SendCANFramesToSerial+0x140>)
 800083c:	899b      	ldrh	r3, [r3, #12]


  // build 3rd CAN frame, rest of Arduino analog values
  memcpy(frameData, &analogPins[3], 2);
 800083e:	803b      	strh	r3, [r7, #0]
  memcpy(frameData + 2, &analogPins[4], 2);
 8000840:	463b      	mov	r3, r7
 8000842:	3302      	adds	r3, #2
 8000844:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <SendCANFramesToSerial+0x140>)
 8000846:	8a12      	ldrh	r2, [r2, #16]
 8000848:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 4, &analogPins[5], 2);
 800084a:	463b      	mov	r3, r7
 800084c:	3304      	adds	r3, #4
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <SendCANFramesToSerial+0x140>)
 8000850:	8a92      	ldrh	r2, [r2, #20]
 8000852:	801a      	strh	r2, [r3, #0]
  memcpy(frameData + 6, &analogPins[6], 2);
 8000854:	463b      	mov	r3, r7
 8000856:	3306      	adds	r3, #6
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <SendCANFramesToSerial+0x140>)
 800085a:	8b12      	ldrh	r2, [r2, #24]
 800085c:	801a      	strh	r2, [r3, #0]

  // write 3rd CAN frame to serial
  SendCANFrameToSerial(3202, frameData);
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	f640 4082 	movw	r0, #3202	; 0xc82
 8000866:	f000 f851 	bl	800090c <SendCANFrameToSerial>
  memset(frameData,'\0',8);
 800086a:	463b      	mov	r3, r7
 800086c:	2208      	movs	r2, #8
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f006 ff0d 	bl	8007690 <memset>


  // build 4th frame, this is a text extension frame

  // only send once at 1000 loops
  if (textCounter == 0)
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <SendCANFramesToSerial+0x144>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d105      	bne.n	800088a <SendCANFramesToSerial+0xd6>
  {
    SendTextExtensionFrameToSerial(3203, "Hello RealDash, this is STM32 sending some text data");
 800087e:	491f      	ldr	r1, [pc, #124]	; (80008fc <SendCANFramesToSerial+0x148>)
 8000880:	f640 4083 	movw	r0, #3203	; 0xc83
 8000884:	f000 f86c 	bl	8000960 <SendTextExtensionFrameToSerial>
 8000888:	e020      	b.n	80008cc <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 2000)
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <SendCANFramesToSerial+0x144>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000892:	d105      	bne.n	80008a0 <SendCANFramesToSerial+0xec>
  {
    SendTextExtensionFrameToSerial(3203, "Tomorrow's forecast: Lots of sun and 30 degrees centigate");
 8000894:	491a      	ldr	r1, [pc, #104]	; (8000900 <SendCANFramesToSerial+0x14c>)
 8000896:	f640 4083 	movw	r0, #3203	; 0xc83
 800089a:	f000 f861 	bl	8000960 <SendTextExtensionFrameToSerial>
 800089e:	e015      	b.n	80008cc <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 4000)
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <SendCANFramesToSerial+0x144>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008a8:	d105      	bne.n	80008b6 <SendCANFramesToSerial+0x102>
  {
    SendTextExtensionFrameToSerial(3203, "Now Playing: Insert your favorite song info here");
 80008aa:	4916      	ldr	r1, [pc, #88]	; (8000904 <SendCANFramesToSerial+0x150>)
 80008ac:	f640 4083 	movw	r0, #3203	; 0xc83
 80008b0:	f000 f856 	bl	8000960 <SendTextExtensionFrameToSerial>
 80008b4:	e00a      	b.n	80008cc <SendCANFramesToSerial+0x118>
  }
  else if (textCounter == 6000)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <SendCANFramesToSerial+0x144>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80008be:	4293      	cmp	r3, r2
 80008c0:	d104      	bne.n	80008cc <SendCANFramesToSerial+0x118>
  {
    SendTextExtensionFrameToSerial(3203, "Message from STM32: All systems running at nominal efficiency");
 80008c2:	4911      	ldr	r1, [pc, #68]	; (8000908 <SendCANFramesToSerial+0x154>)
 80008c4:	f640 4083 	movw	r0, #3203	; 0xc83
 80008c8:	f000 f84a 	bl	8000960 <SendTextExtensionFrameToSerial>
  }
  memset(frameData,'\0',8);
 80008cc:	463b      	mov	r3, r7
 80008ce:	2208      	movs	r2, #8
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fedc 	bl	8007690 <memset>

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004
 80008e8:	2000000c 	.word	0x2000000c
 80008ec:	20000008 	.word	0x20000008
 80008f0:	200001ac 	.word	0x200001ac
 80008f4:	200001b0 	.word	0x200001b0
 80008f8:	200001cc 	.word	0x200001cc
 80008fc:	080076b8 	.word	0x080076b8
 8000900:	080076f0 	.word	0x080076f0
 8000904:	0800772c 	.word	0x0800772c
 8000908:	08007760 	.word	0x08007760

0800090c <SendCANFrameToSerial>:

void SendCANFrameToSerial(unsigned long canFrameId, unsigned char* frameData)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  // the 4 byte identifier at the beginning of each CAN frame
  // this is required for RealDash to 'catch-up' on ongoing stream of CAN frames
  unsigned char serialBlockTag[4] = { 0x44, 0x33, 0x22, 0x11 };
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <SendCANFrameToSerial+0x50>)
 8000918:	60fb      	str	r3, [r7, #12]


  while( CDC_Transmit_FS((uint8_t*)serialBlockTag,4));
 800091a:	bf00      	nop
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2104      	movs	r1, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f006 fa30 	bl	8006d88 <CDC_Transmit_FS>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f6      	bne.n	800091c <SendCANFrameToSerial+0x10>

  // the CAN frame id number (as 32bit little endian value)

  while(CDC_Transmit_FS((uint8_t*)&canFrameId,4));
 800092e:	bf00      	nop
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2104      	movs	r1, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fa27 	bl	8006d88 <CDC_Transmit_FS>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f7      	bne.n	8000930 <SendCANFrameToSerial+0x24>

  // CAN frame payload

 while( CDC_Transmit_FS((uint8_t*)frameData,8));
 8000940:	bf00      	nop
 8000942:	2108      	movs	r1, #8
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f006 fa1f 	bl	8006d88 <CDC_Transmit_FS>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1f8      	bne.n	8000942 <SendCANFrameToSerial+0x36>

}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	11223344 	.word	0x11223344

08000960 <SendTextExtensionFrameToSerial>:

void SendTextExtensionFrameToSerial(unsigned long canFrameId,  char* text)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  if (text)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d023      	beq.n	80009b8 <SendTextExtensionFrameToSerial+0x58>
  {
    // the 4 byte identifier at the beginning of each CAN frame
    // this is required for RealDash to 'catch-up' on ongoing stream of CAN frames
    unsigned char textExtensionBlockTag[4] = { 0x55, 0x33, 0x22, 0x11 };
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <SendTextExtensionFrameToSerial+0x60>)
 8000972:	60fb      	str	r3, [r7, #12]
    while(CDC_Transmit_FS((uint8_t*)textExtensionBlockTag,4));
 8000974:	bf00      	nop
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2104      	movs	r1, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f006 fa03 	bl	8006d88 <CDC_Transmit_FS>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f6      	bne.n	8000976 <SendTextExtensionFrameToSerial+0x16>



    // the CAN frame id number (as 32bit little endian value)
    while(CDC_Transmit_FS((uint8_t*)&canFrameId,4));
 8000988:	bf00      	nop
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f006 f9fa 	bl	8006d88 <CDC_Transmit_FS>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f7      	bne.n	800098a <SendTextExtensionFrameToSerial+0x2a>

    // text payload
    while(CDC_Transmit_FS((uint8_t*)text,strlen(text)+15));
 800099a:	bf00      	nop
 800099c:	6838      	ldr	r0, [r7, #0]
 800099e:	f7ff fc19 	bl	80001d4 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	330f      	adds	r3, #15
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f006 f9eb 	bl	8006d88 <CDC_Transmit_FS>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f1      	bne.n	800099c <SendTextExtensionFrameToSerial+0x3c>


  }
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	11223355 	.word	0x11223355

080009c4 <ReadIncomingSerialData>:



void ReadIncomingSerialData()
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  while (lenght > 0)
 80009ca:	e02c      	b.n	8000a26 <ReadIncomingSerialData+0x62>

     read one byte from serial stream

	*/

	  memcpy(incomingFrame,buffer_usb,17);
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <ReadIncomingSerialData+0x74>)
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <ReadIncomingSerialData+0x78>)
 80009d0:	4614      	mov	r4, r2
 80009d2:	461d      	mov	r5, r3
 80009d4:	6828      	ldr	r0, [r5, #0]
 80009d6:	6869      	ldr	r1, [r5, #4]
 80009d8:	68aa      	ldr	r2, [r5, #8]
 80009da:	68eb      	ldr	r3, [r5, #12]
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	7c2b      	ldrb	r3, [r5, #16]
 80009e0:	7023      	strb	r3, [r4, #0]
	  int incomingFramePos=17;
 80009e2:	2311      	movs	r3, #17
 80009e4:	607b      	str	r3, [r7, #4]

    // check the first incoming bytes tag (0x44, 0x33, 0x22, 0x11)
    if (incomingFrame[0] != 0x44)
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <ReadIncomingSerialData+0x74>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b44      	cmp	r3, #68	; 0x44
 80009ec:	d006      	beq.n	80009fc <ReadIncomingSerialData+0x38>
    {
      // first incoming byte is not 0x44,
      // the tag at the beginning of the frame does not match, this is an invalid frame
      // just zero the incomingFrame buffer and start expecting first byte again
      memset(incomingFrame, 0, 17);
 80009ee:	2211      	movs	r2, #17
 80009f0:	2100      	movs	r1, #0
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <ReadIncomingSerialData+0x74>)
 80009f4:	f006 fe4c 	bl	8007690 <memset>
      incomingFramePos = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
    }

    if (incomingFramePos >= 17)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b10      	cmp	r3, #16
 8000a00:	dd11      	ble.n	8000a26 <ReadIncomingSerialData+0x62>
    {
      // frame complete, process it
      ProcessIncomingFrame(incomingFrame);
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <ReadIncomingSerialData+0x74>)
 8000a04:	f000 f81e 	bl	8000a44 <ProcessIncomingFrame>

      // zero the incomingFrame buffer and start expecting first byte again
      memset(incomingFrame, 0, 17);
 8000a08:	2211      	movs	r2, #17
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <ReadIncomingSerialData+0x74>)
 8000a0e:	f006 fe3f 	bl	8007690 <memset>
      incomingFramePos = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
      memset(buffer_usb,'\0',64);
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <ReadIncomingSerialData+0x78>)
 8000a1c:	f006 fe38 	bl	8007690 <memset>
      lenght=0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <ReadIncomingSerialData+0x7c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
  while (lenght > 0)
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <ReadIncomingSerialData+0x7c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1ce      	bne.n	80009cc <ReadIncomingSerialData+0x8>
    }
  }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}
 8000a38:	200001d0 	.word	0x200001d0
 8000a3c:	20000450 	.word	0x20000450
 8000a40:	20000404 	.word	0x20000404

08000a44 <ProcessIncomingFrame>:

void ProcessIncomingFrame( char* frame)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  // first four bytes contain set value frame separator bytes, always 0x44,0x33,0x22,x11
  // check that first 4 bytes match the tag
  if (frame[0] != 0x44 ||
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b44      	cmp	r3, #68	; 0x44
 8000a52:	d134      	bne.n	8000abe <ProcessIncomingFrame+0x7a>
      frame[1] != 0x33 ||
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	781b      	ldrb	r3, [r3, #0]
  if (frame[0] != 0x44 ||
 8000a5a:	2b33      	cmp	r3, #51	; 0x33
 8000a5c:	d12f      	bne.n	8000abe <ProcessIncomingFrame+0x7a>
      frame[2] != 0x22 ||
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3302      	adds	r3, #2
 8000a62:	781b      	ldrb	r3, [r3, #0]
      frame[1] != 0x33 ||
 8000a64:	2b22      	cmp	r3, #34	; 0x22
 8000a66:	d12a      	bne.n	8000abe <ProcessIncomingFrame+0x7a>
      frame[3] != 0x11)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3303      	adds	r3, #3
 8000a6c:	781b      	ldrb	r3, [r3, #0]
      frame[2] != 0x22 ||
 8000a6e:	2b11      	cmp	r3, #17
 8000a70:	d125      	bne.n	8000abe <ProcessIncomingFrame+0x7a>
    // frame tag does not match, wait for another frame
    return;
  }

  // next four bytes contain set value CAN frame id in little endian form
  unsigned long canFrameId = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  memcpy(&canFrameId, frame + 4, 4);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]

  // next 8 bytes are the frame data
  // ...

  // last byte is check byte calculated as sum of previous 13 bytes (ignore overflow)
  char checkByte = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<16; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e009      	b.n	8000a9c <ProcessIncomingFrame+0x58>
  {
    checkByte += frame[i];
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	4413      	add	r3, r2
 8000a94:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<16; i++)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	ddf2      	ble.n	8000a88 <ProcessIncomingFrame+0x44>
  }

  if (frame[16] == checkByte)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3310      	adds	r3, #16
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	7dfa      	ldrb	r2, [r7, #23]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d108      	bne.n	8000ac0 <ProcessIncomingFrame+0x7c>
  {
    // checksum match, this is a valid set value-frame:
    // the frame payload data is in frame + 8 bytes
    HandleIncomingSetValueFrame(canFrameId, frame + 8);
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	f000 f806 	bl	8000ac8 <HandleIncomingSetValueFrame>
 8000abc:	e000      	b.n	8000ac0 <ProcessIncomingFrame+0x7c>
    return;
 8000abe:	bf00      	nop
  }
}
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HandleIncomingSetValueFrame>:

void HandleIncomingSetValueFrame(unsigned long canFrameId,  char* frameData)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  if (canFrameId == 3201)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f640 4281 	movw	r2, #3201	; 0xc81
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	f040 80bc 	bne.w	8000c56 <HandleIncomingSetValueFrame+0x18e>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b29a      	uxth	r2, r3
  {
    memcpy(&digitalPins, frameData, 2);
 8000ae4:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000ae6:	801a      	strh	r2, [r3, #0]
    memcpy(&analogPins[0], frameData + 2, 2);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	3302      	adds	r3, #2
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000af2:	801a      	strh	r2, [r3, #0]
    memcpy(&analogPins[1], frameData + 4, 2);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	3304      	adds	r3, #4
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000afe:	809a      	strh	r2, [r3, #4]
    memcpy(&analogPins[2], frameData + 6, 2);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3306      	adds	r3, #6
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000b0a:	811a      	strh	r2, [r3, #8]

#if defined (READWRITE_PINS)
    // write digital pins

    HAL_GPIO_WritePin(pin_1_GPIO_Port,pin_1_Pin,digitalPins & (1 << 0) ? 1 : 0);
 8000b0c:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	4860      	ldr	r0, [pc, #384]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b20:	f001 fae6 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_2_GPIO_Port,pin_2_Pin,digitalPins & (1 << 1) ? 1 : 0);
 8000b24:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b38:	4859      	ldr	r0, [pc, #356]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b3a:	f001 fad9 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_3_GPIO_Port,pin_3_Pin,digitalPins & (1 << 2) ? 1 : 0);
 8000b3e:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	4853      	ldr	r0, [pc, #332]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b52:	f001 facd 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_4_GPIO_Port,pin_4_Pin,digitalPins & (1 << 3) ? 1 : 0);
 8000b56:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b6a:	f001 fac1 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_5_GPIO_Port,pin_5_Pin,digitalPins & (1 << 4) ? 1 : 0);
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2120      	movs	r1, #32
 8000b80:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b82:	f001 fab5 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_6_GPIO_Port,pin_6_Pin,digitalPins & (1 << 5) ? 1 : 0);
 8000b86:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	2110      	movs	r1, #16
 8000b98:	4841      	ldr	r0, [pc, #260]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000b9a:	f001 faa9 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_7_GPIO_Port,pin_7_Pin,digitalPins & (1 << 6) ? 1 : 0);
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	099b      	lsrs	r3, r3, #6
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <HandleIncomingSetValueFrame+0x1dc>)
 8000bb4:	f001 fa9c 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_8_GPIO_Port,pin_8_Pin,digitalPins & (1 << 7) ? 1 : 0);
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	09db      	lsrs	r3, r3, #7
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <HandleIncomingSetValueFrame+0x1dc>)
 8000bce:	f001 fa8f 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_9_GPIO_Port,pin_9_Pin,digitalPins & (1 << 8) ? 1 : 0);
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <HandleIncomingSetValueFrame+0x1dc>)
 8000be8:	f001 fa82 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_10_GPIO_Port,pin_10_Pin,digitalPins & (1 << 9) ? 1 : 0);
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	0a5b      	lsrs	r3, r3, #9
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <HandleIncomingSetValueFrame+0x1dc>)
 8000c02:	f001 fa75 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_11_GPIO_Port,pin_11_Pin,digitalPins & (1 << 10) ? 1 : 0);
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0a9b      	lsrs	r3, r3, #10
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000c1c:	f001 fa68 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_12_GPIO_Port,pin_12_Pin,digitalPins & (1 << 11) ? 1 : 0);
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0adb      	lsrs	r3, r3, #11
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <HandleIncomingSetValueFrame+0x1d8>)
 8000c36:	f001 fa5b 	bl	80020f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin_13_GPIO_Port,pin_13_Pin,digitalPins & (1 << 12) ? 1 : 0);
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HandleIncomingSetValueFrame+0x1d0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	0b1b      	lsrs	r3, r3, #12
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <HandleIncomingSetValueFrame+0x1e0>)
 8000c50:	f001 fa4e 	bl	80020f0 <HAL_GPIO_WritePin>
    analogWrite(5, analogPins[5]);
    analogWrite(6, analogPins[6]);
    */
#endif
  }
}
 8000c54:	e01b      	b.n	8000c8e <HandleIncomingSetValueFrame+0x1c6>
  else if (canFrameId == 3202)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f640 4282 	movw	r2, #3202	; 0xc82
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d116      	bne.n	8000c8e <HandleIncomingSetValueFrame+0x1c6>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b29a      	uxth	r2, r3
    memcpy(&analogPins[3], frameData + 0, 2);
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000c68:	819a      	strh	r2, [r3, #12]
    memcpy(&analogPins[4], frameData + 2, 2);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000c74:	821a      	strh	r2, [r3, #16]
    memcpy(&analogPins[5], frameData + 4, 2);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000c80:	829a      	strh	r2, [r3, #20]
    memcpy(&analogPins[6], frameData + 6, 2);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	3306      	adds	r3, #6
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HandleIncomingSetValueFrame+0x1d4>)
 8000c8c:	831a      	strh	r2, [r3, #24]
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001ac 	.word	0x200001ac
 8000c9c:	200001b0 	.word	0x200001b0
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020800 	.word	0x40020800

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 faf8 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f856 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f958 	bl	8000f6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cbc:	f005 ff8a 	bl	8006bd4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000cc0:	f000 f8bc 	bl	8000e3c <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ReadDigitalStatuses();
 8000cc4:	f7ff fc0a 	bl	80004dc <ReadDigitalStatuses>
	  ReadAnalogStatuses();
 8000cc8:	f7ff fd2a 	bl	8000720 <ReadAnalogStatuses>
	  SendCANFramesToSerial();
 8000ccc:	f7ff fd72 	bl	80007b4 <SendCANFramesToSerial>
	  ReadIncomingSerialData();
 8000cd0:	f7ff fe78 	bl	80009c4 <ReadIncomingSerialData>

	  if (rpm++ > 5000)
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <main+0xa4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	491d      	ldr	r1, [pc, #116]	; (8000d50 <main+0xa4>)
 8000cdc:	600a      	str	r2, [r1, #0]
 8000cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d903      	bls.n	8000cee <main+0x42>
	   {
	     rpm = 700;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <main+0xa4>)
 8000ce8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000cec:	601a      	str	r2, [r3, #0]
	   }
	   if (kpa++ > 2500)
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <main+0xa8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	4917      	ldr	r1, [pc, #92]	; (8000d54 <main+0xa8>)
 8000cf6:	600a      	str	r2, [r1, #0]
 8000cf8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d902      	bls.n	8000d06 <main+0x5a>
	   {
	     kpa = 10;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <main+0xa8>)
 8000d02:	220a      	movs	r2, #10
 8000d04:	601a      	str	r2, [r3, #0]
	   }
	   if (tps++ > 1000)
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <main+0xac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	4912      	ldr	r1, [pc, #72]	; (8000d58 <main+0xac>)
 8000d0e:	600a      	str	r2, [r1, #0]
 8000d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d14:	d902      	bls.n	8000d1c <main+0x70>
	   {
	     tps = 0;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <main+0xac>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	   }
	   if (clt++ > 230)
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0xb0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <main+0xb0>)
 8000d24:	600a      	str	r2, [r1, #0]
 8000d26:	2be6      	cmp	r3, #230	; 0xe6
 8000d28:	d902      	bls.n	8000d30 <main+0x84>
	   {
	     // all values in frame are handled as unsigned values. To use negative values,
	     // offset actual value and write corresponding conversion to XML file imported to RealDash
	     // From RealDash 1.7.6 its also possible to specify value as signed="true" in XML file.
	     clt = 0;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <main+0xb0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
	   }
	   // simple counter for sending the text frame to avoid sending it too often.
	   if (textCounter++ > 8000)
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <main+0xb4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	490a      	ldr	r1, [pc, #40]	; (8000d60 <main+0xb4>)
 8000d38:	600a      	str	r2, [r1, #0]
 8000d3a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000d3e:	d902      	bls.n	8000d46 <main+0x9a>
	   {
	     textCounter = 0;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <main+0xb4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
	   }



	   HAL_Delay(5);
 8000d46:	2005      	movs	r0, #5
 8000d48:	f000 fb1e 	bl	8001388 <HAL_Delay>
	  ReadDigitalStatuses();
 8000d4c:	e7ba      	b.n	8000cc4 <main+0x18>
 8000d4e:	bf00      	nop
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	200001cc 	.word	0x200001cc

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fc8c 	bl	8007690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <SystemClock_Config+0xd0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <SystemClock_Config+0xd0>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <SystemClock_Config+0xd0>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <SystemClock_Config+0xd4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <SystemClock_Config+0xd4>)
 8000db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <SystemClock_Config+0xd4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dd8:	2319      	movs	r3, #25
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ddc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de6:	2307      	movs	r3, #7
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fb1a 	bl	8003428 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dfa:	f000 f955 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fd7c 	bl	8003918 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e26:	f000 f93f 	bl	80010a8 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3750      	adds	r7, #80	; 0x50
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e50:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <MX_ADC1_Init+0x128>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e62:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	; (8000f68 <MX_ADC1_Init+0x12c>)
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e8a:	2206      	movs	r2, #6
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	4830      	ldr	r0, [pc, #192]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000e9e:	f000 fa97 	bl	80013d0 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 f8fe 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000ebe:	f000 fc4b 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f000 f8ee 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4821      	ldr	r0, [pc, #132]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000eda:	f000 fc3d 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee4:	f000 f8e0 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000eec:	2303      	movs	r3, #3
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481a      	ldr	r0, [pc, #104]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000ef6:	f000 fc2f 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f00:	f000 f8d2 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f04:	2303      	movs	r3, #3
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000f12:	f000 fc21 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f1c:	f000 f8c4 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f20:	2308      	movs	r3, #8
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f24:	2305      	movs	r3, #5
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000f2e:	f000 fc13 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f38:	f000 f8b6 	bl	80010a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f40:	2306      	movs	r3, #6
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_ADC1_Init+0x124>)
 8000f4a:	f000 fc05 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f54:	f000 f8a8 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000408 	.word	0x20000408
 8000f64:	40012000 	.word	0x40012000
 8000f68:	0f000001 	.word	0x0f000001

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a3c      	ldr	r2, [pc, #240]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a35      	ldr	r2, [pc, #212]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_GPIO_Init+0x12c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pin_13_GPIO_Port, pin_13_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x130>)
 8000ffa:	f001 f879 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pin_12_Pin|pin_11_Pin|pin_6_Pin|pin_5_Pin
 8000ffe:	2200      	movs	r2, #0
 8001000:	f24c 31f0 	movw	r1, #50160	; 0xc3f0
 8001004:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x134>)
 8001006:	f001 f873 	bl	80020f0 <HAL_GPIO_WritePin>
                          |pin_4_Pin|pin_3_Pin|pin_2_Pin|pin_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pin_10_Pin|pin_9_Pin|pin_8_Pin|pin_7_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <MX_GPIO_Init+0x138>)
 8001012:	f001 f86d 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pin_13_Pin */
  GPIO_InitStruct.Pin = pin_13_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pin_13_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	481b      	ldr	r0, [pc, #108]	; (800109c <MX_GPIO_Init+0x130>)
 8001030:	f000 fec2 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pin_12_Pin pin_11_Pin pin_6_Pin pin_5_Pin
                           pin_4_Pin pin_3_Pin pin_2_Pin pin_1_Pin */
  GPIO_InitStruct.Pin = pin_12_Pin|pin_11_Pin|pin_6_Pin|pin_5_Pin
 8001034:	f24c 33f0 	movw	r3, #50160	; 0xc3f0
 8001038:	617b      	str	r3, [r7, #20]
                          |pin_4_Pin|pin_3_Pin|pin_2_Pin|pin_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103e:	2302      	movs	r3, #2
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <MX_GPIO_Init+0x134>)
 800104e:	f000 feb3 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pin_10_Pin pin_9_Pin pin_8_Pin */
  GPIO_InitStruct.Pin = pin_10_Pin|pin_9_Pin|pin_8_Pin;
 8001052:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x138>)
 800106c:	f000 fea4 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pin_7_Pin */
  GPIO_InitStruct.Pin = pin_7_Pin;
 8001070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(pin_7_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_GPIO_Init+0x138>)
 800108a:	f000 fe95 	bl	8001db8 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020000 	.word	0x40020000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_MspInit+0x4c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_ADC_MspInit+0xb0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d141      	bne.n	80011aa <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_ADC_MspInit+0xb4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800117a:	230f      	movs	r3, #15
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_ADC_MspInit+0xb8>)
 800118e:	f000 fe13 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <HAL_ADC_MspInit+0xbc>)
 80011a6:	f000 fe07 	bl	8001db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f89a 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <OTG_FS_IRQHandler+0x10>)
 800121e:	f001 f8d0 	bl	80023c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20001134 	.word	0x20001134

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopFillZerobss+0x26>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f006 f9d5 	bl	800762c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fd13 	bl	8000cac <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001294:	08007808 	.word	0x08007808
  ldr r2, =_sbss
 8001298:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800129c:	2000153c 	.word	0x2000153c

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 fd31 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff feec 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd49 	bl	8001d9e <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 fd11 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000010 	.word	0x20000010
 8001340:	20000018 	.word	0x20000018
 8001344:	20000014 	.word	0x20000014

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000018 	.word	0x20000018
 800136c:	20000490 	.word	0x20000490

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000490 	.word	0x20000490

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000018 	.word	0x20000018

080013d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e033      	b.n	800144e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe88 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 faba 	bl	800199c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
 800143e:	e001      	b.n	8001444 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Start+0x1a>
 800146e:	2302      	movs	r3, #2
 8001470:	e097      	b.n	80015a2 <HAL_ADC_Start+0x14a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d018      	beq.n	80014ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <HAL_ADC_Start+0x158>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <HAL_ADC_Start+0x15c>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d15f      	bne.n	8001588 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001506:	d106      	bne.n	8001516 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f023 0206 	bic.w	r2, r3, #6
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
 8001514:	e002      	b.n	800151c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_ADC_Start+0x160>)
 8001526:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001530:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d129      	bne.n	80015a0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	e020      	b.n	80015a0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_ADC_Start+0x164>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d11b      	bne.n	80015a0 <HAL_ADC_Start+0x148>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d114      	bne.n	80015a0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	e00b      	b.n	80015a0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000010 	.word	0x20000010
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	40012300 	.word	0x40012300
 80015bc:	40012000 	.word	0x40012000

080015c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Stop+0x16>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e021      	b.n	800161a <HAL_ADC_Stop+0x5a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d113      	bne.n	800166c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800164e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001652:	d10b      	bne.n	800166c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f043 0220 	orr.w	r2, r3, #32
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e063      	b.n	8001734 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800166c:	f7ff fe80 	bl	8001370 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001672:	e021      	b.n	80016b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167a:	d01d      	beq.n	80016b8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_ADC_PollForConversion+0x6c>
 8001682:	f7ff fe75 	bl	8001370 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d212      	bcs.n	80016b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d00b      	beq.n	80016b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f043 0204 	orr.w	r2, r3, #4
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03d      	b.n	8001734 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d1d6      	bne.n	8001674 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0212 	mvn.w	r2, #18
 80016ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d123      	bne.n	8001732 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11f      	bne.n	8001732 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800170a:	2b00      	cmp	r3, #0
 800170c:	d111      	bne.n	8001732 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1c>
 8001770:	2302      	movs	r3, #2
 8001772:	e105      	b.n	8001980 <HAL_ADC_ConfigChannel+0x228>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b09      	cmp	r3, #9
 8001782:	d925      	bls.n	80017d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1e      	subs	r3, #30
 800179a:	2207      	movs	r2, #7
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43da      	mvns	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	400a      	ands	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68d9      	ldr	r1, [r3, #12]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4403      	add	r3, r0
 80017c2:	3b1e      	subs	r3, #30
 80017c4:	409a      	lsls	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	e022      	b.n	8001816 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	2207      	movs	r2, #7
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	400a      	ands	r2, r1
 80017f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6919      	ldr	r1, [r3, #16]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	4603      	mov	r3, r0
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4403      	add	r3, r0
 800180c:	409a      	lsls	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b06      	cmp	r3, #6
 800181c:	d824      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b05      	subs	r3, #5
 8001830:	221f      	movs	r2, #31
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	400a      	ands	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b05      	subs	r3, #5
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
 8001866:	e04c      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d824      	bhi.n	80018ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3b23      	subs	r3, #35	; 0x23
 8001882:	221f      	movs	r2, #31
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43da      	mvns	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	400a      	ands	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b23      	subs	r3, #35	; 0x23
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
 80018b8:	e023      	b.n	8001902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b41      	subs	r3, #65	; 0x41
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b41      	subs	r3, #65	; 0x41
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_ADC_ConfigChannel+0x234>)
 8001904:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_ADC_ConfigChannel+0x238>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d109      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1cc>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b12      	cmp	r3, #18
 8001916:	d105      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <HAL_ADC_ConfigChannel+0x238>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d123      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x21e>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b10      	cmp	r3, #16
 8001934:	d003      	beq.n	800193e <HAL_ADC_ConfigChannel+0x1e6>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b11      	cmp	r3, #17
 800193c:	d11b      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b10      	cmp	r3, #16
 8001950:	d111      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_ADC_ConfigChannel+0x23c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_ADC_ConfigChannel+0x240>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9a      	lsrs	r2, r3, #18
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001968:	e002      	b.n	8001970 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40012300 	.word	0x40012300
 8001990:	40012000 	.word	0x40012000
 8001994:	20000010 	.word	0x20000010
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <ADC_Init+0x1f0>)
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	431a      	orrs	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	021a      	lsls	r2, r3, #8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <ADC_Init+0x1f4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e00f      	b.n	8001a9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0202 	bic.w	r2, r2, #2
 8001aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	005a      	lsls	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ae6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	3b01      	subs	r3, #1
 8001af4:	035a      	lsls	r2, r3, #13
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e007      	b.n	8001b10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	051a      	lsls	r2, r3, #20
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b52:	025a      	lsls	r2, r3, #9
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	029a      	lsls	r2, r3, #10
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40012300 	.word	0x40012300
 8001b90:	0f000001 	.word	0x0f000001

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e159      	b.n	8002088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8148 	bne.w	8002082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a2 	beq.w	8002082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x202>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x1fe>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_GPIO_Init+0x2f8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_GPIO_Init+0x2fc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x1f6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a45      	ldr	r2, [pc, #276]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x1f2>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x204>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x304>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_GPIO_Init+0x304>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_GPIO_Init+0x304>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f aea2 	bls.w	8001dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002124:	b08f      	sub	sp, #60	; 0x3c
 8002126:	af0a      	add	r7, sp, #40	; 0x28
 8002128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e10f      	b.n	8002354 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 ff62 	bl	8007018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2203      	movs	r2, #3
 8002158:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fe8d 	bl	8003e92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	687e      	ldr	r6, [r7, #4]
 8002180:	466d      	mov	r5, sp
 8002182:	f106 0410 	add.w	r4, r6, #16
 8002186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002192:	e885 0003 	stmia.w	r5, {r0, r1}
 8002196:	1d33      	adds	r3, r6, #4
 8002198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f001 fd64 	bl	8003c68 <USB_CoreInit>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0d0      	b.n	8002354 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 fe7b 	bl	8003eb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e04a      	b.n	800225a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	333d      	adds	r3, #61	; 0x3d
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	333c      	adds	r3, #60	; 0x3c
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	b298      	uxth	r0, r3
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3342      	adds	r3, #66	; 0x42
 8002200:	4602      	mov	r2, r0
 8002202:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	333f      	adds	r3, #63	; 0x3f
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3348      	adds	r3, #72	; 0x48
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3350      	adds	r3, #80	; 0x50
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	3301      	adds	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3af      	bcc.n	80021c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e044      	b.n	80022f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3301      	adds	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3b5      	bcc.n	800226a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	687e      	ldr	r6, [r7, #4]
 8002306:	466d      	mov	r5, sp
 8002308:	f106 0410 	add.w	r4, r6, #16
 800230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002314:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002318:	e885 0003 	stmia.w	r5, {r0, r1}
 800231c:	1d33      	adds	r3, r6, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f001 fdf1 	bl	8003f08 <USB_DevInit>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e00d      	b.n	8002354 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fe39 	bl	8004fc4 <USB_DevDisconnect>

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800235c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_PCD_Start+0x1c>
 8002374:	2302      	movs	r3, #2
 8002376:	e020      	b.n	80023ba <HAL_PCD_Start+0x5e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b01      	cmp	r3, #1
 8002386:	d109      	bne.n	800239c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fd65 	bl	8003e70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fde9 	bl	8004f82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b08d      	sub	sp, #52	; 0x34
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fea7 	bl	800512c <USB_GetMode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 839d 	bne.w	8002b20 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fe0b 	bl	8005006 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8393 	beq.w	8002b1e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fe02 	bl	8005006 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b02      	cmp	r3, #2
 800240a:	d107      	bne.n	800241c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f002 0202 	and.w	r2, r2, #2
 800241a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fdf0 	bl	8005006 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	d161      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0210 	bic.w	r2, r2, #16
 800243e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	2b02      	cmp	r3, #2
 800246a:	d124      	bne.n	80024b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d035      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6a38      	ldr	r0, [r7, #32]
 800248c:	f002 fc56 	bl	8004d3c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800249c:	441a      	add	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ae:	441a      	add	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	619a      	str	r2, [r3, #24]
 80024b4:	e016      	b.n	80024e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	0c5b      	lsrs	r3, r3, #17
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d110      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c8:	2208      	movs	r2, #8
 80024ca:	4619      	mov	r1, r3
 80024cc:	6a38      	ldr	r0, [r7, #32]
 80024ce:	f002 fc35 	bl	8004d3c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024de:	441a      	add	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0210 	orr.w	r2, r2, #16
 80024f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fd84 	bl	8005006 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002508:	d16e      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f002 fd8a 	bl	800502c <USB_ReadDevAllOutEpInterrupt>
 8002518:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800251a:	e062      	b.n	80025e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d057      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fdaf 	bl	8005094 <USB_ReadDevOutEPInterrupt>
 8002536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	461a      	mov	r2, r3
 8002550:	2301      	movs	r3, #1
 8002552:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fdb0 	bl	80030bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	461a      	mov	r2, r3
 8002574:	2308      	movs	r3, #8
 8002576:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 feaa 	bl	80032d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	2310      	movs	r3, #16
 800259a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b2:	461a      	mov	r2, r3
 80025b4:	2320      	movs	r3, #32
 80025b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	3301      	adds	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d199      	bne.n	800251c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fd0a 	bl	8005006 <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025fc:	f040 80c0 	bne.w	8002780 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fd2b 	bl	8005060 <USB_ReadDevAllInEpInterrupt>
 800260a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002610:	e0b2      	b.n	8002778 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a7 	beq.w	800276c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fd51 	bl	80050d0 <USB_ReadDevInEPInterrupt>
 800262e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d057      	beq.n	80026ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	69f9      	ldr	r1, [r7, #28]
 8002656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800265a:	4013      	ands	r3, r2
 800265c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266a:	461a      	mov	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d132      	bne.n	80026de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3348      	adds	r3, #72	; 0x48
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4403      	add	r3, r0
 8002698:	3344      	adds	r3, #68	; 0x44
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4419      	add	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4403      	add	r3, r0
 80026ac:	3348      	adds	r3, #72	; 0x48
 80026ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <HAL_PCD_IRQHandler+0x31c>
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3350      	adds	r3, #80	; 0x50
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d108      	bne.n	80026de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026d6:	461a      	mov	r2, r3
 80026d8:	2101      	movs	r1, #1
 80026da:	f002 fd59 	bl	8005190 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f004 fd18 	bl	800711a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002700:	461a      	mov	r2, r3
 8002702:	2308      	movs	r3, #8
 8002704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271c:	461a      	mov	r2, r3
 800271e:	2310      	movs	r3, #16
 8002720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002738:	461a      	mov	r2, r3
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002754:	461a      	mov	r2, r3
 8002756:	2302      	movs	r3, #2
 8002758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fc1b 	bl	8002fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3301      	adds	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	f47f af49 	bne.w	8002612 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fc3e 	bl	8005006 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002794:	d122      	bne.n	80027dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d108      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027bc:	2100      	movs	r1, #0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fe26 	bl	8003410 <HAL_PCDEx_LPM_Callback>
 80027c4:	e002      	b.n	80027cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f004 fd14 	bl	80071f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fc10 	bl	8005006 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f0:	d112      	bne.n	8002818 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f004 fcd0 	bl	80071a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002816:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fbf2 	bl	8005006 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	f040 80c7 	bne.w	80029be <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2110      	movs	r1, #16
 800284a:	4618      	mov	r0, r3
 800284c:	f001 fcc0 	bl	80041d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002854:	e056      	b.n	8002904 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002862:	461a      	mov	r2, r3
 8002864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002868:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	440a      	add	r2, r1
 8002880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002888:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b6:	461a      	mov	r2, r3
 80028b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	0151      	lsls	r1, r2, #5
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	440a      	add	r2, r1
 80028d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ee:	0151      	lsls	r1, r2, #5
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	440a      	add	r2, r1
 80028f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	3301      	adds	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290a:	429a      	cmp	r2, r3
 800290c:	d3a3      	bcc.n	8002856 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002920:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	2b00      	cmp	r3, #0
 8002928:	d016      	beq.n	8002958 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293a:	f043 030b 	orr.w	r3, r3, #11
 800293e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002950:	f043 030b 	orr.w	r3, r3, #11
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	e015      	b.n	8002984 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002966:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800296e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297e:	f043 030b 	orr.w	r3, r3, #11
 8002982:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002992:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002996:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a8:	461a      	mov	r2, r3
 80029aa:	f002 fbf1 	bl	8005190 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fb1f 	bl	8005006 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d2:	d124      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fbb5 	bl	8005148 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fc55 	bl	8004292 <USB_GetDevSpeed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681c      	ldr	r4, [r3, #0]
 80029f4:	f001 f92c 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 80029f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4620      	mov	r0, r4
 8002a04:	f001 f992 	bl	8003d2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f004 fbae 	bl	800716a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 faef 	bl	8005006 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d10a      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f004 fb8b 	bl	800714e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f002 0208 	and.w	r2, r2, #8
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 fada 	bl	8005006 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5c:	d10f      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f004 fbe3 	bl	8007234 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fabf 	bl	8005006 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a92:	d10f      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f004 fbb6 	bl	8007210 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 faa4 	bl	8005006 <USB_ReadInterrupts>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f004 fbc4 	bl	8007258 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fa8e 	bl	8005006 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d115      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f004 fbb4 	bl	8007274 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	e000      	b.n	8002b20 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b1e:	bf00      	nop
    }
  }
}
 8002b20:	3734      	adds	r7, #52	; 0x34
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}

08002b26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_SetAddress+0x1a>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e013      	b.n	8002b68 <HAL_PCD_SetAddress+0x42>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 f9ec 	bl	8004f36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	70fb      	strb	r3, [r7, #3]
 8002b82:	460b      	mov	r3, r1
 8002b84:	803b      	strh	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da0f      	bge.n	8002bb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3338      	adds	r3, #56	; 0x38
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be2:	883a      	ldrh	r2, [r7, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	78ba      	ldrb	r2, [r7, #2]
 8002bec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c00:	78bb      	ldrb	r3, [r7, #2]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d102      	bne.n	8002c0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_EP_Open+0xaa>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00e      	b.n	8002c38 <HAL_PCD_EP_Open+0xc8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fb57 	bl	80042dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da0f      	bge.n	8002c74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
 8002c72:	e00f      	b.n	8002c94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_EP_Close+0x6e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e00e      	b.n	8002ccc <HAL_PCD_EP_Close+0x8c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fb95 	bl	80043ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	f001 fe70 	bl	8004a2c <USB_EP0StartXfer>
 8002d4c:	e008      	b.n	8002d60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	f001 fc22 	bl	80045a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d8c:	681b      	ldr	r3, [r3, #0]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	460b      	mov	r3, r1
 8002da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df4:	7afb      	ldrb	r3, [r7, #11]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	f001 fe0e 	bl	8004a2c <USB_EP0StartXfer>
 8002e10:	e008      	b.n	8002e24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	f001 fbc0 	bl	80045a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d901      	bls.n	8002e4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e050      	b.n	8002eee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0f      	bge.n	8002e74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	3338      	adds	r3, #56	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	3304      	adds	r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	705a      	strb	r2, [r3, #1]
 8002e72:	e00d      	b.n	8002e90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_EP_SetStall+0x82>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e01e      	b.n	8002eee <HAL_PCD_EP_SetStall+0xc0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 ff65 	bl	8004d8e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	b2d9      	uxtb	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f002 f956 	bl	8005190 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d901      	bls.n	8002f14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e042      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0f      	bge.n	8002f3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
 8002f3a:	e00f      	b.n	8002f5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_EP_ClrStall+0x86>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e00e      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0xa4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 ff6d 	bl	8004e6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	; 0x28
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3338      	adds	r3, #56	; 0x38
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d901      	bls.n	8002fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06c      	b.n	80030b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d902      	bls.n	8002ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffe:	e02b      	b.n	8003058 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	429a      	cmp	r2, r3
 8003014:	d902      	bls.n	800301c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3303      	adds	r3, #3
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003034:	b2db      	uxtb	r3, r3
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f001 fe49 	bl	8004cd2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	441a      	add	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	b29b      	uxth	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	429a      	cmp	r2, r3
 800306c:	d809      	bhi.n	8003082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003076:	429a      	cmp	r2, r3
 8003078:	d203      	bcs.n	8003082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1be      	bne.n	8003000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d811      	bhi.n	80030b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	2201      	movs	r2, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030ae:	4013      	ands	r3, r2
 80030b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	333c      	adds	r3, #60	; 0x3c
 80030d4:	3304      	adds	r3, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	f040 80a0 	bne.w	8003234 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a72      	ldr	r2, [pc, #456]	; (80032cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f240 80dd 	bls.w	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80d7 	beq.w	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003120:	461a      	mov	r2, r3
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	e0cb      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2320      	movs	r3, #32
 8003144:	6093      	str	r3, [r2, #8]
 8003146:	e0bc      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 80b7 	bne.w	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d90f      	bls.n	800317c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	e0a2      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800318e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	0159      	lsls	r1, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	440b      	add	r3, r1
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80031a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4403      	add	r3, r0
 80031b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4403      	add	r3, r0
 80031da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4419      	add	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4403      	add	r3, r0
 80031f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d114      	bne.n	8003226 <PCD_EP_OutXfrComplete_int+0x16a>
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800321e:	461a      	mov	r2, r3
 8003220:	2101      	movs	r1, #1
 8003222:	f001 ffb5 	bl	8005190 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f003 ff59 	bl	80070e4 <HAL_PCD_DataOutStageCallback>
 8003232:	e046      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d124      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	461a      	mov	r2, r3
 8003254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003258:	6093      	str	r3, [r2, #8]
 800325a:	e032      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	2320      	movs	r3, #32
 8003276:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f003 ff30 	bl	80070e4 <HAL_PCD_DataOutStageCallback>
 8003284:	e01d      	b.n	80032c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d114      	bne.n	80032b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d108      	bne.n	80032b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032ae:	461a      	mov	r2, r3
 80032b0:	2100      	movs	r1, #0
 80032b2:	f001 ff6d 	bl	8005190 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f003 ff11 	bl	80070e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	4f54300a 	.word	0x4f54300a
 80032d0:	4f54310a 	.word	0x4f54310a

080032d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	333c      	adds	r3, #60	; 0x3c
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <PCD_EP_OutSetupPacket_int+0x88>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d90e      	bls.n	8003328 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003326:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f003 fec9 	bl	80070c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <PCD_EP_OutSetupPacket_int+0x88>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d90c      	bls.n	8003350 <PCD_EP_OutSetupPacket_int+0x7c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003348:	461a      	mov	r2, r3
 800334a:	2101      	movs	r1, #1
 800334c:	f001 ff20 	bl	8005190 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	4f54300a 	.word	0x4f54300a

08003360 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
 800336c:	4613      	mov	r3, r2
 800336e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800337e:	883b      	ldrh	r3, [r7, #0]
 8003380:	0419      	lsls	r1, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	430a      	orrs	r2, r1
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
 800338c:	e028      	b.n	80033e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e00d      	b.n	80033be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	3340      	adds	r3, #64	; 0x40
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	3301      	adds	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d3ec      	bcc.n	80033a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033c8:	883b      	ldrh	r3, [r7, #0]
 80033ca:	0418      	lsls	r0, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	4302      	orrs	r2, r0
 80033d8:	3340      	adds	r3, #64	; 0x40
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e264      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d075      	beq.n	8003532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003446:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d00c      	beq.n	800346c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003452:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345a:	2b08      	cmp	r3, #8
 800345c:	d112      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b99      	ldr	r3, [pc, #612]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05b      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d157      	bne.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e23f      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x74>
 800348e:	4b91      	ldr	r3, [pc, #580]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd ff46 	bl	8001370 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fd ff42 	bl	8001370 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e204      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fd ff32 	bl	8001370 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003510:	f7fd ff2e 	bl	8001370 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e1f0      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d063      	beq.n	8003606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1c4      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4952      	ldr	r1, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd fee7 	bl	8001370 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fd fee3 	bl	8001370 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1a5      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4940      	ldr	r1, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fec6 	bl	8001370 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fd fec2 	bl	8001370 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e184      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fea6 	bl	8001370 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fd fea2 	bl	8001370 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e164      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x200>
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fd fe8f 	bl	8001370 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fd fe8b 	bl	8001370 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e14d      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a0 	beq.w	80037c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fd fe51 	bl	8001370 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e011      	b.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
 80036e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fe44 	bl	8001370 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e106      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b85      	ldr	r3, [pc, #532]	; (800390c <HAL_RCC_OscConfig+0x4e4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x2f0>
 800370a:	4b81      	ldr	r3, [pc, #516]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a80      	ldr	r2, [pc, #512]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e01c      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 8003720:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a77      	ldr	r2, [pc, #476]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 800373a:	4b75      	ldr	r3, [pc, #468]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a74      	ldr	r2, [pc, #464]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a71      	ldr	r2, [pc, #452]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d015      	beq.n	8003786 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fe09 	bl	8001370 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fe05 	bl	8001370 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0c5      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b65      	ldr	r3, [pc, #404]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCC_OscConfig+0x33a>
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fd fdf3 	bl	8001370 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fdef 	bl	8001370 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0af      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	4b5a      	ldr	r3, [pc, #360]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 809b 	beq.w	8003902 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d05c      	beq.n	8003892 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d141      	bne.n	8003864 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fd fdc3 	bl	8001370 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fd fdbf 	bl	8001370 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e081      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	019b      	lsls	r3, r3, #6
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	4937      	ldr	r1, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fd fd98 	bl	8001370 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd fd94 	bl	8001370 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e056      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x41c>
 8003862:	e04e      	b.n	8003902 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd fd81 	bl	8001370 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fd7d 	bl	8001370 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03f      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
 8003890:	e037      	b.n	8003902 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e032      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d028      	beq.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d121      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d11a      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40007000 	.word	0x40007000
 8003910:	40023800 	.word	0x40023800
 8003914:	42470060 	.word	0x42470060

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0cc      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d90c      	bls.n	8003954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d044      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e067      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0203 	bic.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4934      	ldr	r1, [pc, #208]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fd fcb2 	bl	8001370 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fd fcae 	bl	8001370 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e04f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 020c 	and.w	r2, r3, #12
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1eb      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d20c      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fc12 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	080077e8 	.word	0x080077e8
 8003adc:	20000010 	.word	0x20000010
 8003ae0:	20000014 	.word	0x20000014

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aea:	2100      	movs	r1, #0
 8003aec:	6079      	str	r1, [r7, #4]
 8003aee:	2100      	movs	r1, #0
 8003af0:	60f9      	str	r1, [r7, #12]
 8003af2:	2100      	movs	r1, #0
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003af6:	2100      	movs	r1, #0
 8003af8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afa:	4952      	ldr	r1, [pc, #328]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003afc:	6889      	ldr	r1, [r1, #8]
 8003afe:	f001 010c 	and.w	r1, r1, #12
 8003b02:	2908      	cmp	r1, #8
 8003b04:	d00d      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b06:	2908      	cmp	r1, #8
 8003b08:	f200 8094 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x150>
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x32>
 8003b10:	2904      	cmp	r1, #4
 8003b12:	d003      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x38>
 8003b14:	e08e      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b16:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b18:	60bb      	str	r3, [r7, #8]
       break;
 8003b1a:	e08e      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b1e:	60bb      	str	r3, [r7, #8]
      break;
 8003b20:	e08b      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b22:	4948      	ldr	r1, [pc, #288]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b24:	6849      	ldr	r1, [r1, #4]
 8003b26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b2a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2c:	4945      	ldr	r1, [pc, #276]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2e:	6849      	ldr	r1, [r1, #4]
 8003b30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d024      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4942      	ldr	r1, [pc, #264]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b3a:	6849      	ldr	r1, [r1, #4]
 8003b3c:	0989      	lsrs	r1, r1, #6
 8003b3e:	4608      	mov	r0, r1
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b48:	f04f 0500 	mov.w	r5, #0
 8003b4c:	ea00 0204 	and.w	r2, r0, r4
 8003b50:	ea01 0305 	and.w	r3, r1, r5
 8003b54:	493d      	ldr	r1, [pc, #244]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b56:	fb01 f003 	mul.w	r0, r1, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	fb01 f102 	mul.w	r1, r1, r2
 8003b60:	1844      	adds	r4, r0, r1
 8003b62:	493a      	ldr	r1, [pc, #232]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b64:	fba2 0101 	umull	r0, r1, r2, r1
 8003b68:	1863      	adds	r3, r4, r1
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	f7fc fb36 	bl	80001e4 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e04a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	ea02 0400 	and.w	r4, r2, r0
 8003b9a:	ea03 0501 	and.w	r5, r3, r1
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	014b      	lsls	r3, r1, #5
 8003bac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb0:	0142      	lsls	r2, r0, #5
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	1b00      	subs	r0, r0, r4
 8003bb8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	018b      	lsls	r3, r1, #6
 8003bc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bca:	0182      	lsls	r2, r0, #6
 8003bcc:	1a12      	subs	r2, r2, r0
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f04f 0100 	mov.w	r1, #0
 8003bda:	00d9      	lsls	r1, r3, #3
 8003bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be0:	00d0      	lsls	r0, r2, #3
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	1912      	adds	r2, r2, r4
 8003be8:	eb45 0303 	adc.w	r3, r5, r3
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0299      	lsls	r1, r3, #10
 8003bf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bfa:	0290      	lsls	r0, r2, #10
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	f7fc faea 	bl	80001e4 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	60bb      	str	r3, [r7, #8]
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c36:	60bb      	str	r3, [r7, #8]
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdb0      	pop	{r4, r5, r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	017d7840 	.word	0x017d7840

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000010 	.word	0x20000010

08003c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c68:	b084      	sub	sp, #16
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	f107 001c 	add.w	r0, r7, #28
 8003c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d122      	bne.n	8003cc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 fac6 	bl	800524c <USB_CoreReset>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e01a      	b.n	8003cfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 faba 	bl	800524c <USB_CoreReset>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
 8003cee:	e005      	b.n	8003cfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10b      	bne.n	8003d1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f043 0206 	orr.w	r2, r3, #6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d26:	b004      	add	sp, #16
 8003d28:	4770      	bx	lr
	...

08003d2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d165      	bne.n	8003e0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <USB_SetTurnaroundTime+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d906      	bls.n	8003d56 <USB_SetTurnaroundTime+0x2a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a40      	ldr	r2, [pc, #256]	; (8003e4c <USB_SetTurnaroundTime+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d202      	bcs.n	8003d56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d50:	230f      	movs	r3, #15
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e062      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <USB_SetTurnaroundTime+0x120>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d306      	bcc.n	8003d6c <USB_SetTurnaroundTime+0x40>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <USB_SetTurnaroundTime+0x124>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d202      	bcs.n	8003d6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d66:	230e      	movs	r3, #14
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e057      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <USB_SetTurnaroundTime+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d306      	bcc.n	8003d82 <USB_SetTurnaroundTime+0x56>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4a37      	ldr	r2, [pc, #220]	; (8003e54 <USB_SetTurnaroundTime+0x128>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d202      	bcs.n	8003d82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d7c:	230d      	movs	r3, #13
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e04c      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <USB_SetTurnaroundTime+0x128>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d306      	bcc.n	8003d98 <USB_SetTurnaroundTime+0x6c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <USB_SetTurnaroundTime+0x12c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d92:	230c      	movs	r3, #12
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e041      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a2f      	ldr	r2, [pc, #188]	; (8003e58 <USB_SetTurnaroundTime+0x12c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d906      	bls.n	8003dae <USB_SetTurnaroundTime+0x82>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <USB_SetTurnaroundTime+0x130>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d802      	bhi.n	8003dae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003da8:	230b      	movs	r3, #11
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e036      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <USB_SetTurnaroundTime+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d906      	bls.n	8003dc4 <USB_SetTurnaroundTime+0x98>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <USB_SetTurnaroundTime+0x134>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d802      	bhi.n	8003dc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e02b      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <USB_SetTurnaroundTime+0x134>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d906      	bls.n	8003dda <USB_SetTurnaroundTime+0xae>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <USB_SetTurnaroundTime+0x138>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d202      	bcs.n	8003dda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003dd4:	2309      	movs	r3, #9
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e020      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <USB_SetTurnaroundTime+0x138>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d306      	bcc.n	8003df0 <USB_SetTurnaroundTime+0xc4>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <USB_SetTurnaroundTime+0x13c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d802      	bhi.n	8003df0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dea:	2308      	movs	r3, #8
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e015      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <USB_SetTurnaroundTime+0x13c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d906      	bls.n	8003e06 <USB_SetTurnaroundTime+0xda>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <USB_SetTurnaroundTime+0x140>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d202      	bcs.n	8003e06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e00:	2307      	movs	r3, #7
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e00a      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e06:	2306      	movs	r3, #6
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e007      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e12:	2309      	movs	r3, #9
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e001      	b.n	8003e1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e18:	2309      	movs	r3, #9
 8003e1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	00d8acbf 	.word	0x00d8acbf
 8003e4c:	00e4e1c0 	.word	0x00e4e1c0
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	01067380 	.word	0x01067380
 8003e58:	011a499f 	.word	0x011a499f
 8003e5c:	01312cff 	.word	0x01312cff
 8003e60:	014ca43f 	.word	0x014ca43f
 8003e64:	016e3600 	.word	0x016e3600
 8003e68:	01a6ab1f 	.word	0x01a6ab1f
 8003e6c:	01e84800 	.word	0x01e84800

08003e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d106      	bne.n	8003ee0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	e00b      	b.n	8003ef8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	e001      	b.n	8003ef8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e003      	b.n	8003f00 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003ef8:	2032      	movs	r0, #50	; 0x32
 8003efa:	f7fd fa45 	bl	8001388 <HAL_Delay>

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f08:	b084      	sub	sp, #16
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e009      	b.n	8003f3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3340      	adds	r3, #64	; 0x40
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0e      	cmp	r3, #14
 8003f40:	d9f2      	bls.n	8003f28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11c      	bne.n	8003f82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f80:	e00b      	b.n	8003f9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	4619      	mov	r1, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	680b      	ldr	r3, [r1, #0]
 8003fb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10c      	bne.n	8003fda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f949 	bl	8004260 <USB_SetDevSpeed>
 8003fce:	e008      	b.n	8003fe2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f944 	bl	8004260 <USB_SetDevSpeed>
 8003fd8:	e003      	b.n	8003fe2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fda:	2103      	movs	r1, #3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f93f 	bl	8004260 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8f3 	bl	80041d0 <USB_FlushTxFifo>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f911 	bl	800421c <USB_FlushRxFifo>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	461a      	mov	r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	e043      	b.n	80040b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004044:	d118      	bne.n	8004078 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	461a      	mov	r2, r3
 800405a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e013      	b.n	800408a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e008      	b.n	800408a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	461a      	mov	r2, r3
 80040aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	3301      	adds	r3, #1
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d3b7      	bcc.n	800402e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	e043      	b.n	800414c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d118      	bne.n	800410e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e013      	b.n	8004120 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	e008      	b.n	8004120 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411a:	461a      	mov	r2, r3
 800411c:	2300      	movs	r3, #0
 800411e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004144:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	3301      	adds	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d3b7      	bcc.n	80040c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004166:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004174:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <USB_DevInit+0x2c4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f043 0208 	orr.w	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c8:	b004      	add	sp, #16
 80041ca:	4770      	bx	lr
 80041cc:	803c3800 	.word	0x803c3800

080041d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a09      	ldr	r2, [pc, #36]	; (8004218 <USB_FlushTxFifo+0x48>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d0f0      	beq.n	80041ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	00030d40 	.word	0x00030d40

0800421c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2210      	movs	r2, #16
 800422c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a09      	ldr	r2, [pc, #36]	; (800425c <USB_FlushRxFifo+0x40>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e006      	b.n	800424e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d0f0      	beq.n	800422e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	00030d40 	.word	0x00030d40

08004260 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0306 	and.w	r3, r3, #6
 80042aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]
 80042b6:	e00a      	b.n	80042ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d002      	beq.n	80042c4 <USB_GetDevSpeed+0x32>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d102      	bne.n	80042ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042c4:	2302      	movs	r3, #2
 80042c6:	75fb      	strb	r3, [r7, #23]
 80042c8:	e001      	b.n	80042ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ca:	230f      	movs	r3, #15
 80042cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d13a      	bne.n	800436e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	68f9      	ldr	r1, [r7, #12]
 8004312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004316:	4313      	orrs	r3, r2
 8004318:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d155      	bne.n	80043dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	78db      	ldrb	r3, [r3, #3]
 800434a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800434c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	059b      	lsls	r3, r3, #22
 8004352:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004354:	4313      	orrs	r3, r2
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e036      	b.n	80043dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438c:	4313      	orrs	r3, r2
 800438e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11a      	bne.n	80043dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	78db      	ldrb	r3, [r3, #3]
 80043c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043c2:	430b      	orrs	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d161      	bne.n	80044cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800441a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441e:	d11f      	bne.n	8004460 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800443e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800445e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004480:	4013      	ands	r3, r2
 8004482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	b29b      	uxth	r3, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a4:	4013      	ands	r3, r2
 80044a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	0159      	lsls	r1, r3, #5
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	440b      	add	r3, r1
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	4619      	mov	r1, r3
 80044c4:	4b35      	ldr	r3, [pc, #212]	; (800459c <USB_DeactivateEndpoint+0x1b0>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e060      	b.n	800458e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e2:	d11f      	bne.n	8004524 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004502:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f303 	lsl.w	r3, r1, r3
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	43db      	mvns	r3, r3
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4013      	ands	r3, r2
 8004546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	2101      	movs	r1, #1
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	43db      	mvns	r3, r3
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004568:	4013      	ands	r3, r2
 800456a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	0159      	lsls	r1, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	440b      	add	r3, r1
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	4619      	mov	r1, r3
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <USB_DeactivateEndpoint+0x1b4>)
 800458a:	4013      	ands	r3, r2
 800458c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	ec337800 	.word	0xec337800
 80045a0:	eff37800 	.word	0xeff37800

080045a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 815c 	bne.w	800487e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d132      	bne.n	8004634 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	0cdb      	lsrs	r3, r3, #19
 800462e:	04db      	lsls	r3, r3, #19
 8004630:	6113      	str	r3, [r2, #16]
 8004632:	e074      	b.n	800471e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464e:	0cdb      	lsrs	r3, r3, #19
 8004650:	04db      	lsls	r3, r3, #19
 8004652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6959      	ldr	r1, [r3, #20]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	440b      	add	r3, r1
 8004690:	1e59      	subs	r1, r3, #1
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	fbb1 f3f3 	udiv	r3, r1, r3
 800469a:	04d9      	lsls	r1, r3, #19
 800469c:	4b9d      	ldr	r3, [pc, #628]	; (8004914 <USB_EPStartXfer+0x370>)
 800469e:	400b      	ands	r3, r1
 80046a0:	69b9      	ldr	r1, [r7, #24]
 80046a2:	0148      	lsls	r0, r1, #5
 80046a4:	69f9      	ldr	r1, [r7, #28]
 80046a6:	4401      	add	r1, r0
 80046a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ac:	4313      	orrs	r3, r2
 80046ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	0148      	lsls	r0, r1, #5
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	4401      	add	r1, r0
 80046ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	78db      	ldrb	r3, [r3, #3]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d11f      	bne.n	800471e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800471c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d14b      	bne.n	80047bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d128      	bne.n	800479a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d110      	bne.n	800477a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e00f      	b.n	800479a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e12f      	b.n	8004a1c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	78db      	ldrb	r3, [r3, #3]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d015      	beq.n	8004810 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8117 	beq.w	8004a1c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	69f9      	ldr	r1, [r7, #28]
 8004806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800480a:	4313      	orrs	r3, r2
 800480c:	634b      	str	r3, [r1, #52]	; 0x34
 800480e:	e105      	b.n	8004a1c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e00f      	b.n	8004862 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	b298      	uxth	r0, r3
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fa2b 	bl	8004cd2 <USB_WritePacket>
 800487c:	e0ce      	b.n	8004a1c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004898:	0cdb      	lsrs	r3, r3, #19
 800489a:	04db      	lsls	r3, r3, #19
 800489c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d126      	bne.n	8004918 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	0148      	lsls	r0, r1, #5
 80048e4:	69f9      	ldr	r1, [r7, #28]
 80048e6:	4401      	add	r1, r0
 80048e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048ec:	4313      	orrs	r3, r2
 80048ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800490e:	6113      	str	r3, [r2, #16]
 8004910:	e036      	b.n	8004980 <USB_EPStartXfer+0x3dc>
 8004912:	bf00      	nop
 8004914:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4413      	add	r3, r2
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	04d9      	lsls	r1, r3, #19
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <USB_EPStartXfer+0x484>)
 8004942:	400b      	ands	r3, r1
 8004944:	69b9      	ldr	r1, [r7, #24]
 8004946:	0148      	lsls	r0, r1, #5
 8004948:	69f9      	ldr	r1, [r7, #28]
 800494a:	4401      	add	r1, r0
 800494c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004950:	4313      	orrs	r3, r2
 8004952:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	8af9      	ldrh	r1, [r7, #22]
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	0148      	lsls	r0, r1, #5
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	4401      	add	r1, r0
 8004978:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800497c:	4313      	orrs	r3, r2
 800497e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10d      	bne.n	80049a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	68d9      	ldr	r1, [r3, #12]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	460a      	mov	r2, r1
 80049a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d128      	bne.n	80049fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d110      	bne.n	80049dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00f      	b.n	80049fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	1ff80000 	.word	0x1ff80000

08004a2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f040 80cd 	bne.w	8004be8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d132      	bne.n	8004abc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	04db      	lsls	r3, r3, #19
 8004ab8:	6113      	str	r3, [r2, #16]
 8004aba:	e04e      	b.n	8004b5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad6:	0cdb      	lsrs	r3, r3, #19
 8004ad8:	04db      	lsls	r3, r3, #19
 8004ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004afe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4a:	6939      	ldr	r1, [r7, #16]
 8004b4c:	0148      	lsls	r0, r1, #5
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	4401      	add	r1, r0
 8004b52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b56:	4313      	orrs	r3, r2
 8004b58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d11e      	bne.n	8004b9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e092      	b.n	8004cc4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d07e      	beq.n	8004cc4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	6979      	ldr	r1, [r7, #20]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	634b      	str	r3, [r1, #52]	; 0x34
 8004be6:	e06d      	b.n	8004cc4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	0cdb      	lsrs	r3, r3, #19
 8004c04:	04db      	lsls	r3, r3, #19
 8004c06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c2a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c72:	6939      	ldr	r1, [r7, #16]
 8004c74:	0148      	lsls	r0, r1, #5
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	4401      	add	r1, r0
 8004c7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d10d      	bne.n	8004ca4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	68d9      	ldr	r1, [r3, #12]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b089      	sub	sp, #36	; 0x24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	4611      	mov	r1, r2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	71fb      	strb	r3, [r7, #7]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11a      	bne.n	8004d2e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cf8:	88bb      	ldrh	r3, [r7, #4]
 8004cfa:	3303      	adds	r3, #3
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e00f      	b.n	8004d26 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	031a      	lsls	r2, r3, #12
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	461a      	mov	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3eb      	bcc.n	8004d06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3724      	adds	r7, #36	; 0x24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	3303      	adds	r3, #3
 8004d56:	089b      	lsrs	r3, r3, #2
 8004d58:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e00b      	b.n	8004d78 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3301      	adds	r3, #1
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3ef      	bcc.n	8004d60 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004d80:	69fb      	ldr	r3, [r7, #28]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12c      	bne.n	8004e04 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	db12      	blt.n	8004de2 <USB_EPSetStall+0x54>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004de0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e02b      	b.n	8004e5c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	db12      	blt.n	8004e3c <USB_EPSetStall+0xae>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d128      	bne.n	8004ed8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	78db      	ldrb	r3, [r3, #3]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d003      	beq.n	8004eb6 <USB_EPClearStall+0x4c>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	78db      	ldrb	r3, [r3, #3]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d138      	bne.n	8004f28 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e027      	b.n	8004f28 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ef6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d003      	beq.n	8004f08 <USB_EPClearStall+0x9e>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d10f      	bne.n	8004f28 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f58:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f9c:	f023 0303 	bic.w	r3, r3, #3
 8004fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb0:	f023 0302 	bic.w	r3, r3, #2
 8004fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	0c1b      	lsrs	r3, r3, #16
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	b29b      	uxth	r3, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050c2:	68bb      	ldr	r3, [r7, #8]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	b2db      	uxtb	r3, r3
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800511e:	68bb      	ldr	r3, [r7, #8]
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0301 	and.w	r3, r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	460b      	mov	r3, r1
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	333c      	adds	r3, #60	; 0x3c
 80051a6:	3304      	adds	r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4a26      	ldr	r2, [pc, #152]	; (8005248 <USB_EP0_OutStart+0xb8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d90a      	bls.n	80051ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c4:	d101      	bne.n	80051ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e037      	b.n	800523a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f043 0318 	orr.w	r3, r3, #24
 80051fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005210:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10f      	bne.n	8005238 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005232:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	4f54300a 	.word	0x4f54300a

0800524c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <USB_CoreReset+0x64>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e01b      	b.n	80052a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	daf2      	bge.n	8005258 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f043 0201 	orr.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <USB_CoreReset+0x64>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d0f0      	beq.n	8005282 <USB_CoreReset+0x36>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	00030d40 	.word	0x00030d40

080052b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052c4:	f002 f96e 	bl	80075a4 <USBD_static_malloc>
 80052c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80052d8:	2302      	movs	r3, #2
 80052da:	e066      	b.n	80053aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7c1b      	ldrb	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d119      	bne.n	8005320 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f0:	2202      	movs	r2, #2
 80052f2:	2181      	movs	r1, #129	; 0x81
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f002 f832 	bl	800735e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005304:	2202      	movs	r2, #2
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f002 f828 	bl	800735e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2210      	movs	r2, #16
 800531a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800531e:	e016      	b.n	800534e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	2202      	movs	r2, #2
 8005324:	2181      	movs	r1, #129	; 0x81
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f002 f819 	bl	800735e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005332:	2340      	movs	r3, #64	; 0x40
 8005334:	2202      	movs	r2, #2
 8005336:	2101      	movs	r1, #1
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f002 f810 	bl	800735e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2210      	movs	r2, #16
 800534a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800534e:	2308      	movs	r3, #8
 8005350:	2203      	movs	r2, #3
 8005352:	2182      	movs	r1, #130	; 0x82
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f002 f802 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7c1b      	ldrb	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800538a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800538e:	2101      	movs	r1, #1
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f002 f8d3 	bl	800753c <USBD_LL_PrepareReceive>
 8005396:	e007      	b.n	80053a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800539e:	2340      	movs	r3, #64	; 0x40
 80053a0:	2101      	movs	r1, #1
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f002 f8ca 	bl	800753c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053be:	2181      	movs	r1, #129	; 0x81
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fff2 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053cc:	2101      	movs	r1, #1
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 ffeb 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053dc:	2182      	movs	r1, #130	; 0x82
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 ffe3 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800540e:	4618      	mov	r0, r3
 8005410:	f002 f8d6 	bl	80075c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005438:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800544c:	2303      	movs	r3, #3
 800544e:	e0af      	b.n	80055b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005458:	2b00      	cmp	r3, #0
 800545a:	d03f      	beq.n	80054dc <USBD_CDC_Setup+0xb4>
 800545c:	2b20      	cmp	r3, #32
 800545e:	f040 809f 	bne.w	80055a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	88db      	ldrh	r3, [r3, #6]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02e      	beq.n	80054c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b25b      	sxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	da16      	bge.n	80054a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005480:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	88d2      	ldrh	r2, [r2, #6]
 8005486:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	88db      	ldrh	r3, [r3, #6]
 800548c:	2b07      	cmp	r3, #7
 800548e:	bf28      	it	cs
 8005490:	2307      	movcs	r3, #7
 8005492:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	89fa      	ldrh	r2, [r7, #14]
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fb19 	bl	8006ad2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80054a0:	e085      	b.n	80055ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	785a      	ldrb	r2, [r3, #1]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	88db      	ldrh	r3, [r3, #6]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80054b8:	6939      	ldr	r1, [r7, #16]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	461a      	mov	r2, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fb32 	bl	8006b2a <USBD_CtlPrepareRx>
      break;
 80054c6:	e072      	b.n	80055ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	7850      	ldrb	r0, [r2, #1]
 80054d4:	2200      	movs	r2, #0
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	4798      	blx	r3
      break;
 80054da:	e068      	b.n	80055ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b0b      	cmp	r3, #11
 80054e2:	d852      	bhi.n	800558a <USBD_CDC_Setup+0x162>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <USBD_CDC_Setup+0xc4>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	0800551d 	.word	0x0800551d
 80054f0:	08005599 	.word	0x08005599
 80054f4:	0800558b 	.word	0x0800558b
 80054f8:	0800558b 	.word	0x0800558b
 80054fc:	0800558b 	.word	0x0800558b
 8005500:	0800558b 	.word	0x0800558b
 8005504:	0800558b 	.word	0x0800558b
 8005508:	0800558b 	.word	0x0800558b
 800550c:	0800558b 	.word	0x0800558b
 8005510:	0800558b 	.word	0x0800558b
 8005514:	08005547 	.word	0x08005547
 8005518:	08005571 	.word	0x08005571
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b03      	cmp	r3, #3
 8005526:	d107      	bne.n	8005538 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005528:	f107 030a 	add.w	r3, r7, #10
 800552c:	2202      	movs	r2, #2
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 face 	bl	8006ad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005536:	e032      	b.n	800559e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fa58 	bl	80069f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005540:	2303      	movs	r3, #3
 8005542:	75fb      	strb	r3, [r7, #23]
          break;
 8005544:	e02b      	b.n	800559e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d107      	bne.n	8005562 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005552:	f107 030d 	add.w	r3, r7, #13
 8005556:	2201      	movs	r2, #1
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fab9 	bl	8006ad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005560:	e01d      	b.n	800559e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fa43 	bl	80069f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800556a:	2303      	movs	r3, #3
 800556c:	75fb      	strb	r3, [r7, #23]
          break;
 800556e:	e016      	b.n	800559e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b03      	cmp	r3, #3
 800557a:	d00f      	beq.n	800559c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 fa36 	bl	80069f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005588:	e008      	b.n	800559c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fa2f 	bl	80069f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	75fb      	strb	r3, [r7, #23]
          break;
 8005596:	e002      	b.n	800559e <USBD_CDC_Setup+0x176>
          break;
 8005598:	bf00      	nop
 800559a:	e008      	b.n	80055ae <USBD_CDC_Setup+0x186>
          break;
 800559c:	bf00      	nop
      }
      break;
 800559e:	e006      	b.n	80055ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fa24 	bl	80069f0 <USBD_CtlError>
      ret = USBD_FAIL;
 80055a8:	2303      	movs	r3, #3
 80055aa:	75fb      	strb	r3, [r7, #23]
      break;
 80055ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80055ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e04f      	b.n	800567a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3318      	adds	r3, #24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d029      	beq.n	800564c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3318      	adds	r3, #24
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	78f9      	ldrb	r1, [r7, #3]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	460b      	mov	r3, r1
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4403      	add	r3, r0
 8005618:	3344      	adds	r3, #68	; 0x44
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005620:	fb03 f301 	mul.w	r3, r3, r1
 8005624:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3318      	adds	r3, #24
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800563e:	78f9      	ldrb	r1, [r7, #3]
 8005640:	2300      	movs	r3, #0
 8005642:	2200      	movs	r2, #0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 ff58 	bl	80074fa <USBD_LL_Transmit>
 800564a:	e015      	b.n	8005678 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005694:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e015      	b.n	80056d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 ff68 	bl	800757e <USBD_LL_GetRxDataSize>
 80056ae:	4602      	mov	r2, r0
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056ca:	4611      	mov	r1, r2
 80056cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e01b      	b.n	800572a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <USBD_CDC_EP0_RxReady+0x50>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005702:	2bff      	cmp	r3, #255	; 0xff
 8005704:	d010      	beq.n	8005728 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005714:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800571c:	b292      	uxth	r2, r2
 800571e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	22ff      	movs	r2, #255	; 0xff
 8005724:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2243      	movs	r2, #67	; 0x43
 8005740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005742:	4b03      	ldr	r3, [pc, #12]	; (8005750 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	200000a4 	.word	0x200000a4

08005754 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2243      	movs	r2, #67	; 0x43
 8005760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005762:	4b03      	ldr	r3, [pc, #12]	; (8005770 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000060 	.word	0x20000060

08005774 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2243      	movs	r2, #67	; 0x43
 8005780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005782:	4b03      	ldr	r3, [pc, #12]	; (8005790 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	200000e8 	.word	0x200000e8

08005794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	220a      	movs	r2, #10
 80057a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057a2:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	2000001c 	.word	0x2000001c

080057b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e004      	b.n	80057d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e008      	b.n	800580e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005832:	2303      	movs	r3, #3
 8005834:	e004      	b.n	8005840 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800585a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800585c:	2301      	movs	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e01a      	b.n	80058a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005874:	2b00      	cmp	r3, #0
 8005876:	d114      	bne.n	80058a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2201      	movs	r2, #1
 800587c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005896:	2181      	movs	r1, #129	; 0x81
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fe2e 	bl	80074fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e016      	b.n	80058f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7c1b      	ldrb	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fe2c 	bl	800753c <USBD_LL_PrepareReceive>
 80058e4:	e007      	b.n	80058f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	2101      	movs	r1, #1
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fe23 	bl	800753c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	e01f      	b.n	8005958 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	79fa      	ldrb	r2, [r7, #7]
 800594a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f001 fc9f 	bl	8007290 <USBD_LL_Init>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005956:	7dfb      	ldrb	r3, [r7, #23]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	e016      	b.n	80059a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	f107 020e 	add.w	r2, r7, #14
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fcb6 	bl	8007328 <USBD_LL_Start>
 80059bc:	4603      	mov	r3, r0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	4611      	mov	r1, r2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	78fa      	ldrb	r2, [r7, #3]
 8005a34:	4611      	mov	r1, r2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
  }

  return USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 ff90 	bl	800697c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d01a      	beq.n	8005ab6 <USBD_LL_SetupStage+0x72>
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d822      	bhi.n	8005aca <USBD_LL_SetupStage+0x86>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <USBD_LL_SetupStage+0x4a>
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d00a      	beq.n	8005aa2 <USBD_LL_SetupStage+0x5e>
 8005a8c:	e01d      	b.n	8005aca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa62 	bl	8005f60 <USBD_StdDevReq>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa0:	e020      	b.n	8005ae4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fac6 	bl	800603c <USBD_StdItfReq>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab4:	e016      	b.n	8005ae4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb05 	bl	80060ce <USBD_StdEPReq>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e00c      	b.n	8005ae4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fc85 	bl	80073e8 <USBD_LL_StallEP>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae2:	bf00      	nop
  }

  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	460b      	mov	r3, r1
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d138      	bne.n	8005b74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d14a      	bne.n	8005baa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d913      	bls.n	8005b48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bf28      	it	cs
 8005b3a:	4613      	movcs	r3, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f001 f80f 	bl	8006b64 <USBD_CtlContinueRx>
 8005b46:	e030      	b.n	8005baa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d10b      	bne.n	8005b6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 f80a 	bl	8006b86 <USBD_CtlSendStatus>
 8005b72:	e01a      	b.n	8005baa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d114      	bne.n	8005baa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00e      	beq.n	8005baa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	7afa      	ldrb	r2, [r7, #11]
 8005b96:	4611      	mov	r1, r2
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	e000      	b.n	8005bac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d16b      	bne.n	8005ca0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d156      	bne.n	8005c86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d914      	bls.n	8005c0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	1ad2      	subs	r2, r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 ff84 	bl	8006b08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c00:	2300      	movs	r3, #0
 8005c02:	2200      	movs	r2, #0
 8005c04:	2100      	movs	r1, #0
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f001 fc98 	bl	800753c <USBD_LL_PrepareReceive>
 8005c0c:	e03b      	b.n	8005c86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d11c      	bne.n	8005c54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d316      	bcc.n	8005c54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d20f      	bcs.n	8005c54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c34:	2200      	movs	r2, #0
 8005c36:	2100      	movs	r1, #0
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 ff65 	bl	8006b08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c46:	2300      	movs	r3, #0
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f001 fc75 	bl	800753c <USBD_LL_PrepareReceive>
 8005c52:	e018      	b.n	8005c86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d10b      	bne.n	8005c78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c78:	2180      	movs	r1, #128	; 0x80
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 fbb4 	bl	80073e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 ff93 	bl	8006bac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d122      	bne.n	8005cd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff fe98 	bl	80059c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c9e:	e01a      	b.n	8005cd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d114      	bne.n	8005cd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	7afa      	ldrb	r2, [r7, #11]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	4798      	blx	r3
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	e000      	b.n	8005cd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e02f      	b.n	8005d74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6852      	ldr	r2, [r2, #4]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	4611      	mov	r1, r2
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d3e:	2340      	movs	r3, #64	; 0x40
 8005d40:	2200      	movs	r2, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fb0a 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2240      	movs	r2, #64	; 0x40
 8005d56:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d5a:	2340      	movs	r3, #64	; 0x40
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2180      	movs	r1, #128	; 0x80
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 fafc 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2204      	movs	r2, #4
 8005db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d106      	bne.n	8005dea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e012      	b.n	8005e34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d10b      	bne.n	8005e32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e014      	b.n	8005e80 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d10d      	bne.n	8005e7e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e014      	b.n	8005ecc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d10d      	bne.n	8005eca <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6852      	ldr	r2, [r2, #4]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	4611      	mov	r1, r2
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
  }

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f40:	8a3b      	ldrh	r3, [r7, #16]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	b21a      	sxth	r2, r3
 8005f46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b21b      	sxth	r3, r3
 8005f4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f50:	89fb      	ldrh	r3, [r7, #14]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d005      	beq.n	8005f86 <USBD_StdDevReq+0x26>
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d853      	bhi.n	8006026 <USBD_StdDevReq+0xc6>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <USBD_StdDevReq+0x3a>
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d14f      	bne.n	8006026 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]
      break;
 8005f98:	e04a      	b.n	8006030 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d83b      	bhi.n	800601a <USBD_StdDevReq+0xba>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <USBD_StdDevReq+0x48>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08006011 	.word	0x08006011
 8005fb0:	0800601b 	.word	0x0800601b
 8005fb4:	08006007 	.word	0x08006007
 8005fb8:	0800601b 	.word	0x0800601b
 8005fbc:	08005fdb 	.word	0x08005fdb
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	0800601b 	.word	0x0800601b
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08005fe5 	.word	0x08005fe5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9de 	bl	8006394 <USBD_GetDescriptor>
          break;
 8005fd8:	e024      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb43 	bl	8006668 <USBD_SetAddress>
          break;
 8005fe2:	e01f      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb82 	bl	80066f0 <USBD_SetConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
          break;
 8005ff0:	e018      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fc21 	bl	800683c <USBD_GetConfig>
          break;
 8005ffa:	e013      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fc52 	bl	80068a8 <USBD_GetStatus>
          break;
 8006004:	e00e      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc81 	bl	8006910 <USBD_SetFeature>
          break;
 800600e:	e009      	b.n	8006024 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc90 	bl	8006938 <USBD_ClrFeature>
          break;
 8006018:	e004      	b.n	8006024 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fce7 	bl	80069f0 <USBD_CtlError>
          break;
 8006022:	bf00      	nop
      }
      break;
 8006024:	e004      	b.n	8006030 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fce1 	bl	80069f0 <USBD_CtlError>
      break;
 800602e:	bf00      	nop
  }

  return ret;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop

0800603c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d005      	beq.n	8006062 <USBD_StdItfReq+0x26>
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d82f      	bhi.n	80060ba <USBD_StdItfReq+0x7e>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <USBD_StdItfReq+0x26>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d12b      	bne.n	80060ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	2b02      	cmp	r3, #2
 800606e:	d81d      	bhi.n	80060ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	889b      	ldrh	r3, [r3, #4]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d813      	bhi.n	80060a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d110      	bne.n	80060b6 <USBD_StdItfReq+0x7a>
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10d      	bne.n	80060b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fd73 	bl	8006b86 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060a0:	e009      	b.n	80060b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fca3 	bl	80069f0 <USBD_CtlError>
          break;
 80060aa:	e004      	b.n	80060b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fc9e 	bl	80069f0 <USBD_CtlError>
          break;
 80060b4:	e000      	b.n	80060b8 <USBD_StdItfReq+0x7c>
          break;
 80060b6:	bf00      	nop
      }
      break;
 80060b8:	e004      	b.n	80060c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc97 	bl	80069f0 <USBD_CtlError>
      break;
 80060c2:	bf00      	nop
  }

  return ret;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	889b      	ldrh	r3, [r3, #4]
 80060e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d007      	beq.n	80060fe <USBD_StdEPReq+0x30>
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	f200 8145 	bhi.w	800637e <USBD_StdEPReq+0x2b0>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <USBD_StdEPReq+0x44>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	f040 8140 	bne.w	800637e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e13a      	b.n	8006388 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d007      	beq.n	800612a <USBD_StdEPReq+0x5c>
 800611a:	2b03      	cmp	r3, #3
 800611c:	f300 8129 	bgt.w	8006372 <USBD_StdEPReq+0x2a4>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d07f      	beq.n	8006224 <USBD_StdEPReq+0x156>
 8006124:	2b01      	cmp	r3, #1
 8006126:	d03c      	beq.n	80061a2 <USBD_StdEPReq+0xd4>
 8006128:	e123      	b.n	8006372 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d002      	beq.n	800613c <USBD_StdEPReq+0x6e>
 8006136:	2b03      	cmp	r3, #3
 8006138:	d016      	beq.n	8006168 <USBD_StdEPReq+0x9a>
 800613a:	e02c      	b.n	8006196 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <USBD_StdEPReq+0x90>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b80      	cmp	r3, #128	; 0x80
 8006146:	d00a      	beq.n	800615e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f94b 	bl	80073e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 f947 	bl	80073e8 <USBD_LL_StallEP>
 800615a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800615c:	e020      	b.n	80061a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc45 	bl	80069f0 <USBD_CtlError>
              break;
 8006166:	e01b      	b.n	80061a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10e      	bne.n	800618e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <USBD_StdEPReq+0xc0>
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d008      	beq.n	800618e <USBD_StdEPReq+0xc0>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f92d 	bl	80073e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fcf9 	bl	8006b86 <USBD_CtlSendStatus>

              break;
 8006194:	e004      	b.n	80061a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fc29 	bl	80069f0 <USBD_CtlError>
              break;
 800619e:	bf00      	nop
          }
          break;
 80061a0:	e0ec      	b.n	800637c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d002      	beq.n	80061b4 <USBD_StdEPReq+0xe6>
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d016      	beq.n	80061e0 <USBD_StdEPReq+0x112>
 80061b2:	e030      	b.n	8006216 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <USBD_StdEPReq+0x108>
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d00a      	beq.n	80061d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 f90f 	bl	80073e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 f90b 	bl	80073e8 <USBD_LL_StallEP>
 80061d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061d4:	e025      	b.n	8006222 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fc09 	bl	80069f0 <USBD_CtlError>
              break;
 80061de:	e020      	b.n	8006222 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	885b      	ldrh	r3, [r3, #2]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11b      	bne.n	8006220 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 f915 	bl	8007426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fcc2 	bl	8006b86 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006214:	e004      	b.n	8006220 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fbe9 	bl	80069f0 <USBD_CtlError>
              break;
 800621e:	e000      	b.n	8006222 <USBD_StdEPReq+0x154>
              break;
 8006220:	bf00      	nop
          }
          break;
 8006222:	e0ab      	b.n	800637c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d002      	beq.n	8006236 <USBD_StdEPReq+0x168>
 8006230:	2b03      	cmp	r3, #3
 8006232:	d032      	beq.n	800629a <USBD_StdEPReq+0x1cc>
 8006234:	e097      	b.n	8006366 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <USBD_StdEPReq+0x17e>
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	2b80      	cmp	r3, #128	; 0x80
 8006240:	d004      	beq.n	800624c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fbd3 	bl	80069f0 <USBD_CtlError>
                break;
 800624a:	e091      	b.n	8006370 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800624c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006250:	2b00      	cmp	r3, #0
 8006252:	da0b      	bge.n	800626c <USBD_StdEPReq+0x19e>
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	3310      	adds	r3, #16
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	3304      	adds	r3, #4
 800626a:	e00b      	b.n	8006284 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	3304      	adds	r3, #4
 8006284:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2202      	movs	r2, #2
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc1d 	bl	8006ad2 <USBD_CtlSendData>
              break;
 8006298:	e06a      	b.n	8006370 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800629a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da11      	bge.n	80062c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	3324      	adds	r3, #36	; 0x24
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d117      	bne.n	80062ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fb96 	bl	80069f0 <USBD_CtlError>
                  break;
 80062c4:	e054      	b.n	8006370 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb83 	bl	80069f0 <USBD_CtlError>
                  break;
 80062ea:	e041      	b.n	8006370 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da0b      	bge.n	800630c <USBD_StdEPReq+0x23e>
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3310      	adds	r3, #16
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	3304      	adds	r3, #4
 800630a:	e00b      	b.n	8006324 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	3304      	adds	r3, #4
 8006324:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <USBD_StdEPReq+0x264>
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d103      	bne.n	800633a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e00e      	b.n	8006358 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f890 	bl	8007464 <USBD_LL_IsStallEP>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e002      	b.n	8006358 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2202      	movs	r2, #2
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fbb7 	bl	8006ad2 <USBD_CtlSendData>
              break;
 8006364:	e004      	b.n	8006370 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb41 	bl	80069f0 <USBD_CtlError>
              break;
 800636e:	bf00      	nop
          }
          break;
 8006370:	e004      	b.n	800637c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb3b 	bl	80069f0 <USBD_CtlError>
          break;
 800637a:	bf00      	nop
      }
      break;
 800637c:	e004      	b.n	8006388 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fb35 	bl	80069f0 <USBD_CtlError>
      break;
 8006386:	bf00      	nop
  }

  return ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	885b      	ldrh	r3, [r3, #2]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	f200 8128 	bhi.w	800660a <USBD_GetDescriptor+0x276>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <USBD_GetDescriptor+0x2c>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	080063f5 	.word	0x080063f5
 80063c8:	08006435 	.word	0x08006435
 80063cc:	0800660b 	.word	0x0800660b
 80063d0:	0800660b 	.word	0x0800660b
 80063d4:	080065ab 	.word	0x080065ab
 80063d8:	080065d7 	.word	0x080065d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	7c12      	ldrb	r2, [r2, #16]
 80063e8:	f107 0108 	add.w	r1, r7, #8
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
 80063f0:	60f8      	str	r0, [r7, #12]
      break;
 80063f2:	e112      	b.n	800661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	7c1b      	ldrb	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10d      	bne.n	8006418 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	f107 0208 	add.w	r2, r7, #8
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
 800640c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	2202      	movs	r2, #2
 8006414:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006416:	e100      	b.n	800661a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f107 0208 	add.w	r2, r7, #8
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	2202      	movs	r2, #2
 8006430:	701a      	strb	r2, [r3, #0]
      break;
 8006432:	e0f2      	b.n	800661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	885b      	ldrh	r3, [r3, #2]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b05      	cmp	r3, #5
 800643c:	f200 80ac 	bhi.w	8006598 <USBD_GetDescriptor+0x204>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USBD_GetDescriptor+0xb4>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	08006461 	.word	0x08006461
 800644c:	08006495 	.word	0x08006495
 8006450:	080064c9 	.word	0x080064c9
 8006454:	080064fd 	.word	0x080064fd
 8006458:	08006531 	.word	0x08006531
 800645c:	08006565 	.word	0x08006565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	7c12      	ldrb	r2, [r2, #16]
 8006478:	f107 0108 	add.w	r1, r7, #8
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
 8006480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006482:	e091      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fab2 	bl	80069f0 <USBD_CtlError>
            err++;
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	3301      	adds	r3, #1
 8006490:	72fb      	strb	r3, [r7, #11]
          break;
 8006492:	e089      	b.n	80065a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	7c12      	ldrb	r2, [r2, #16]
 80064ac:	f107 0108 	add.w	r1, r7, #8
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064b6:	e077      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa98 	bl	80069f0 <USBD_CtlError>
            err++;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	3301      	adds	r3, #1
 80064c4:	72fb      	strb	r3, [r7, #11]
          break;
 80064c6:	e06f      	b.n	80065a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	7c12      	ldrb	r2, [r2, #16]
 80064e0:	f107 0108 	add.w	r1, r7, #8
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
 80064e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ea:	e05d      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa7e 	bl	80069f0 <USBD_CtlError>
            err++;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	3301      	adds	r3, #1
 80064f8:	72fb      	strb	r3, [r7, #11]
          break;
 80064fa:	e055      	b.n	80065a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	7c12      	ldrb	r2, [r2, #16]
 8006514:	f107 0108 	add.w	r1, r7, #8
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
 800651c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800651e:	e043      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa64 	bl	80069f0 <USBD_CtlError>
            err++;
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	3301      	adds	r3, #1
 800652c:	72fb      	strb	r3, [r7, #11]
          break;
 800652e:	e03b      	b.n	80065a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	7c12      	ldrb	r2, [r2, #16]
 8006548:	f107 0108 	add.w	r1, r7, #8
 800654c:	4610      	mov	r0, r2
 800654e:	4798      	blx	r3
 8006550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006552:	e029      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa4a 	bl	80069f0 <USBD_CtlError>
            err++;
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	3301      	adds	r3, #1
 8006560:	72fb      	strb	r3, [r7, #11]
          break;
 8006562:	e021      	b.n	80065a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7c12      	ldrb	r2, [r2, #16]
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006586:	e00f      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa30 	bl	80069f0 <USBD_CtlError>
            err++;
 8006590:	7afb      	ldrb	r3, [r7, #11]
 8006592:	3301      	adds	r3, #1
 8006594:	72fb      	strb	r3, [r7, #11]
          break;
 8006596:	e007      	b.n	80065a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa28 	bl	80069f0 <USBD_CtlError>
          err++;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	3301      	adds	r3, #1
 80065a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80065a6:	bf00      	nop
      }
      break;
 80065a8:	e037      	b.n	800661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7c1b      	ldrb	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	f107 0208 	add.w	r2, r7, #8
 80065be:	4610      	mov	r0, r2
 80065c0:	4798      	blx	r3
 80065c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065c4:	e029      	b.n	800661a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa11 	bl	80069f0 <USBD_CtlError>
        err++;
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	3301      	adds	r3, #1
 80065d2:	72fb      	strb	r3, [r7, #11]
      break;
 80065d4:	e021      	b.n	800661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7c1b      	ldrb	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	f107 0208 	add.w	r2, r7, #8
 80065ea:	4610      	mov	r0, r2
 80065ec:	4798      	blx	r3
 80065ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	2207      	movs	r2, #7
 80065f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065f8:	e00f      	b.n	800661a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9f7 	bl	80069f0 <USBD_CtlError>
        err++;
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	3301      	adds	r3, #1
 8006606:	72fb      	strb	r3, [r7, #11]
      break;
 8006608:	e007      	b.n	800661a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f9ef 	bl	80069f0 <USBD_CtlError>
      err++;
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	3301      	adds	r3, #1
 8006616:	72fb      	strb	r3, [r7, #11]
      break;
 8006618:	bf00      	nop
  }

  if (err != 0U)
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11e      	bne.n	800665e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d016      	beq.n	8006656 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	88da      	ldrh	r2, [r3, #6]
 8006632:	893b      	ldrh	r3, [r7, #8]
 8006634:	4293      	cmp	r3, r2
 8006636:	bf28      	it	cs
 8006638:	4613      	movcs	r3, r2
 800663a:	b29b      	uxth	r3, r3
 800663c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800663e:	893b      	ldrh	r3, [r7, #8]
 8006640:	461a      	mov	r2, r3
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa44 	bl	8006ad2 <USBD_CtlSendData>
 800664a:	e009      	b.n	8006660 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9ce 	bl	80069f0 <USBD_CtlError>
 8006654:	e004      	b.n	8006660 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa95 	bl	8006b86 <USBD_CtlSendStatus>
 800665c:	e000      	b.n	8006660 <USBD_GetDescriptor+0x2cc>
    return;
 800665e:	bf00      	nop
  }
}
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop

08006668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	889b      	ldrh	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d131      	bne.n	80066de <USBD_SetAddress+0x76>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	88db      	ldrh	r3, [r3, #6]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d12d      	bne.n	80066de <USBD_SetAddress+0x76>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	2b7f      	cmp	r3, #127	; 0x7f
 8006688:	d829      	bhi.n	80066de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	885b      	ldrh	r3, [r3, #2]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d104      	bne.n	80066ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f9a3 	bl	80069f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066aa:	e01d      	b.n	80066e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 feff 	bl	80074bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa61 	bl	8006b86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d2:	e009      	b.n	80066e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066dc:	e004      	b.n	80066e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f985 	bl	80069f0 <USBD_CtlError>
  }
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	885b      	ldrh	r3, [r3, #2]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b4c      	ldr	r3, [pc, #304]	; (8006838 <USBD_SetConfig+0x148>)
 8006706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006708:	4b4b      	ldr	r3, [pc, #300]	; (8006838 <USBD_SetConfig+0x148>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d905      	bls.n	800671c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f96c 	bl	80069f0 <USBD_CtlError>
    return USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	e088      	b.n	800682e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d002      	beq.n	800672e <USBD_SetConfig+0x3e>
 8006728:	2b03      	cmp	r3, #3
 800672a:	d025      	beq.n	8006778 <USBD_SetConfig+0x88>
 800672c:	e071      	b.n	8006812 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <USBD_SetConfig+0x148>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01c      	beq.n	8006770 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006736:	4b40      	ldr	r3, [pc, #256]	; (8006838 <USBD_SetConfig+0x148>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006740:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <USBD_SetConfig+0x148>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff f948 	bl	80059dc <USBD_SetClassConfig>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f949 	bl	80069f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800675e:	e065      	b.n	800682c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fa10 	bl	8006b86 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2203      	movs	r2, #3
 800676a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800676e:	e05d      	b.n	800682c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fa08 	bl	8006b86 <USBD_CtlSendStatus>
      break;
 8006776:	e059      	b.n	800682c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <USBD_SetConfig+0x148>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006788:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <USBD_SetConfig+0x148>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <USBD_SetConfig+0x148>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff f93b 	bl	8005a14 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9f1 	bl	8006b86 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067a4:	e042      	b.n	800682c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <USBD_SetConfig+0x148>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d02a      	beq.n	800680a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff f929 	bl	8005a14 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <USBD_SetConfig+0x148>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067cc:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <USBD_SetConfig+0x148>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff f902 	bl	80059dc <USBD_SetClassConfig>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00f      	beq.n	8006802 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f903 	bl	80069f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff f90e 	bl	8005a14 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006800:	e014      	b.n	800682c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9bf 	bl	8006b86 <USBD_CtlSendStatus>
      break;
 8006808:	e010      	b.n	800682c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9bb 	bl	8006b86 <USBD_CtlSendStatus>
      break;
 8006810:	e00c      	b.n	800682c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8eb 	bl	80069f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <USBD_SetConfig+0x148>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff f8f7 	bl	8005a14 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006826:	2303      	movs	r3, #3
 8006828:	73fb      	strb	r3, [r7, #15]
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200001e1 	.word	0x200001e1

0800683c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d004      	beq.n	8006858 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f8cd 	bl	80069f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006856:	e023      	b.n	80068a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	dc02      	bgt.n	800686a <USBD_GetConfig+0x2e>
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc03      	bgt.n	8006870 <USBD_GetConfig+0x34>
 8006868:	e015      	b.n	8006896 <USBD_GetConfig+0x5a>
 800686a:	2b03      	cmp	r3, #3
 800686c:	d00b      	beq.n	8006886 <USBD_GetConfig+0x4a>
 800686e:	e012      	b.n	8006896 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3308      	adds	r3, #8
 800687a:	2201      	movs	r2, #1
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f927 	bl	8006ad2 <USBD_CtlSendData>
        break;
 8006884:	e00c      	b.n	80068a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3304      	adds	r3, #4
 800688a:	2201      	movs	r2, #1
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f91f 	bl	8006ad2 <USBD_CtlSendData>
        break;
 8006894:	e004      	b.n	80068a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8a9 	bl	80069f0 <USBD_CtlError>
        break;
 800689e:	bf00      	nop
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d81e      	bhi.n	80068fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	88db      	ldrh	r3, [r3, #6]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d004      	beq.n	80068d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f890 	bl	80069f0 <USBD_CtlError>
        break;
 80068d0:	e01a      	b.n	8006908 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f043 0202 	orr.w	r2, r3, #2
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	330c      	adds	r3, #12
 80068f2:	2202      	movs	r2, #2
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8eb 	bl	8006ad2 <USBD_CtlSendData>
      break;
 80068fc:	e004      	b.n	8006908 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f875 	bl	80069f0 <USBD_CtlError>
      break;
 8006906:	bf00      	nop
  }
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	885b      	ldrh	r3, [r3, #2]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d106      	bne.n	8006930 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f92b 	bl	8006b86 <USBD_CtlSendStatus>
  }
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006948:	b2db      	uxtb	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	2b02      	cmp	r3, #2
 800694e:	d80b      	bhi.n	8006968 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10c      	bne.n	8006972 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f910 	bl	8006b86 <USBD_CtlSendStatus>
      }
      break;
 8006966:	e004      	b.n	8006972 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f840 	bl	80069f0 <USBD_CtlError>
      break;
 8006970:	e000      	b.n	8006974 <USBD_ClrFeature+0x3c>
      break;
 8006972:	bf00      	nop
  }
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fabb 	bl	8005f22 <SWAPBYTE>
 80069ac:	4603      	mov	r3, r0
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff faae 	bl	8005f22 <SWAPBYTE>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff faa1 	bl	8005f22 <SWAPBYTE>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	80da      	strh	r2, [r3, #6]
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fcf3 	bl	80073e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a02:	2100      	movs	r1, #0
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fcef 	bl	80073e8 <USBD_LL_StallEP>
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d036      	beq.n	8006a96 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a2c:	6938      	ldr	r0, [r7, #16]
 8006a2e:	f000 f836 	bl	8006a9e <USBD_GetLen>
 8006a32:	4603      	mov	r3, r0
 8006a34:	3301      	adds	r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	4413      	add	r3, r2
 8006a58:	2203      	movs	r2, #3
 8006a5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a62:	e013      	b.n	8006a8c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	7812      	ldrb	r2, [r2, #0]
 8006a6e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3301      	adds	r3, #1
 8006a74:	613b      	str	r3, [r7, #16]
    idx++;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e7      	bne.n	8006a64 <USBD_GetString+0x52>
 8006a94:	e000      	b.n	8006a98 <USBD_GetString+0x86>
    return;
 8006a96:	bf00      	nop
  }
}
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006aae:	e005      	b.n	8006abc <USBD_GetLen+0x1e>
  {
    len++;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <USBD_GetLen+0x12>
  }

  return len;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fcfe 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fced 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	2100      	movs	r1, #0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fcf1 	bl	800753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fce0 	bl	800753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2204      	movs	r2, #4
 8006b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b96:	2300      	movs	r3, #0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fcac 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2205      	movs	r2, #5
 8006bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fcba 	bl	800753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4912      	ldr	r1, [pc, #72]	; (8006c24 <MX_USB_DEVICE_Init+0x50>)
 8006bdc:	4812      	ldr	r0, [pc, #72]	; (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006bde:	f7fe fe8f 	bl	8005900 <USBD_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006be8:	f7fa fa5e 	bl	80010a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bec:	490f      	ldr	r1, [pc, #60]	; (8006c2c <MX_USB_DEVICE_Init+0x58>)
 8006bee:	480e      	ldr	r0, [pc, #56]	; (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006bf0:	f7fe feb6 	bl	8005960 <USBD_RegisterClass>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bfa:	f7fa fa55 	bl	80010a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bfe:	490c      	ldr	r1, [pc, #48]	; (8006c30 <MX_USB_DEVICE_Init+0x5c>)
 8006c00:	4809      	ldr	r0, [pc, #36]	; (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006c02:	f7fe fdd7 	bl	80057b4 <USBD_CDC_RegisterInterface>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c0c:	f7fa fa4c 	bl	80010a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c10:	4805      	ldr	r0, [pc, #20]	; (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006c12:	f7fe fecc 	bl	80059ae <USBD_Start>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c1c:	f7fa fa44 	bl	80010a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c20:	bf00      	nop
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000140 	.word	0x20000140
 8006c28:	20000494 	.word	0x20000494
 8006c2c:	20000028 	.word	0x20000028
 8006c30:	2000012c 	.word	0x2000012c

08006c34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4905      	ldr	r1, [pc, #20]	; (8006c50 <CDC_Init_FS+0x1c>)
 8006c3c:	4805      	ldr	r0, [pc, #20]	; (8006c54 <CDC_Init_FS+0x20>)
 8006c3e:	f7fe fdce 	bl	80057de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c42:	4905      	ldr	r1, [pc, #20]	; (8006c58 <CDC_Init_FS+0x24>)
 8006c44:	4803      	ldr	r0, [pc, #12]	; (8006c54 <CDC_Init_FS+0x20>)
 8006c46:	f7fe fde8 	bl	800581a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000b4c 	.word	0x20000b4c
 8006c54:	20000494 	.word	0x20000494
 8006c58:	20000764 	.word	0x20000764

08006c5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b23      	cmp	r3, #35	; 0x23
 8006c80:	d84a      	bhi.n	8006d18 <CDC_Control_FS+0xac>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <CDC_Control_FS+0x1c>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006d19 	.word	0x08006d19
 8006c90:	08006d19 	.word	0x08006d19
 8006c94:	08006d19 	.word	0x08006d19
 8006c98:	08006d19 	.word	0x08006d19
 8006c9c:	08006d19 	.word	0x08006d19
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006d19 	.word	0x08006d19
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006d19 	.word	0x08006d19
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	08006d19 	.word	0x08006d19
 8006cd0:	08006d19 	.word	0x08006d19
 8006cd4:	08006d19 	.word	0x08006d19
 8006cd8:	08006d19 	.word	0x08006d19
 8006cdc:	08006d19 	.word	0x08006d19
 8006ce0:	08006d19 	.word	0x08006d19
 8006ce4:	08006d19 	.word	0x08006d19
 8006ce8:	08006d19 	.word	0x08006d19
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d19 	.word	0x08006d19
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d19 	.word	0x08006d19
 8006d10:	08006d19 	.word	0x08006d19
 8006d14:	08006d19 	.word	0x08006d19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d18:	bf00      	nop
  }

  return (USBD_OK);
 8006d1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	4811      	ldr	r0, [pc, #68]	; (8006d7c <CDC_Receive_FS+0x54>)
 8006d36:	f7fe fd70 	bl	800581a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d3a:	4810      	ldr	r0, [pc, #64]	; (8006d7c <CDC_Receive_FS+0x54>)
 8006d3c:	f7fe fdb6 	bl	80058ac <USBD_CDC_ReceivePacket>
  lenght=(uint8_t) *Len;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <CDC_Receive_FS+0x58>)
 8006d48:	701a      	strb	r2, [r3, #0]
  memset(buffer_usb,'\0',64);
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	480d      	ldr	r0, [pc, #52]	; (8006d84 <CDC_Receive_FS+0x5c>)
 8006d50:	f000 fc9e 	bl	8007690 <memset>
  memcpy(buffer_usb,Buf,lenght);
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <CDC_Receive_FS+0x58>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <CDC_Receive_FS+0x5c>)
 8006d5e:	f000 fc89 	bl	8007674 <memcpy>
  memset(Buf,'\0',lenght);
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <CDC_Receive_FS+0x58>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc90 	bl	8007690 <memset>
  return (USBD_OK);
 8006d70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000494 	.word	0x20000494
 8006d80:	20000404 	.word	0x20000404
 8006d84:	20000450 	.word	0x20000450

08006d88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d98:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <CDC_Transmit_FS+0x48>)
 8006d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e00b      	b.n	8006dc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dae:	887b      	ldrh	r3, [r7, #2]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4806      	ldr	r0, [pc, #24]	; (8006dd0 <CDC_Transmit_FS+0x48>)
 8006db6:	f7fe fd12 	bl	80057de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006dba:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <CDC_Transmit_FS+0x48>)
 8006dbc:	f7fe fd46 	bl	800584c <USBD_CDC_TransmitPacket>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000494 	.word	0x20000494

08006dd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	6039      	str	r1, [r7, #0]
 8006e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2212      	movs	r2, #18
 8006e08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	2000015c 	.word	0x2000015c

08006e1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000170 	.word	0x20000170

08006e40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d105      	bne.n	8006e5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	4907      	ldr	r1, [pc, #28]	; (8006e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e56:	4808      	ldr	r0, [pc, #32]	; (8006e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e58:	f7ff fddb 	bl	8006a12 <USBD_GetString>
 8006e5c:	e004      	b.n	8006e68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4904      	ldr	r1, [pc, #16]	; (8006e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e62:	4805      	ldr	r0, [pc, #20]	; (8006e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e64:	f7ff fdd5 	bl	8006a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000f34 	.word	0x20000f34
 8006e78:	080077a0 	.word	0x080077a0

08006e7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	4904      	ldr	r1, [pc, #16]	; (8006e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e8c:	4804      	ldr	r0, [pc, #16]	; (8006ea0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e8e:	f7ff fdc0 	bl	8006a12 <USBD_GetString>
  return USBD_StrDesc;
 8006e92:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000f34 	.word	0x20000f34
 8006ea0:	080077b8 	.word	0x080077b8

08006ea4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	221a      	movs	r2, #26
 8006eb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006eb6:	f000 f843 	bl	8006f40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006eba:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000174 	.word	0x20000174

08006ec8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	4907      	ldr	r1, [pc, #28]	; (8006efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ede:	4808      	ldr	r0, [pc, #32]	; (8006f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ee0:	f7ff fd97 	bl	8006a12 <USBD_GetString>
 8006ee4:	e004      	b.n	8006ef0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4904      	ldr	r1, [pc, #16]	; (8006efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eea:	4805      	ldr	r0, [pc, #20]	; (8006f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eec:	f7ff fd91 	bl	8006a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef0:	4b02      	ldr	r3, [pc, #8]	; (8006efc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000f34 	.word	0x20000f34
 8006f00:	080077cc 	.word	0x080077cc

08006f04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6039      	str	r1, [r7, #0]
 8006f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d105      	bne.n	8006f22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f1a:	4808      	ldr	r0, [pc, #32]	; (8006f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f1c:	f7ff fd79 	bl	8006a12 <USBD_GetString>
 8006f20:	e004      	b.n	8006f2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4904      	ldr	r1, [pc, #16]	; (8006f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f26:	4805      	ldr	r0, [pc, #20]	; (8006f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f28:	f7ff fd73 	bl	8006a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f2c:	4b02      	ldr	r3, [pc, #8]	; (8006f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000f34 	.word	0x20000f34
 8006f3c:	080077d8 	.word	0x080077d8

08006f40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f46:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <Get_SerialNum+0x44>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <Get_SerialNum+0x48>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <Get_SerialNum+0x4c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f66:	2208      	movs	r2, #8
 8006f68:	4909      	ldr	r1, [pc, #36]	; (8006f90 <Get_SerialNum+0x50>)
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f814 	bl	8006f98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f70:	2204      	movs	r2, #4
 8006f72:	4908      	ldr	r1, [pc, #32]	; (8006f94 <Get_SerialNum+0x54>)
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f000 f80f 	bl	8006f98 <IntToUnicode>
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	1fff7a10 	.word	0x1fff7a10
 8006f88:	1fff7a14 	.word	0x1fff7a14
 8006f8c:	1fff7a18 	.word	0x1fff7a18
 8006f90:	20000176 	.word	0x20000176
 8006f94:	20000186 	.word	0x20000186

08006f98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]
 8006fae:	e027      	b.n	8007000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	0f1b      	lsrs	r3, r3, #28
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	d80b      	bhi.n	8006fd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	0f1b      	lsrs	r3, r3, #28
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	440b      	add	r3, r1
 8006fc8:	3230      	adds	r2, #48	; 0x30
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	e00a      	b.n	8006fe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	0f1b      	lsrs	r3, r3, #28
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	4619      	mov	r1, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	440b      	add	r3, r1
 8006fe0:	3237      	adds	r2, #55	; 0x37
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
 8007000:	7dfa      	ldrb	r2, [r7, #23]
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	429a      	cmp	r2, r3
 8007006:	d3d3      	bcc.n	8006fb0 <IntToUnicode+0x18>
  }
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	; 0x28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007020:	f107 0314 	add.w	r3, r7, #20
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d13a      	bne.n	80070b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	6313      	str	r3, [r2, #48]	; 0x30
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800705a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705c:	2302      	movs	r3, #2
 800705e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007064:	2303      	movs	r3, #3
 8007066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007068:	230a      	movs	r3, #10
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800706c:	f107 0314 	add.w	r3, r7, #20
 8007070:	4619      	mov	r1, r3
 8007072:	4812      	ldr	r0, [pc, #72]	; (80070bc <HAL_PCD_MspInit+0xa4>)
 8007074:	f7fa fea0 	bl	8001db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 800707e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007082:	6353      	str	r3, [r2, #52]	; 0x34
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 800708e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007092:	6453      	str	r3, [r2, #68]	; 0x44
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_PCD_MspInit+0xa0>)
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	2043      	movs	r0, #67	; 0x43
 80070a6:	f7fa fe50 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070aa:	2043      	movs	r0, #67	; 0x43
 80070ac:	f7fa fe69 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070b0:	bf00      	nop
 80070b2:	3728      	adds	r7, #40	; 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40023800 	.word	0x40023800
 80070bc:	40020000 	.word	0x40020000

080070c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fe fcb4 	bl	8005a44 <USBD_LL_SetupStage>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	4619      	mov	r1, r3
 800710e:	f7fe fcee 	bl	8005aee <USBD_LL_DataOutStage>
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	3348      	adds	r3, #72	; 0x48
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	4619      	mov	r1, r3
 8007142:	f7fe fd37 	bl	8005bb4 <USBD_LL_DataInStage>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fe4b 	bl	8005df8 <USBD_LL_SOF>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d001      	beq.n	8007182 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800717e:	f7f9 ff93 	bl	80010a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007188:	7bfa      	ldrb	r2, [r7, #15]
 800718a:	4611      	mov	r1, r2
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fdf5 	bl	8005d7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe fda1 	bl	8005ce0 <USBD_LL_Reset>
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fdf0 	bl	8005d9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <HAL_PCD_SuspendCallback+0x48>)
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <HAL_PCD_SuspendCallback+0x48>)
 80071e2:	f043 0306 	orr.w	r3, r3, #6
 80071e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	e000ed00 	.word	0xe000ed00

080071f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fde0 	bl	8005dc8 <USBD_LL_Resume>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fe2e 	bl	8005e88 <USBD_LL_IsoOUTIncomplete>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fdf6 	bl	8005e3c <USBD_LL_IsoINIncomplete>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fe34 	bl	8005ed4 <USBD_LL_DevConnected>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fe31 	bl	8005eea <USBD_LL_DevDisconnected>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d13c      	bne.n	800731a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072a0:	4a20      	ldr	r2, [pc, #128]	; (8007324 <USBD_LL_Init+0x94>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1e      	ldr	r2, [pc, #120]	; (8007324 <USBD_LL_Init+0x94>)
 80072ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072b0:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <USBD_LL_Init+0x94>)
 80072b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072b8:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <USBD_LL_Init+0x94>)
 80072ba:	2204      	movs	r2, #4
 80072bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072be:	4b19      	ldr	r3, [pc, #100]	; (8007324 <USBD_LL_Init+0x94>)
 80072c0:	2202      	movs	r2, #2
 80072c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072c4:	4b17      	ldr	r3, [pc, #92]	; (8007324 <USBD_LL_Init+0x94>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ca:	4b16      	ldr	r3, [pc, #88]	; (8007324 <USBD_LL_Init+0x94>)
 80072cc:	2202      	movs	r2, #2
 80072ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072d0:	4b14      	ldr	r3, [pc, #80]	; (8007324 <USBD_LL_Init+0x94>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <USBD_LL_Init+0x94>)
 80072d8:	2200      	movs	r2, #0
 80072da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <USBD_LL_Init+0x94>)
 80072de:	2200      	movs	r2, #0
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072e2:	4b10      	ldr	r3, [pc, #64]	; (8007324 <USBD_LL_Init+0x94>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <USBD_LL_Init+0x94>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <USBD_LL_Init+0x94>)
 80072f0:	f7fa ff17 	bl	8002122 <HAL_PCD_Init>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072fa:	f7f9 fed5 	bl	80010a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	4808      	ldr	r0, [pc, #32]	; (8007324 <USBD_LL_Init+0x94>)
 8007302:	f7fc f874 	bl	80033ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007306:	2240      	movs	r2, #64	; 0x40
 8007308:	2100      	movs	r1, #0
 800730a:	4806      	ldr	r0, [pc, #24]	; (8007324 <USBD_LL_Init+0x94>)
 800730c:	f7fc f828 	bl	8003360 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	2101      	movs	r1, #1
 8007314:	4803      	ldr	r0, [pc, #12]	; (8007324 <USBD_LL_Init+0x94>)
 8007316:	f7fc f823 	bl	8003360 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20001134 	.word	0x20001134

08007328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800733e:	4618      	mov	r0, r3
 8007340:	f7fb f80c 	bl	800235c <HAL_PCD_Start>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f942 	bl	80075d4 <USBD_Get_USB_Status>
 8007350:	4603      	mov	r3, r0
 8007352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007354:	7bbb      	ldrb	r3, [r7, #14]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	461a      	mov	r2, r3
 800736c:	4603      	mov	r3, r0
 800736e:	70fb      	strb	r3, [r7, #3]
 8007370:	460b      	mov	r3, r1
 8007372:	70bb      	strb	r3, [r7, #2]
 8007374:	4613      	mov	r3, r2
 8007376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007386:	78bb      	ldrb	r3, [r7, #2]
 8007388:	883a      	ldrh	r2, [r7, #0]
 800738a:	78f9      	ldrb	r1, [r7, #3]
 800738c:	f7fb fbf0 	bl	8002b70 <HAL_PCD_EP_Open>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f91c 	bl	80075d4 <USBD_Get_USB_Status>
 800739c:	4603      	mov	r3, r0
 800739e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fb fc39 	bl	8002c40 <HAL_PCD_EP_Close>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 f8fd 	bl	80075d4 <USBD_Get_USB_Status>
 80073da:	4603      	mov	r3, r0
 80073dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073de:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fb fd11 	bl	8002e2e <HAL_PCD_EP_SetStall>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f8de 	bl	80075d4 <USBD_Get_USB_Status>
 8007418:	4603      	mov	r3, r0
 800741a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741c:	7bbb      	ldrb	r3, [r7, #14]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7fb fd56 	bl	8002ef6 <HAL_PCD_EP_ClrStall>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f8bf 	bl	80075d4 <USBD_Get_USB_Status>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745a:	7bbb      	ldrb	r3, [r7, #14]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800747c:	2b00      	cmp	r3, #0
 800747e:	da0b      	bge.n	8007498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	333e      	adds	r3, #62	; 0x3e
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	e00b      	b.n	80074b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	4613      	mov	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fb fb23 	bl	8002b26 <HAL_PCD_SetAddress>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f874 	bl	80075d4 <USBD_Get_USB_Status>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b086      	sub	sp, #24
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	460b      	mov	r3, r1
 8007508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007518:	7af9      	ldrb	r1, [r7, #11]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	f7fb fc3c 	bl	8002d9a <HAL_PCD_EP_Transmit>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f853 	bl	80075d4 <USBD_Get_USB_Status>
 800752e:	4603      	mov	r3, r0
 8007530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007532:	7dbb      	ldrb	r3, [r7, #22]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	460b      	mov	r3, r1
 800754a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800755a:	7af9      	ldrb	r1, [r7, #11]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f7fb fbb8 	bl	8002cd4 <HAL_PCD_EP_Receive>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f832 	bl	80075d4 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007574:	7dbb      	ldrb	r3, [r7, #22]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	4611      	mov	r1, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7fb fbe8 	bl	8002d6a <HAL_PCD_EP_GetRxCount>
 800759a:	4603      	mov	r3, r0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075ac:	4b03      	ldr	r3, [pc, #12]	; (80075bc <USBD_static_malloc+0x18>)
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	200001e4 	.word	0x200001e4

080075c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d817      	bhi.n	8007618 <USBD_Get_USB_Status+0x44>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_Get_USB_Status+0x1c>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007607 	.word	0x08007607
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	08007613 	.word	0x08007613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
    break;
 8007604:	e00b      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
    break;
 800760a:	e008      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
    break;
 8007610:	e005      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	73fb      	strb	r3, [r7, #15]
    break;
 8007616:	e002      	b.n	800761e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007618:	2303      	movs	r3, #3
 800761a:	73fb      	strb	r3, [r7, #15]
    break;
 800761c:	bf00      	nop
  }
  return usb_status;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <__libc_init_array>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	4d0d      	ldr	r5, [pc, #52]	; (8007664 <__libc_init_array+0x38>)
 8007630:	4c0d      	ldr	r4, [pc, #52]	; (8007668 <__libc_init_array+0x3c>)
 8007632:	1b64      	subs	r4, r4, r5
 8007634:	10a4      	asrs	r4, r4, #2
 8007636:	2600      	movs	r6, #0
 8007638:	42a6      	cmp	r6, r4
 800763a:	d109      	bne.n	8007650 <__libc_init_array+0x24>
 800763c:	4d0b      	ldr	r5, [pc, #44]	; (800766c <__libc_init_array+0x40>)
 800763e:	4c0c      	ldr	r4, [pc, #48]	; (8007670 <__libc_init_array+0x44>)
 8007640:	f000 f82e 	bl	80076a0 <_init>
 8007644:	1b64      	subs	r4, r4, r5
 8007646:	10a4      	asrs	r4, r4, #2
 8007648:	2600      	movs	r6, #0
 800764a:	42a6      	cmp	r6, r4
 800764c:	d105      	bne.n	800765a <__libc_init_array+0x2e>
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	f855 3b04 	ldr.w	r3, [r5], #4
 8007654:	4798      	blx	r3
 8007656:	3601      	adds	r6, #1
 8007658:	e7ee      	b.n	8007638 <__libc_init_array+0xc>
 800765a:	f855 3b04 	ldr.w	r3, [r5], #4
 800765e:	4798      	blx	r3
 8007660:	3601      	adds	r6, #1
 8007662:	e7f2      	b.n	800764a <__libc_init_array+0x1e>
 8007664:	08007800 	.word	0x08007800
 8007668:	08007800 	.word	0x08007800
 800766c:	08007800 	.word	0x08007800
 8007670:	08007804 	.word	0x08007804

08007674 <memcpy>:
 8007674:	440a      	add	r2, r1
 8007676:	4291      	cmp	r1, r2
 8007678:	f100 33ff 	add.w	r3, r0, #4294967295
 800767c:	d100      	bne.n	8007680 <memcpy+0xc>
 800767e:	4770      	bx	lr
 8007680:	b510      	push	{r4, lr}
 8007682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800768a:	4291      	cmp	r1, r2
 800768c:	d1f9      	bne.n	8007682 <memcpy+0xe>
 800768e:	bd10      	pop	{r4, pc}

08007690 <memset>:
 8007690:	4402      	add	r2, r0
 8007692:	4603      	mov	r3, r0
 8007694:	4293      	cmp	r3, r2
 8007696:	d100      	bne.n	800769a <memset+0xa>
 8007698:	4770      	bx	lr
 800769a:	f803 1b01 	strb.w	r1, [r3], #1
 800769e:	e7f9      	b.n	8007694 <memset+0x4>

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
